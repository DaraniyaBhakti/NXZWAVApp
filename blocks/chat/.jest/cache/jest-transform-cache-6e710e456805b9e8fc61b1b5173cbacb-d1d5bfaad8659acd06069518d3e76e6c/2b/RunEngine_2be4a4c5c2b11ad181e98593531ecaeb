05b23955a64193b9be9aa3f3dc6f883e
"use strict";

// Do not change anything in the protected area. Doing so will be detected and your commit will be rejected.
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runEngine = void 0;
// Protected Area Start
const Channel_1 = require("./Channel");
class RunEngine {
  constructor() {
    this.debugLog = (tag, data = null) => {
      console.log('=====================Debug Log Start======================');
      if (data !== undefined) {
        console.log(tag + '====>' + JSON.stringify(data));
      }
      console.log('=====================Debug Log End======================');
      console.log('        ');
    };
    this.channels = new Map();
    this.addChannel = this.addChannel.bind(this);
    this.attachBuildingBlock = this.attachBuildingBlock.bind(this);
    this.sendMessage = this.sendMessage.bind(this);
    this.unSubscribeFromMessages = this.unSubscribeFromMessages.bind(this);
  }
  addChannel(topic) {
    this.channels.set(topic, new Channel_1.Channel(topic));
  }
  unSubscribeFromMessages(block, subscribedMessages) {
    if (subscribedMessages) {
      subscribedMessages.forEach(topic => {
        const channel = this.channels.get(topic);
        if (channel) {
          channel.unsub(block);
        }
      });
    }
  }
  attachBuildingBlock(block, subscribedMessages) {
    subscribedMessages.forEach(topic => {
      if (!this.channels.has(topic)) {
        this.addChannel(topic);
      }
      const channel = this.channels.get(topic);
      if (channel) {
        channel.sub(block);
      }
    });
  }
  sendMessage(from, message) {
    if (message && message.id) {
      const channel = this.channels.get(message.id);
      if (channel) {
        channel.subscribers.forEach(block => block.receive(from, message));
      }
    }
  }
}
const runEngine = new RunEngine();
exports.runEngine = runEngine;
// Protected Area End
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGFubmVsXzEiLCJyZXF1aXJlIiwiUnVuRW5naW5lIiwiY29uc3RydWN0b3IiLCJkZWJ1Z0xvZyIsInRhZyIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwidW5kZWZpbmVkIiwiSlNPTiIsInN0cmluZ2lmeSIsImNoYW5uZWxzIiwiTWFwIiwiYWRkQ2hhbm5lbCIsImJpbmQiLCJhdHRhY2hCdWlsZGluZ0Jsb2NrIiwic2VuZE1lc3NhZ2UiLCJ1blN1YnNjcmliZUZyb21NZXNzYWdlcyIsInRvcGljIiwic2V0IiwiQ2hhbm5lbCIsImJsb2NrIiwic3Vic2NyaWJlZE1lc3NhZ2VzIiwiZm9yRWFjaCIsImNoYW5uZWwiLCJnZXQiLCJ1bnN1YiIsImhhcyIsInN1YiIsImZyb20iLCJtZXNzYWdlIiwiaWQiLCJzdWJzY3JpYmVycyIsInJlY2VpdmUiLCJydW5FbmdpbmUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiL1VzZXJzL21hY20xNC9Eb2N1bWVudHMvTlhaV0FXL254endhdi0yOTQ3OTMtcmVhY3QtbmF0aXZlL3NyYy9wYWNrYWdlcy9mcmFtZXdvcmsvc3JjL1J1bkVuZ2luZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRG8gbm90IGNoYW5nZSBhbnl0aGluZyBpbiB0aGUgcHJvdGVjdGVkIGFyZWEuIERvaW5nIHNvIHdpbGwgYmUgZGV0ZWN0ZWQgYW5kIHlvdXIgY29tbWl0IHdpbGwgYmUgcmVqZWN0ZWQuXG5cbi8vIFByb3RlY3RlZCBBcmVhIFN0YXJ0XG5cbmltcG9ydCB7IENoYW5uZWwgfSBmcm9tICcuL0NoYW5uZWwnO1xuaW1wb3J0IHsgSUJsb2NrIH0gZnJvbSAnLi9JQmxvY2snO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4vTWVzc2FnZSc7XG5cbmNsYXNzIFJ1bkVuZ2luZSB7XG4gIGNoYW5uZWxzOiBNYXA8c3RyaW5nLCBDaGFubmVsPjtcblxuICBkZWJ1Z0xvZyA9ICh0YWc6IGFueSwgZGF0YTogYW55ID0gbnVsbCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PT09PT09PT1EZWJ1ZyBMb2cgU3RhcnQ9PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5sb2codGFnICsgJz09PT0+JyArIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PURlYnVnIExvZyBFbmQ9PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gICAgY29uc29sZS5sb2coJyAgICAgICAgJyk7XG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jaGFubmVscyA9IG5ldyBNYXA8c3RyaW5nLCBDaGFubmVsPigpO1xuICAgIHRoaXMuYWRkQ2hhbm5lbCA9IHRoaXMuYWRkQ2hhbm5lbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYXR0YWNoQnVpbGRpbmdCbG9jayA9IHRoaXMuYXR0YWNoQnVpbGRpbmdCbG9jay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZE1lc3NhZ2UgPSB0aGlzLnNlbmRNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy51blN1YnNjcmliZUZyb21NZXNzYWdlcyA9IHRoaXMudW5TdWJzY3JpYmVGcm9tTWVzc2FnZXMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFkZENoYW5uZWwodG9waWM6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuY2hhbm5lbHMuc2V0KHRvcGljLCBuZXcgQ2hhbm5lbCh0b3BpYykpO1xuICB9XG5cbiAgdW5TdWJzY3JpYmVGcm9tTWVzc2FnZXMoYmxvY2s6IElCbG9jaywgc3Vic2NyaWJlZE1lc3NhZ2VzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGlmIChzdWJzY3JpYmVkTWVzc2FnZXMpIHtcbiAgICAgIHN1YnNjcmliZWRNZXNzYWdlcy5mb3JFYWNoKHRvcGljID0+IHtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZ2V0KHRvcGljKTtcbiAgICAgICAgaWYgKGNoYW5uZWwpIHtcbiAgICAgICAgICBjaGFubmVsLnVuc3ViKGJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXR0YWNoQnVpbGRpbmdCbG9jayhibG9jazogSUJsb2NrLCBzdWJzY3JpYmVkTWVzc2FnZXM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgc3Vic2NyaWJlZE1lc3NhZ2VzLmZvckVhY2godG9waWMgPT4ge1xuICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzLmhhcyh0b3BpYykpIHtcbiAgICAgICAgdGhpcy5hZGRDaGFubmVsKHRvcGljKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZ2V0KHRvcGljKTtcbiAgICAgIGlmIChjaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwuc3ViKGJsb2NrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKGZyb206IHN0cmluZywgbWVzc2FnZTogTWVzc2FnZSk6IHZvaWQge1xuICAgIGlmICggbWVzc2FnZSAmJiBtZXNzYWdlLmlkICkge1xuICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuZ2V0KG1lc3NhZ2UuaWQpO1xuICAgICAgaWYgKGNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbC5zdWJzY3JpYmVycy5mb3JFYWNoKGJsb2NrID0+IGJsb2NrLnJlY2VpdmUoZnJvbSwgbWVzc2FnZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBydW5FbmdpbmUgPSBuZXcgUnVuRW5naW5lKCk7XG5leHBvcnQgeyBydW5FbmdpbmUgfTtcblxuLy8gUHJvdGVjdGVkIEFyZWEgRW5kXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7O0FBRUE7QUFFQSxNQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFJQSxNQUFNQyxTQUFTO0VBWWJDLFlBQUE7SUFUQSxLQUFBQyxRQUFRLEdBQUcsQ0FB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