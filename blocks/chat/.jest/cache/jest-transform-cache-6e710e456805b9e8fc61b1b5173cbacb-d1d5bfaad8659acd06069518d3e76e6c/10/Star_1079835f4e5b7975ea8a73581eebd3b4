6f4bc96bec76a1603a84c2c067634916
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var STAR_IMAGE = require('../images/airbnb-star.png');
var STAR_SELECTED_IMAGE = require('../images/airbnb-star-selected.png');
var STAR_SIZE = 40;
var Star = function (_PureComponent) {
  (0, _inherits2.default)(Star, _PureComponent);
  var _super = _createSuper(Star);
  function Star() {
    var _this;
    (0, _classCallCheck2.default)(this, Star);
    _this = _super.call(this);
    _this.springValue = new _reactNative.Animated.Value(1);
    _this.state = {
      selected: false
    };
    return _this;
  }
  (0, _createClass2.default)(Star, [{
    key: "spring",
    value: function spring() {
      var _this$props = this.props,
        position = _this$props.position,
        starSelectedInPosition = _this$props.starSelectedInPosition;
      this.springValue.setValue(1.2);
      _reactNative.Animated.spring(this.springValue, {
        toValue: 1,
        friction: 2,
        tension: 1
      }).start();
      this.setState({
        selected: !this.state.selected
      });
      starSelectedInPosition(position);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        fill = _this$props2.fill,
        size = _this$props2.size,
        selectedColor = _this$props2.selectedColor,
        isDisabled = _this$props2.isDisabled,
        starStyle = _this$props2.starStyle;
      var starSource = fill && selectedColor === null ? STAR_SELECTED_IMAGE : STAR_IMAGE;
      return _react.default.createElement(_reactNative.TouchableOpacity, {
        activeOpacity: 1,
        onPress: this.spring.bind(this),
        disabled: isDisabled
      }, _react.default.createElement(_reactNative.Animated.Image, {
        source: starSource,
        style: [styles.starStyle, {
          tintColor: fill && selectedColor ? selectedColor : undefined,
          width: size || STAR_SIZE,
          height: size || STAR_SIZE,
          transform: [{
            scale: this.springValue
          }]
        }, starStyle]
      }));
    }
  }]);
  return Star;
}(_react.PureComponent);
exports.default = Star;
Star.defaultProps = {
  selectedColor: '#f1c40f'
};
var styles = _reactNative.StyleSheet.create({
  starStyle: {
    margin: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,