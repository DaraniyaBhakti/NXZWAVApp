de7c962a90fa0e77d3570012ed043267
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_cucumber_1 = require("jest-cucumber");
const enzyme_1 = require("enzyme");
const helpersChatViewWeb = __importStar(require("../../../../framework/src/Helpers"));
const RunEngine_1 = require("../../../../framework/src/RunEngine");
const Message_1 = require("../../../../framework/src/Message");
const MessageEnum_1 = __importStar(require("../../../../framework/src/Messages/MessageEnum"));
const react_1 = __importDefault(require("react"));
const ChatView_web_1 = __importDefault(require("../../src/ChatView.web"));
const paramsChatViewWeb = {
    receiverUser: "ReceiveUser",
    userID: "7",
    userName: "name",
    userPic: "",
    userPoints: "12",
    userRole: "designer"
};
const testChatData = {
    id: "17",
    attributes: {
        id: 1,
        name: "test group",
        is_notification_mute: true,
        accounts_chats: [
            { id: "1", attributes: { account_id: 1, muted: true, unread_count: 5 } },
        ],
        messages: [
            {
                id: "1",
                type: "conversation",
                attributes: {
                    id: 1,
                    message: "hello",
                    user_profile_info_id: 1,
                    conversation_id: 1,
                    created_at: "2022-05-02T21:31:05.047Z",
                    updated_at: "2022-05-03T02:45:09.837Z",
                    is_mark_read: true,
                    profile_image: "",
                    user_name: ""
                },
            },
        ],
    },
    relationships: {
        accounts: {
            data: [
                {
                    id: "1",
                    type: "account",
                },
            ],
        },
    },
};
const screenPropsChatViewWeb = {
    navigation: {
        navigate: jest.fn(),
        setOptions: jest.fn(),
        push: jest.fn(),
        addListener: jest.fn().mockImplementation((event, callback) => {
            callback();
        }),
        onGoBack: jest.fn(),
        state: {
            params: {
                receiverUser: paramsChatViewWeb.receiverUser,
                userID: paramsChatViewWeb.userID,
                userName: paramsChatViewWeb.userName,
                userPic: paramsChatViewWeb.userPic,
                userPoints: paramsChatViewWeb.userPoints,
                userRole: paramsChatViewWeb.userRole
            },
        },
    },
    id: "ChatView",
};
const featureChatViewWeb = jest_cucumber_1.loadFeature("./__tests__/features/ChatView-scenario.web.feature");
jest_cucumber_1.defineFeature(featureChatViewWeb, (test) => {
    beforeEach(() => {
        jest.resetModules();
        jest.clearAllMocks();
        jest.doMock("react-native", () => ({ Platform: { OS: "web" } }));
        jest.spyOn(helpersChatViewWeb, "getOS").mockImplementation(() => "web");
        jest.spyOn(RunEngine_1.runEngine, "sendMessage");
    });
    test("User navigates to ChatView", ({ given, when, then }) => {
        let chatViewWebWrapper;
        let instanceChatViewWeb;
        let fileChatViewWeb;
        given("I am a User loading ChatView", () => {
            chatViewWebWrapper = enzyme_1.shallow(react_1.default.createElement(ChatView_web_1.default, Object.assign({}, screenPropsChatViewWeb)));
        });
        when("I navigate to ChatView", () => {
            instanceChatViewWeb = chatViewWebWrapper.instance();
            const accountIdInputChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "inputAccountID");
            accountIdInputChatViewWeb.simulate("change", "2");
            accountIdInputChatViewWeb.simulate("change", "hey");
            const addAccountButtonChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnAddAccount");
            addAccountButtonChatViewWeb.simulate("click");
            const buttonComponentChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnCloseModal");
            buttonComponentChatViewWeb.simulate("click");
            const buttonClosePreviewComponentChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnClosePreviewModal");
            buttonClosePreviewComponentChatViewWeb.simulate("click");
            const messageInputChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "inputImageMessage");
            messageInputChatViewWeb.simulate("change", "Hi");
            const messageInputmChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "inputMessage");
            messageInputmChatViewWeb.simulate("change", "Hi");
        });
        then("ChatView will load", () => {
            instanceChatViewWeb.setState({ chatData: testChatData });
            const buttonComponentChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnShowAddModal");
            buttonComponentChatViewWeb.simulate("click");
        });
        when("I click on the btnInsertImage button", () => {
            const insertButtonChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnInsertImage");
            insertButtonChatViewWeb.simulate("click");
            const buttonComponentSendChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnSendImageMessage");
            buttonComponentSendChatViewWeb.simulate("click");
        });
        then("I can change image file", () => {
            const fileInputChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "FileInput");
            fileInputChatViewWeb.simulate("change", { target: { value: '', files: [] } });
            fileChatViewWeb = new Blob([new ArrayBuffer(1)]);
            fileInputChatViewWeb.simulate("change", { target: { value: 'T', files: [fileChatViewWeb] } });
        });
        when("I click on the leaveChat button", () => {
            const buttonComponentChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnLeaveChat");
            buttonComponentChatViewWeb.simulate("click");
        });
        then("a call to leave the chat room will be made", () => {
            const leaveChatRoomApiMessageChatViewWeb = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            leaveChatRoomApiMessageChatViewWeb.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), leaveChatRoomApiMessageChatViewWeb.messageId);
            instanceChatViewWeb.leaveChatApiCallId = leaveChatRoomApiMessageChatViewWeb.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", leaveChatRoomApiMessageChatViewWeb);
            instanceChatViewWeb.setState({ message: "" });
            const buttonComponentSendChatViewWeb = chatViewWebWrapper.findWhere((node) => node.prop("data-test-id") === "btnSendImageMessage");
            buttonComponentSendChatViewWeb.simulate("click");
            instanceChatViewWeb.handleMessageChange("message");
        });
        then("I can leave the screen", () => {
            instanceChatViewWeb.componentWillUnmount();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,