{"version":3,"names":["_interopRequireDefault","require","_defineProperty2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_extends2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","Platform","deepDiffer","React","View","VirtualizedList","StyleSheet","invariant","defaultProps","numColumns","removeClippedSubviews","OS","FlatList","_React$PureComponent","_super","props","_this","_virtualizedListPairs","_captureRef","ref","_listRef","_getItem","data","index","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","_this$props","keyExtractor","Array","isArray","map","it","join","_renderer","_this$props2","ListItemComponent","renderItem","columnWrapperStyle","virtualizedListRenderKey","renderer","createElement","info","style","compose","styles","row","element","separators","Fragment","key","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","value","scrollToEnd","params","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollableNode","setNativeProps","componentDidUpdate","prevProps","getItem","getItemCount","horizontal","_pushMultiColumnViewable","arr","v","_this$props3","forEach","ii","_this2","changed","viewableItems","render","PureComponent","create","flexDirection","module","exports"],"sources":["FlatList.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst Platform = require('../Utilities/Platform');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst React = require('react');\nconst View = require('../Components/View/View');\nconst VirtualizedList = require('./VirtualizedList');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\n\nconst invariant = require('invariant');\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  ViewabilityConfig,\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from './ViewabilityHelper';\nimport type {\n  Props as VirtualizedListProps,\n  RenderItemType,\n  RenderItemProps,\n} from './VirtualizedList';\n\ntype RequiredProps<ItemT> = {\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem?: ?RenderItemType<ItemT>,\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?React.ComponentType<any>,\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       ListItemComponent={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  ListItemComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListFooterComponent\n   */\n  ListFooterComponentStyle?: ViewStyleProp,\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListHeaderComponent\n   */\n  ListHeaderComponentStyle?: ViewStyleProp,\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  /**\n   * The legacy implementation is no longer supported.\n   */\n  legacyImplementation?: empty,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * List of ViewabilityConfig/onViewableItemsChanged pairs. A specific onViewableItemsChanged\n   * will be called when its corresponding ViewabilityConfig's conditions are met.\n   */\n  viewabilityConfigCallbackPairs?: Array<ViewabilityConfigCallbackPair>,\n};\nexport type Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n  /**\n   * Enabling this prop on Android greatly improves scrolling performance with no known issues.\n   * The alternative is that scrolling on Android is unusably bad. Enabling it on iOS has a few\n   * known issues.\n   */\n  removeClippedSubviews: Platform.OS === 'android',\n};\nexport type DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): any {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode(): any {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      this._virtualizedListPairs.push({\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      numColumns,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        if (item != null) {\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => {\n      const {numColumns} = this.props;\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderer = () => {\n    const {\n      ListItemComponent,\n      renderItem,\n      numColumns,\n      columnWrapperStyle,\n    } = this.props;\n\n    let virtualizedListRenderKey = ListItemComponent\n      ? 'ListItemComponent'\n      : 'renderItem';\n\n    const renderer = props => {\n      if (ListItemComponent) {\n        return <ListItemComponent {...props} />;\n      } else if (renderItem) {\n        return renderItem(props);\n      } else {\n        return null;\n      }\n    };\n\n    return {\n      [virtualizedListRenderKey]: (info: RenderItemProps<ItemT>) => {\n        if (numColumns > 1) {\n          const {item, index} = info;\n          invariant(\n            Array.isArray(item),\n            'Expected array of items with numColumns > 1',\n          );\n          return (\n            <View\n              style={StyleSheet.compose(\n                styles.row,\n                columnWrapperStyle,\n              )}>\n              {item.map((it, kk) => {\n                const element = renderer({\n                  item: it,\n                  index: index * numColumns + kk,\n                  separators: info.separators,\n                });\n                return element != null ? (\n                  <React.Fragment key={kk}>{element}</React.Fragment>\n                ) : null;\n              })}\n            </View>\n          );\n        } else {\n          return renderer(info);\n        }\n      },\n    };\n  };\n\n  render(): React.Node {\n    return (\n      <VirtualizedList\n        {...this.props}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        {...this._renderer()}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n"],"mappings":"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"}