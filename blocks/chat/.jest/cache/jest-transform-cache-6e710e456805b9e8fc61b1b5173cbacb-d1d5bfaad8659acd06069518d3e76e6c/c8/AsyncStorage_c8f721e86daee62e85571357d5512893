d1f90a98b7b5cb127e68cc652c1d5503
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defaults = require("./defaults");
var _extension = require("./extension");
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var AsyncStorage = function () {
  function AsyncStorage(storageBackend, asOptions) {
    (0, _classCallCheck2.default)(this, AsyncStorage);
    _defineProperty(this, "ext", void 0);
    _defineProperty(this, "_backend", void 0);
    _defineProperty(this, "_config", void 0);
    _defineProperty(this, "log", void 0);
    _defineProperty(this, "error", void 0);
    this._backend = storageBackend;
    this._config = asOptions;
    this.log = _defaults.noop;
    this.error = _defaults.noop;
    this.ext = (0, _extension.createExtension)(this._backend);
    if (this._config.logger) {
      this.log = typeof this._config.logger === 'function' ? this._config.logger : _defaults.simpleLogger;
    }
    if (this._config.errorHandler) {
      this.error = typeof this._config.errorHandler === 'function' ? this._config.errorHandler : _defaults.simpleErrorHandler;
    }
  }
  (0, _createClass2.default)(AsyncStorage, [{
    key: "get",
    value: function get(key) {
      var opts,
        value,
        _args = arguments;
      return _regenerator.default.async(function get$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
            value = null;
            _context.prev = 2;
            this.log({
              action: 'read-single',
              key: key
            });
            _context.next = 6;
            return _regenerator.default.awrap(this._backend.getSingle(key, opts));
          case 6:
            value = _context.sent;
            _context.next = 12;
            break;
          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);
            this.error(_context.t0);
          case 12:
            return _context.abrupt("return", value);
          case 13:
          case "end":
            return _context.stop();
        }
      }, null, this, [[2, 9]], Promise);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var opts,
        _args2 = arguments;
      return _regenerator.default.async(function set$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            opts = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : null;
            _context2.prev = 1;
            this.log({
              action: 'save-single',
              key: key,
              value: value
            });
            _context2.next = 5;
            return _regenerator.default.awrap(this._backend.setSingle(key, value, opts));
          case 5:
            _context2.next = 10;
            break;
          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](1);
            this.error(_context2.t0);
          case 10:
          case "end":
            return _context2.stop();
        }
      }, null, this, [[1, 7]], Promise);
    }
  }, {
    key: "getMultiple",
    value: function getMultiple(keys) {
      var opts,
        values,
        _args3 = arguments;
      return _regenerator.default.async(function getMultiple$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            opts = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : null;
            values = {};
            _context3.prev = 2;
            this.log({
              action: 'read-many',
              key: keys
            });
            _context3.next = 6;
            return _regenerator.default.awrap(this._backend.getMany(keys, opts));
          case 6:
            values = _context3.sent;
            _context3.next = 12;
            break;
          case 9:
            _context3.prev = 9;
            _context3.t0 = _context3["catch"](2);
            this.error(_context3.t0);
          case 12:
            return _context3.abrupt("return", values);
          case 13:
          case "end":
            return _context3.stop();
        }
      }, null, this, [[2, 9]], Promise);
    }
  }, {
    key: "setMultiple",
    value: function setMultiple(keyValues) {
      var opts,
        _args4 = arguments;
      return _regenerator.default.async(function setMultiple$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            opts = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : null;
            _context4.prev = 1;
            this.log({
              action: 'save-many',
              value: keyValues
            });
            _context4.next = 5;
            return _regenerator.default.awrap(this._backend.setMany(keyValues, opts));
          case 5:
            _context4.next = 10;
            break;
          case 7:
            _context4.prev = 7;
            _context4.t0 = _context4["catch"](1);
            this.error(_context4.t0);
          case 10:
          case "end":
            return _context4.stop();
        }
      }, null, this, [[1, 7]], Promise);
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var opts,
        _args5 = arguments;
      return _regenerator.default.async(function remove$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            opts = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;
            _context5.prev = 1;
            this.log({
              action: 'delete-single',
              key: key
            });
            _context5.next = 5;
            return _regenerator.default.awrap(this._backend.removeSingle(key, opts));
          case 5:
            _context5.next = 10;
            break;
          case 7:
            _context5.prev = 7;
            _context5.t0 = _context5["catch"](1);
            this.error(_context5.t0);
          case 10:
          case "end":
            return _context5.stop();
        }
      }, null, this, [[1, 7]], Promise);
    }
  }, {
    key: "removeMultiple",
    value: function removeMultiple(keys) {
      var opts,
        _args6 = arguments;
      return _regenerator.default.async(function removeMultiple$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : null;
            _context6.prev = 1;
            this.log({
              action: 'delete-many',
              key: keys
            });
            _context6.next = 5;
            return _regenerator.default.awrap(this._backend.removeMany(keys, opts));
          case 5:
            _context6.next = 10;
            break;
          case 7:
            _context6.prev = 7;
            _context6.t0 = _context6["catch"](1);
            this.error(_context6.t0);
          case 10:
          case "end":
            return _context6.stop();
        }
      }, null, this, [[1, 7]], Promise);
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      var opts,
        keys,
        _args7 = arguments;
      return _regenerator.default.async(function getKeys$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            opts = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : null;
            keys = [];
            _context7.prev = 2;
            this.log({
              action: 'keys'
            });
            _context7.next = 6;
            return _regenerator.default.awrap(this._backend.getKeys(opts));
          case 6:
            keys = _context7.sent;
            _context7.next = 12;
            break;
          case 9:
            _context7.prev = 9;
            _context7.t0 = _context7["catch"](2);
            this.error(_context7.t0);
          case 12:
            return _context7.abrupt("return", keys);
          case 13:
          case "end":
            return _context7.stop();
        }
      }, null, this, [[2, 9]], Promise);
    }
  }, {
    key: "clearStorage",
    value: function clearStorage() {
      var opts,
        _args8 = arguments;
      return _regenerator.default.async(function clearStorage$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            opts = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : null;
            _context8.prev = 1;
            this.log({
              action: 'drop'
            });
            _context8.next = 5;
            return _regenerator.default.awrap(this._backend.dropStorage(opts));
          case 5:
            _context8.next = 10;
            break;
          case 7:
            _context8.prev = 7;
            _context8.t0 = _context8["catch"](1);
            this.error(_context8.t0);
          case 10:
          case "end":
            return _context8.stop();
        }
      }, null, this, [[1, 7]], Promise);
    }
  }]);
  return AsyncStorage;
}();
var _default = AsyncStorage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVmYXVsdHMiLCJyZXF1aXJlIiwiX2V4dGVuc2lvbiIsIkFzeW5jU3RvcmFnZSIsInN0b3JhZ2VCYWNrZW5kIiwiYXNPcHRpb25zIiwiX2NsYXNzQ2FsbENoZWNrMiIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJfYmFja2VuZCIsIl9jb25maWciLCJsb2ciLCJub29wIiwiZXJyb3IiLCJleHQiLCJjcmVhdGVFeHRlbnNpb24iLCJsb2dnZXIiLCJzaW1wbGVMb2dnZXIiLCJlcnJvckhhbmRsZXIiLCJzaW1wbGVFcnJvckhhbmRsZXIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJnZXQiLCJvcHRzIiwiX2FyZ3MiLCJhcmd1bWVudHMiLCJfcmVnZW5lcmF0b3IiLCJhc3luYyIsImdldCQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYWN0aW9uIiwiYXdyYXAiLCJnZXRTaW5nbGUiLCJzZW50IiwidDAiLCJhYnJ1cHQiLCJzdG9wIiwiUHJvbWlzZSIsInNldCIsIl9hcmdzMiIsInNldCQiLCJfY29udGV4dDIiLCJzZXRTaW5nbGUiLCJnZXRNdWx0aXBsZSIsImtleXMiLCJ2YWx1ZXMiLCJfYXJnczMiLCJnZXRNdWx0aXBsZSQiLCJfY29udGV4dDMiLCJnZXRNYW55Iiwic2V0TXVsdGlwbGUiLCJrZXlWYWx1ZXMiLCJfYXJnczQiLCJzZXRNdWx0aXBsZSQiLCJfY29udGV4dDQiLCJzZXRNYW55IiwicmVtb3ZlIiwiX2FyZ3M1IiwicmVtb3ZlJCIsIl9jb250ZXh0NSIsInJlbW92ZVNpbmdsZSIsInJlbW92ZU11bHRpcGxlIiwiX2FyZ3M2IiwicmVtb3ZlTXVsdGlwbGUkIiwiX2NvbnRleHQ2IiwicmVtb3ZlTWFueSIsImdldEtleXMiLCJfYXJnczciLCJnZXRLZXlzJCIsIl9jb250ZXh0NyIsImNsZWFyU3RvcmFnZSIsIl9hcmdzOCIsImNsZWFyU3RvcmFnZSQiLCJfY29udGV4dDgiLCJkcm9wU3RvcmFnZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9Bc3luY1N0b3JhZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFJlYWN0IE5hdGl2ZSBDb21tdW5pdHkuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7c2ltcGxlRXJyb3JIYW5kbGVyLCBzaW1wbGVMb2dnZXIsIG5vb3B9IGZyb20gJy4vZGVmYXVsdHMnO1xuaW1wb3J0IHtjcmVhdGVFeHRlbnNpb259IGZyb20gJy4vZXh0ZW5zaW9uJztcbmltcG9ydCB7XG4gIEV4dGVuc2lvblR5cGUsXG4gIEZhY3RvcnlPcHRpb25zLFxuICBJU3RvcmFnZUJhY2tlbmQsXG4gIExvZ2dlckFjdGlvbixcbiAgU3RvcmFnZU9wdGlvbnMsXG59IGZyb20gJy4uL3R5cGVzJztcblxuY2xhc3MgQXN5bmNTdG9yYWdlPE0sIFQgZXh0ZW5kcyBJU3RvcmFnZUJhY2tlbmQ8TT4+IHtcbiAgcmVhZG9ubHkgZXh0OiBFeHRlbnNpb25UeXBlPFQ+O1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2JhY2tlbmQ6IFQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZzogRmFjdG9yeU9wdGlvbnM7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nOiAoYWN0aW9uOiBMb2dnZXJBY3Rpb24pID0+IHZvaWQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXJyb3I6IChlOiBFcnJvciB8IHN0cmluZykgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihzdG9yYWdlQmFja2VuZDogVCwgYXNPcHRpb25zOiBGYWN0b3J5T3B0aW9ucykge1xuICAgIHRoaXMuX2JhY2tlbmQgPSBzdG9yYWdlQmFja2VuZDtcbiAgICB0aGlzLl9jb25maWcgPSBhc09wdGlvbnM7XG5cbiAgICAvLyBvZmYgYnkgZGVmYXVsdFxuICAgIHRoaXMubG9nID0gbm9vcDtcbiAgICB0aGlzLmVycm9yID0gbm9vcDtcblxuICAgIHRoaXMuZXh0ID0gY3JlYXRlRXh0ZW5zaW9uPFQ+KHRoaXMuX2JhY2tlbmQpO1xuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5sb2dnZXIpIHtcbiAgICAgIHRoaXMubG9nID1cbiAgICAgICAgdHlwZW9mIHRoaXMuX2NvbmZpZy5sb2dnZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICA/IHRoaXMuX2NvbmZpZy5sb2dnZXJcbiAgICAgICAgICA6IHNpbXBsZUxvZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgICAgdGhpcy5lcnJvciA9XG4gICAgICAgIHR5cGVvZiB0aGlzLl9jb25maWcuZXJyb3JIYW5kbGVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyB0aGlzLl9jb25maWcuZXJyb3JIYW5kbGVyXG4gICAgICAgICAgOiBzaW1wbGVFcnJvckhhbmRsZXI7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldDxLIGV4dGVuZHMga2V5b2YgTT4oXG4gICAga2V5OiBLLFxuICAgIG9wdHM6IFN0b3JhZ2VPcHRpb25zID0gbnVsbCxcbiAgKTogUHJvbWlzZTxNW0tdIHwgbnVsbD4ge1xuICAgIGxldCB2YWx1ZSA9IG51bGwgYXMgTVtLXSB8IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKHtcbiAgICAgICAgYWN0aW9uOiAncmVhZC1zaW5nbGUnLFxuICAgICAgICBrZXk6IGtleSBhcyBzdHJpbmcsXG4gICAgICB9KTtcbiAgICAgIHZhbHVlID0gYXdhaXQgdGhpcy5fYmFja2VuZC5nZXRTaW5nbGUoa2V5LCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yKGUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGFzeW5jIHNldDxLIGV4dGVuZHMga2V5b2YgTT4oXG4gICAga2V5OiBLLFxuICAgIHZhbHVlOiBNW0tdLFxuICAgIG9wdHM6IFN0b3JhZ2VPcHRpb25zID0gbnVsbCxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKHtcbiAgICAgICAgYWN0aW9uOiAnc2F2ZS1zaW5nbGUnLFxuICAgICAgICBrZXk6IGtleSBhcyBzdHJpbmcsXG4gICAgICAgIHZhbHVlLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLl9iYWNrZW5kLnNldFNpbmdsZShrZXksIHZhbHVlLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldE11bHRpcGxlPEsgZXh0ZW5kcyBrZXlvZiBNPihcbiAgICBrZXlzOiBBcnJheTxLPixcbiAgICBvcHRzOiBTdG9yYWdlT3B0aW9ucyA9IG51bGwsXG4gICk6IFByb21pc2U8e1trIGluIEtdOiBNW2tdIHwgbnVsbH0+IHtcbiAgICBsZXQgdmFsdWVzID0ge30gYXMge1trIGluIEtdOiBNW2tdIHwgbnVsbH07XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coe1xuICAgICAgICBhY3Rpb246ICdyZWFkLW1hbnknLFxuICAgICAgICBrZXk6IGtleXMgYXMgc3RyaW5nW10sXG4gICAgICB9KTtcbiAgICAgIHZhbHVlcyA9IGF3YWl0IHRoaXMuX2JhY2tlbmQuZ2V0TWFueShrZXlzLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yKGUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBhc3luYyBzZXRNdWx0aXBsZTxLIGV4dGVuZHMga2V5b2YgTT4oXG4gICAga2V5VmFsdWVzOiBBcnJheTx7W2sgaW4gS106IE1ba119PixcbiAgICBvcHRzOiBTdG9yYWdlT3B0aW9ucyA9IG51bGwsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZyh7XG4gICAgICAgIGFjdGlvbjogJ3NhdmUtbWFueScsXG4gICAgICAgIHZhbHVlOiBrZXlWYWx1ZXMsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMuX2JhY2tlbmQuc2V0TWFueShrZXlWYWx1ZXMsIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlKGtleToga2V5b2YgTSwgb3B0czogU3RvcmFnZU9wdGlvbnMgPSBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKHtcbiAgICAgICAgYWN0aW9uOiAnZGVsZXRlLXNpbmdsZScsXG4gICAgICAgIGtleToga2V5IGFzIHN0cmluZyxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy5fYmFja2VuZC5yZW1vdmVTaW5nbGUoa2V5LCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZU11bHRpcGxlKFxuICAgIGtleXM6IEFycmF5PGtleW9mIE0+LFxuICAgIG9wdHM6IFN0b3JhZ2VPcHRpb25zID0gbnVsbCxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKHtcbiAgICAgICAgYWN0aW9uOiAnZGVsZXRlLW1hbnknLFxuICAgICAgICBrZXk6IGtleXMgYXMgc3RyaW5nW10sXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMuX2JhY2tlbmQucmVtb3ZlTWFueShrZXlzLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEtleXMob3B0czogU3RvcmFnZU9wdGlvbnMgPSBudWxsKTogUHJvbWlzZTxBcnJheTxrZXlvZiBNPj4ge1xuICAgIGxldCBrZXlzOiBBcnJheTxrZXlvZiBNPiA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nKHtcbiAgICAgICAgYWN0aW9uOiAna2V5cycsXG4gICAgICB9KTtcbiAgICAgIGtleXMgPSBhd2FpdCB0aGlzLl9iYWNrZW5kLmdldEtleXMob3B0cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5lcnJvcihlKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGFzeW5jIGNsZWFyU3RvcmFnZShvcHRzOiBTdG9yYWdlT3B0aW9ucyA9IG51bGwpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2coe1xuICAgICAgICBhY3Rpb246ICdkcm9wJyxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdGhpcy5fYmFja2VuZC5kcm9wU3RvcmFnZShvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmVycm9yKGUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBc3luY1N0b3JhZ2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFRQSxJQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7Ozs7Ozs7Ozs7Ozs7O0lBU01FLFlBQU47RUFRRSxTQUFBQSxhQUFZQyxjQUFELEVBQW9CQyxTQUFwQixFQUErQztJQUFBLElBQUFDLGdCQUFBLENBQUFDLE9BQUEsUUFBQUosWUFBQTtJQUFBSyxlQUFBO0lBQUFBLGVBQUE7SUFBQUEsZUFBQTtJQUFBQSxlQUFBO0lBQUFBLGVBQUE7SUFDeEQsS0FBS0MsUUFBTCxHQUFnQkwsY0FBaEI7SUFDQSxLQUFLTSxPQUFMLEdBQWVMLFNBQWY7SUFHQSxLQUFLTSxHQUFMLEdBQVdYLFNBQUEsQ0FBQVksSUFBWDtJQUNBLEtBQUtDLEtBQUwsR0FBYWIsU0FBQSxDQUFBWSxJQUFiO0lBRUEsS0FBS0UsR0FBTCxHQUFXLElBQUFaLFVBQUEsQ0FBQWEsZUFBQSxFQUFtQixLQUFLTixRQUF4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