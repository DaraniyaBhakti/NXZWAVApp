68fe9a87e74c7169b02a6037a9ca81c8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dimension = void 0;
// Customizable Area Start
const react_native_1 = require("react-native");
const AppGlobals_1 = require("../../../components/src/AppGlobals");
const react_native_elements_1 = require("react-native-elements");
const BlockHelper_1 = require("../../../framework/src/BlockHelper");
exports.dimension = {
  commentUsername: 13,
  commentText: 13,
  bulletText: 8,
  defaultText: 13,
  chatSearchUserImage: 35
};
const globalStyles = react_native_1.StyleSheet.create({
  defaultButtonView: {
    backgroundColor: AppGlobals_1.COLORS.grey,
    height: react_native_elements_1.normalize(50),
    marginTop: react_native_elements_1.normalize(25),
    marginLeft: "10%",
    marginRight: "10%",
    borderRadius: react_native_elements_1.normalize(30),
    flexDirection: "row",
    alignContent: "center",
    alignItems: "center",
    justifyContent: "center"
  },
  defaultButtonViewRed: {
    backgroundColor: AppGlobals_1.COLORS.redActive
  },
  defaultButtonViewBlue: {
    backgroundColor: AppGlobals_1.COLORS.blue
  },
  buttonViewRed: {
    backgroundColor: AppGlobals_1.COLORS.redActive,
    width: "40%",
    marginLeft: "5%",
    marginRight: "4%"
  },
  buttonViewGrey: {
    backgroundColor: AppGlobals_1.COLORS.grey,
    width: "40%",
    marginLeft: "4%",
    marginRight: "8%"
  },
  buttonText: {
    fontSize: react_native_elements_1.normalize(18),
    color: AppGlobals_1.COLORS.textColor,
    textAlign: "center",
    fontFamily: AppGlobals_1.FONTS.bold
  },
  flex1: {
    flex: 1
  },
  flexDirectionColumn: {
    flexDirection: "column"
  },
  flexDirectionRow: {
    flexDirection: 'row'
  },
  labelText: {
    fontSize: react_native_elements_1.normalize(13),
    color: AppGlobals_1.COLORS.textColorOffWhite,
    textAlign: "center",
    fontFamily: AppGlobals_1.FONTS.bold
  },
  labelTextBlue: {
    color: AppGlobals_1.COLORS.textColorBlue
  },
  labelTextOffWhite: {
    color: AppGlobals_1.COLORS.textColorOffWhite
  },
  labelTextWhite: {
    color: AppGlobals_1.COLORS.textColor
  },
  labelTextMedium: {
    fontSize: react_native_elements_1.normalize(12),
    color: AppGlobals_1.COLORS.textColor,
    textAlign: "center",
    fontFamily: AppGlobals_1.FONTS.semiBold
  },
  labelTextSmall: {
    fontSize: react_native_elements_1.normalize(10),
    color: AppGlobals_1.COLORS.textColor,
    textAlign: "center",
    fontFamily: AppGlobals_1.FONTS.semiBold
  },
  viewWindow: {
    width: '100%',
    height: react_native_1.Dimensions.get('window').height,
    flex: 1,
    paddingTop: BlockHelper_1.StatusBarHeight,
    paddingBottom: react_native_elements_1.normalize(25),
    paddingLeft: react_native_elements_1.normalize(10),
    paddingRight: react_native_elements_1.normalize(10)
  },
  viewWindowNoHeight: {
    width: "100%",
    flex: 1,
    paddingTop: BlockHelper_1.StatusBarHeight
  },
  headerRow: {
    height: BlockHelper_1.StatusBarHeight,
    marginTop: react_native_elements_1.normalize(15)
  },
  headerTextView: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    paddingRight: react_native_elements_1.normalize(40),
    paddingLeft: react_native_elements_1.normalize(5)
  },
  headerText: {
    justifyContent: 'center',
    textAlign: 'center',
    fontSize: react_native_elements_1.normalize(13),
    color: AppGlobals_1.COLORS.textColor,
    fontFamily: AppGlobals_1.FONTS.bold
  },
  headerImage: {
    width: react_native_elements_1.normalize(30),
    height: react_native_elements_1.normalize(30),
    padding: react_native_elements_1.normalize(8)
  },
  apiMessage: {
    marginTop: react_native_elements_1.normalize(20),
    marginBottom: react_native_elements_1.normalize(10),
    fontSize: react_native_elements_1.normalize(16),
    textAlign: 'center',
    marginVertical: 8,
    color: AppGlobals_1.COLORS.textColorOffWhite,
    fontFamily: AppGlobals_1.FONTS.medium
  }
});
exports.default = globalStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,