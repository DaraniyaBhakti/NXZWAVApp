{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_extends2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","DeprecatedTextInputPropTypes","DocumentSelectionState","NativeMethodsMixin","Platform","React","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TouchableWithoutFeedback","UIManager","createReactClass","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","OS","onlyMultiline","onTextInput","children","emptyFunctionThatReturnsTrue","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","getDefaultProps","allowFontScaling","rejectResponderTermination","underlineColorAndroid","mixins","isFocused","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","_rafId","componentDidMount","props","value","tag","registerInput","autoFocus","requestAnimationFrame","focus","componentWillUnmount","remove","blur","unregisterInput","cancelAnimationFrame","clear","setNativeProps","text","render","textInput","getViewManagerConfig","_renderIOS","_renderIOSLegacy","_renderAndroid","createElement","Provider","_getText","defaultValue","_setNativeRef","ref","textContainer","style","selection","end","start","multiline","__DEV__","propKey","error","Error","stack","onFocus","_onFocus","onBlur","_onBlur","onChange","_onChange","onSelectionChange","_onSelectionChange","onSelectionChangeShouldSetResponder","childCount","Children","forEach","maxFontSizeMultiplier","inputView","unshift","styles","multilineInput","onContentSizeChange","_onTextInput","dataDetectorTypes","onScroll","_onScroll","onLayout","onPress","_onPress","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","accessibilityState","nativeID","testID","RCTTextInputView","autoCapitalize","mostRecentEventCount","disableFullscreenUI","textBreakStrategy","event","selectionState","editable","nativeEvent","eventCount","onChangeText","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","InternalTextInputType","_ReactNative$NativeCo","_super","key","NativeComponent","TypedTextInput","create","paddingTop","module","exports"],"sources":["TextInput.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst DeprecatedTextInputPropTypes = require('../../DeprecatedPropTypes/DeprecatedTextInputPropTypes');\nconst DocumentSelectionState = require('../../vendor/document/selection/DocumentSelectionState');\nconst NativeMethodsMixin = require('../../Renderer/shims/NativeMethodsMixin');\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst Text = require('../../Text/Text');\nconst TextAncestor = require('../../Text/TextAncestor');\nconst TextInputState = require('./TextInputState');\nconst TouchableWithoutFeedback = require('../Touchable/TouchableWithoutFeedback');\nconst UIManager = require('../../ReactNative/UIManager');\n\nconst createReactClass = require('create-react-class');\nconst invariant = require('invariant');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {TextStyleProp, ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {SyntheticEvent, ScrollEvent} from '../../Types/CoreEventTypes';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nexport type ChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type TextInputEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    previousText: string,\n    range: $ReadOnly<{|\n      start: number,\n      end: number,\n    |}>,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type ContentSizeChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n    contentSize: $ReadOnly<{|\n      width: number,\n      height: number,\n    |}>,\n  |}>,\n>;\n\ntype TargetEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n  |}>,\n>;\n\nexport type BlurEvent = TargetEvent;\nexport type FocusEvent = TargetEvent;\n\ntype Selection = $ReadOnly<{|\n  start: number,\n  end: number,\n|}>;\n\nexport type SelectionChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    selection: Selection,\n    target: number,\n  |}>,\n>;\n\nexport type KeyPressEvent = SyntheticEvent<\n  $ReadOnly<{|\n    key: string,\n    target?: ?number,\n    eventCount?: ?number,\n  |}>,\n>;\n\nexport type EditingEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    text: string,\n    target: number,\n  |}>,\n>;\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\nexport type TextContentType =\n  | 'none'\n  | 'URL'\n  | 'addressCity'\n  | 'addressCityAndState'\n  | 'addressState'\n  | 'countryName'\n  | 'creditCardNumber'\n  | 'emailAddress'\n  | 'familyName'\n  | 'fullStreetAddress'\n  | 'givenName'\n  | 'jobTitle'\n  | 'location'\n  | 'middleName'\n  | 'name'\n  | 'namePrefix'\n  | 'nameSuffix'\n  | 'nickname'\n  | 'organizationName'\n  | 'postalCode'\n  | 'streetAddressLine1'\n  | 'streetAddressLine2'\n  | 'sublocality'\n  | 'telephoneNumber'\n  | 'username'\n  | 'password'\n  | 'newPassword'\n  | 'oneTimeCode';\n\ntype PasswordRules = string;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If `false`, disables spell-check style (i.e. red underlines).\n   * The default value is inherited from `autoCorrect`.\n   * @platform ios\n   */\n  spellCheck?: ?boolean,\n\n  /**\n   * Determines the color of the keyboard.\n   * @platform ios\n   */\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n\n  /**\n   * If `true`, the keyboard disables the return key when there is no text and\n   * automatically enables it when there is text. The default value is `false`.\n   * @platform ios\n   */\n  enablesReturnKeyAutomatically?: ?boolean,\n\n  /**\n   * An instance of `DocumentSelectionState`, this is some state that is responsible for\n   * maintaining selection information for a document.\n   *\n   * Some functionality that can be performed with this instance is:\n   *\n   * - `blur()`\n   * - `focus()`\n   * - `update()`\n   *\n   * > You can reference `DocumentSelectionState` in\n   * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n   *\n   * @platform ios\n   */\n  selectionState?: ?DocumentSelectionState,\n\n  /**\n   * When the clear button should appear on the right side of the text view.\n   * This property is supported only for single-line TextInput component.\n   * @platform ios\n   */\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n\n  /**\n   * If `true`, clears the text field automatically when editing begins.\n   * @platform ios\n   */\n  clearTextOnFocus?: ?boolean,\n\n  /**\n   * Determines the types of data converted to clickable URLs in the text input.\n   * Only valid if `multiline={true}` and `editable={false}`.\n   * By default no data types are detected.\n   *\n   * You can provide one type or an array of many types.\n   *\n   * Possible values for `dataDetectorTypes` are:\n   *\n   * - `'phoneNumber'`\n   * - `'link'`\n   * - `'address'`\n   * - `'calendarEvent'`\n   * - `'none'`\n   * - `'all'`\n   *\n   * @platform ios\n   */\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n\n  /**\n   * An optional identifier which links a custom InputAccessoryView to\n   * this text input. The InputAccessoryView is rendered above the\n   * keyboard when this text input is focused.\n   * @platform ios\n   */\n  inputAccessoryViewID?: ?string,\n\n  /**\n   * Give the keyboard and the system information about the\n   * expected semantic meaning for the content that users enter.\n   * @platform ios\n   */\n  textContentType?: ?TextContentType,\n\n  PasswordRules?: ?PasswordRules,\n\n  /**\n   * If `false`, scrolling of the text view will be disabled.\n   * The default value is `true`. Does only work with 'multiline={true}'.\n   * @platform ios\n   */\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Determines which content to suggest on auto complete, e.g.`username`.\n   * To disable auto complete, use `off`.\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `username`\n   * - `password`\n   * - `email`\n   * - `name`\n   * - `tel`\n   * - `street-address`\n   * - `postal-code`\n   * - `cc-number`\n   * - `cc-csc`\n   * - `cc-exp`\n   * - `cc-exp-month`\n   * - `cc-exp-year`\n   * - `off`\n   *\n   * @platform android\n   */\n  autoCompleteType?: ?(\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'email'\n    | 'name'\n    | 'password'\n    | 'postal-code'\n    | 'street-address'\n    | 'tel'\n    | 'username'\n    | 'off'\n  ),\n\n  /**\n   * Sets the return key to the label. Use it instead of `returnKeyType`.\n   * @platform android\n   */\n  returnKeyLabel?: ?string,\n\n  /**\n   * Sets the number of lines for a `TextInput`. Use it with multiline set to\n   * `true` to be able to fill the lines.\n   * @platform android\n   */\n  numberOfLines?: ?number,\n\n  /**\n   * When `false`, if there is a small amount of space available around a text input\n   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n   * the text inside of a full screen text input mode. When `true`, this feature is\n   * disabled and users will always edit the text directly inside of the text input.\n   * Defaults to `false`.\n   * @platform android\n   */\n  disableFullscreenUI?: ?boolean,\n\n  /**\n   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n   * The default value is `simple`.\n   * @platform android\n   */\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n\n  /**\n   * The color of the `TextInput` underline.\n   * @platform android\n   */\n  underlineColorAndroid?: ?ColorValue,\n\n  /**\n   * If defined, the provided image resource will be rendered on the left.\n   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n   * like\n   * ```\n   * <TextInput\n   *  inlineImageLeft='search_icon'\n   * />\n   * ```\n   * @platform android\n   */\n  inlineImageLeft?: ?string,\n\n  /**\n   * Padding between the inline image, if any, and the text input itself.\n   * @platform android\n   */\n  inlineImagePadding?: ?number,\n\n  importantForAutofill?: ?(\n    | 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n  ),\n\n  /**\n   * When `false`, it will prevent the soft keyboard from showing when the field is focused.\n   * Defaults to `true`.\n   * @platform android\n   */\n  showSoftInputOnFocus?: ?boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Can tell `TextInput` to automatically capitalize certain characters.\n   *\n   * - `characters`: all characters.\n   * - `words`: first letter of each word.\n   * - `sentences`: first letter of each sentence (*default*).\n   * - `none`: don't auto capitalize anything.\n   */\n  autoCapitalize?: ?AutoCapitalize,\n\n  /**\n   * If `false`, disables auto-correct. The default value is `true`.\n   */\n  autoCorrect?: ?boolean,\n\n  /**\n   * If `true`, focuses the input on `componentDidMount`.\n   * The default value is `false`.\n   */\n  autoFocus?: ?boolean,\n\n  /**\n   * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n   * default is `true`.\n   */\n  allowFontScaling?: ?boolean,\n\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier?: ?number,\n\n  /**\n   * If `false`, text is not editable. The default value is `true`.\n   */\n  editable?: ?boolean,\n\n  /**\n   * Determines which keyboard to open, e.g.`numeric`.\n   *\n   * The following values work across platforms:\n   *\n   * - `default`\n   * - `numeric`\n   * - `number-pad`\n   * - `decimal-pad`\n   * - `email-address`\n   * - `phone-pad`\n   *\n   * *iOS Only*\n   *\n   * The following values work on iOS only:\n   *\n   * - `ascii-capable`\n   * - `numbers-and-punctuation`\n   * - `url`\n   * - `name-phone-pad`\n   * - `twitter`\n   * - `web-search`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `visible-password`\n   */\n  keyboardType?: ?KeyboardType,\n\n  /**\n   * Determines how the return key should look. On Android you can also use\n   * `returnKeyLabel`.\n   *\n   * *Cross platform*\n   *\n   * The following values work across platforms:\n   *\n   * - `done`\n   * - `go`\n   * - `next`\n   * - `search`\n   * - `send`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `none`\n   * - `previous`\n   *\n   * *iOS Only*\n   *\n   * The following values work on iOS only:\n   *\n   * - `default`\n   * - `emergency-call`\n   * - `google`\n   * - `join`\n   * - `route`\n   * - `yahoo`\n   */\n  returnKeyType?: ?ReturnKeyType,\n\n  /**\n   * Limits the maximum number of characters that can be entered. Use this\n   * instead of implementing the logic in JS to avoid flicker.\n   */\n  maxLength?: ?number,\n\n  /**\n   * If `true`, the text input can be multiple lines.\n   * The default value is `false`.\n   */\n  multiline?: ?boolean,\n\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: ?(e: BlurEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: ?(e: FocusEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChange?: ?(e: ChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: ?(text: string) => mixed,\n\n  /**\n   * Callback that is called when the text input's content size changes.\n   * This will be called with\n   * `{ nativeEvent: { contentSize: { width, height } } }`.\n   *\n   * Only called for multiline text inputs.\n   */\n  onContentSizeChange?: ?(e: ContentSizeChangeEvent) => mixed,\n\n  onTextInput?: ?(e: TextInputEvent) => mixed,\n\n  /**\n   * Callback that is called when text input ends.\n   */\n  onEndEditing?: ?(e: EditingEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input selection is changed.\n   * This will be called with\n   * `{ nativeEvent: { selection: { start, end } } }`.\n   */\n  onSelectionChange?: ?(e: SelectionChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's submit button is pressed.\n   * Invalid if `multiline={true}` is specified.\n   */\n  onSubmitEditing?: ?(e: EditingEvent) => mixed,\n\n  /**\n   * Callback that is called when a key is pressed.\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n   * the typed-in character otherwise including `' '` for space.\n   * Fires before `onChange` callbacks.\n   */\n  onKeyPress?: ?(e: KeyPressEvent) => mixed,\n\n  /**\n   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n   * May also contain other properties from ScrollEvent but on Android contentSize\n   * is not provided for performance reasons.\n   */\n  onScroll?: ?(e: ScrollEvent) => mixed,\n\n  /**\n   * The string that will be rendered before text input has been entered.\n   */\n  placeholder?: ?Stringish,\n\n  /**\n   * The text color of the placeholder string.\n   */\n  placeholderTextColor?: ?ColorValue,\n\n  /**\n   * If `true`, the text input obscures the text entered so that sensitive text\n   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n   */\n  secureTextEntry?: ?boolean,\n\n  /**\n   * The highlight and cursor color of the text input.\n   */\n  selectionColor?: ?ColorValue,\n\n  /**\n   * The start and end of the text input's selection. Set start and end to\n   * the same value to position the cursor.\n   */\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n\n  /**\n   * The value to show for the text input. `TextInput` is a controlled\n   * component, which means the native value will be forced to match this\n   * value prop if provided. For most uses, this works great, but in some\n   * cases this may cause flickering - one common cause is preventing edits\n   * by keeping value the same. In addition to simply setting the same value,\n   * either set `editable={false}`, or set/update `maxLength` to prevent\n   * unwanted edits without flicker.\n   */\n  value?: ?Stringish,\n\n  /**\n   * Provides an initial value that will change when the user starts typing.\n   * Useful for simple use-cases where you do not want to deal with listening\n   * to events and updating the value prop to keep the controlled state in sync.\n   */\n  defaultValue?: ?Stringish,\n\n  /**\n   * If `true`, all text will automatically be selected on focus.\n   */\n  selectTextOnFocus?: ?boolean,\n\n  /**\n   * If `true`, the text field will blur when submitted.\n   * The default value is true for single-line fields and false for\n   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n   * to `true` means that pressing return will blur the field and trigger the\n   * `onSubmitEditing` event instead of inserting a newline into the field.\n   */\n  blurOnSubmit?: ?boolean,\n\n  /**\n   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n   *\n   * - `borderLeftWidth`\n   * - `borderTopWidth`\n   * - `borderRightWidth`\n   * - `borderBottomWidth`\n   * - `borderTopLeftRadius`\n   * - `borderTopRightRadius`\n   * - `borderBottomRightRadius`\n   * - `borderBottomLeftRadius`\n   *\n   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n   * for more detail.\n   *\n   * [Styles](docs/style.html)\n   */\n  style?: ?TextStyleProp,\n\n  /**\n   * If `true`, caret is hidden. The default value is `false`.\n   * This property is supported only for single-line TextInput component on iOS.\n   */\n  caretHidden?: ?boolean,\n\n  /*\n   * If `true`, contextMenuHidden is hidden. The default value is `false`.\n   */\n  contextMenuHidden?: ?boolean,\n|}>;\n\nconst emptyFunctionThatReturnsTrue = () => true;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: DeprecatedTextInputPropTypes,\n  getDefaultProps() {\n    return {\n      allowFontScaling: true,\n      rejectResponderTermination: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n  _rafId: (null: ?AnimationFrameID),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.props.autoFocus) {\n      this._rafId = requestAnimationFrame(this.focus);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n    if (this._rafId != null) {\n      cancelAnimationFrame(this._rafId);\n    }\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.getViewManagerConfig('RCTVirtualText')\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n      ? this.props.defaultValue\n      : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text\n            style={props.style}\n            allowFontScaling={props.allowFontScaling}\n            maxFontSizeMultiplier={props.maxFontSizeMultiplier}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        accessibilityState={props.accessibilityState}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={props.rejectResponderTermination}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        accessibilityState={props.accessibilityState}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize = props.autoCapitalize || 'sentences';\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        accessibilityState={this.props.accessibilityState}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: FocusEvent) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: PressEvent) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: ChangeEvent) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef && this._inputRef.setNativeProps) {\n      ReactNative.setNativeProps(this._inputRef, {\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: SelectionChangeEvent) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (\n      Object.keys(nativeProps).length > 0 &&\n      this._inputRef &&\n      this._inputRef.setNativeProps\n    ) {\n      ReactNative.setNativeProps(this._inputRef, nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: BlurEvent) {\n    // This is a hack to fix https://fburl.com/toehyir8\n    // @todo(rsnara) Figure out why this is necessary.\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: TextInputEvent) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: ScrollEvent) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"],"mappings":"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"}