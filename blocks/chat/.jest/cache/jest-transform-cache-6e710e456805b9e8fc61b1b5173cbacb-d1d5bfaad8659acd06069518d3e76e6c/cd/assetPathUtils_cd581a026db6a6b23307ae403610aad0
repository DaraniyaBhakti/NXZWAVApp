7801d2076186a5cb74f796008db9727b
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};
function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }
  throw new Error('no such scale ' + scale.toString());
}
var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);
function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }
  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}
function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}
function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }
  return basePath;
}
module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmRyb2lkU2NhbGVTdWZmaXgiLCJnZXRBbmRyb2lkQXNzZXRTdWZmaXgiLCJzY2FsZSIsInRvU3RyaW5nIiwiRXJyb3IiLCJkcmF3YWJsZUZpbGVUeXBlcyIsIlNldCIsImdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUiLCJhc3NldCIsImhhcyIsInR5cGUiLCJzdWZmaXgiLCJKU09OIiwic3RyaW5naWZ5IiwiYW5kcm9pZEZvbGRlciIsImdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIiLCJmb2xkZXJQYXRoIiwiZ2V0QmFzZVBhdGgiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiYmFzZVBhdGgiLCJodHRwU2VydmVyTG9jYXRpb24iLCJzdWJzdHIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiYXNzZXRQYXRoVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtQYWNrYWdlckFzc2V0fSBmcm9tICcuL0Fzc2V0UmVnaXN0cnknO1xuXG5jb25zdCBhbmRyb2lkU2NhbGVTdWZmaXggPSB7XG4gICcwLjc1JzogJ2xkcGknLFxuICAnMSc6ICdtZHBpJyxcbiAgJzEuNSc6ICdoZHBpJyxcbiAgJzInOiAneGhkcGknLFxuICAnMyc6ICd4eGhkcGknLFxuICAnNCc6ICd4eHhoZHBpJyxcbn07XG5cbi8qKlxuICogRklYTUU6IHVzaW5nIG51bWJlciB0byByZXByZXNlbnQgZGlzY3JldGUgc2NhbGUgbnVtYmVycyBpcyBmcmFnaWxlIGluIGVzc2VuY2UgYmVjYXVzZSBvZlxuICogZmxvYXRpbmcgcG9pbnQgbnVtYmVycyBpbXByZWNpc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoc2NhbGUudG9TdHJpbmcoKSBpbiBhbmRyb2lkU2NhbGVTdWZmaXgpIHtcbiAgICByZXR1cm4gYW5kcm9pZFNjYWxlU3VmZml4W3NjYWxlLnRvU3RyaW5nKCldO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdubyBzdWNoIHNjYWxlICcgKyBzY2FsZS50b1N0cmluZygpKTtcbn1cblxuLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL2d1aWRlL3RvcGljcy9yZXNvdXJjZXMvZHJhd2FibGUtcmVzb3VyY2UuaHRtbFxuY29uc3QgZHJhd2FibGVGaWxlVHlwZXMgPSBuZXcgU2V0KFtcbiAgJ2dpZicsXG4gICdqcGVnJyxcbiAgJ2pwZycsXG4gICdwbmcnLFxuICAnc3ZnJyxcbiAgJ3dlYnAnLFxuICAneG1sJyxcbl0pO1xuXG5mdW5jdGlvbiBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lKFxuICBhc3NldDogUGFja2FnZXJBc3NldCxcbiAgc2NhbGU6IG51bWJlcixcbik6IHN0cmluZyB8ICRURU1QT1JBUlkkc3RyaW5nPCdyYXcnPiB7XG4gIGlmICghZHJhd2FibGVGaWxlVHlwZXMuaGFzKGFzc2V0LnR5cGUpKSB7XG4gICAgcmV0dXJuICdyYXcnO1xuICB9XG4gIHZhciBzdWZmaXggPSBnZXRBbmRyb2lkQXNzZXRTdWZmaXgoc2NhbGUpO1xuICBpZiAoIXN1ZmZpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiRG9uJ3Qga25vdyB3aGljaCBhbmRyb2lkIGRyYXdhYmxlIHN1ZmZpeCB0byB1c2UgZm9yIHNjYWxlOiBcIiArXG4gICAgICAgIHNjYWxlICtcbiAgICAgICAgJ1xcbkFzc2V0OiAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXNzZXQsIG51bGwsICdcXHQnKSArXG4gICAgICAgICdcXG5Qb3NzaWJsZSBzY2FsZXMgYXJlOicgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShhbmRyb2lkU2NhbGVTdWZmaXgsIG51bGwsICdcXHQnKSxcbiAgICApO1xuICB9XG4gIGNvbnN0IGFuZHJvaWRGb2xkZXIgPSAnZHJhd2FibGUtJyArIHN1ZmZpeDtcbiAgcmV0dXJuIGFuZHJvaWRGb2xkZXI7XG59XG5cbmZ1bmN0aW9uIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICB2YXIgZm9sZGVyUGF0aCA9IGdldEJhc2VQYXRoKGFzc2V0KTtcbiAgcmV0dXJuIChmb2xkZXJQYXRoICsgJy8nICsgYXNzZXQubmFtZSlcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKSAvLyBFbmNvZGUgZm9sZGVyIHN0cnVjdHVyZSBpbiBmaWxlIG5hbWVcbiAgICAucmVwbGFjZSgvKFteYS16MC05X10pL2csICcnKSAvLyBSZW1vdmUgaWxsZWdhbCBjaGFyc1xuICAgIC5yZXBsYWNlKC9eYXNzZXRzXy8sICcnKTsgLy8gUmVtb3ZlIFwiYXNzZXRzX1wiIHByZWZpeFxufVxuXG5mdW5jdGlvbiBnZXRCYXNlUGF0aChhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIHZhciBiYXNlUGF0aCA9IGFzc2V0Lmh0dHBTZXJ2ZXJMb2NhdGlvbjtcbiAgaWYgKGJhc2VQYXRoWzBdID09PSAnLycpIHtcbiAgICBiYXNlUGF0aCA9IGJhc2VQYXRoLnN1YnN0cigxKTtcbiAgfVxuICByZXR1cm4gYmFzZVBhdGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBbmRyb2lkQXNzZXRTdWZmaXg6IGdldEFuZHJvaWRBc3NldFN1ZmZpeCxcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZTogZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcjogZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGg6IGdldEJhc2VQYXRoLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFJWixJQUFNQSxrQkFBa0IsR0FBRztFQUN6QixNQUFNLEVBQUUsTUFBTTtFQUNkLEdBQUcsRUFBRSxNQUFNO0VBQ1gsS0FBSyxFQUFFLE1BQU07RUFDYixHQUFHLEVBQUUsT0FBTztFQUNaLEdBQUcsRUFBRSxRQUFRO0VBQ2IsR0FBRyxFQUFFO0FBQ1AsQ0FBQztBQU1ELFNBQVNDLHFCQUFxQkEsQ0FBQ0MsS0FBYSxFQUFVO0VBQ3BELElBQUlBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsSUFBSUgsa0JBQWtCLEVBQUU7SUFDMUMsT0FBT0Esa0JBQWtCLENBQUNFLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztFQUM3QztFQUVBLE1BQU0sSUFBSUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHRixLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDdEQ7QUFHQSxJQUFNRSxpQkFBaUIsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FDaEMsS0FBSyxFQUNMLE1BQU0sRUFDTixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxNQUFNLEVBQ04sS0FBSyxDQUNOLENBQUM7QUFFRixTQUFTQyw0QkFBNEJBLENBQ25DQyxLQUFvQixFQUNwQk4sS0FBYSxFQUNzQjtFQUNuQyxJQUFJLENBQUNHLGlCQUFpQixDQUFDSSxHQUFHLENBQUNELEtBQUssQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7SUFDdEMsT0FBTyxLQUFLO0VBQ2Q7RUFDQSxJQUFJQyxNQUFNLEdBQUdWLHFCQUFxQixDQUFDQyxLQUFLLENBQUM7RUFDekMsSUFBSSxDQUFDUyxNQUFNLEVBQUU7SUFDWCxNQUFNLElBQUlQLEtBQUssQ0FDYiw2REFBNkQsR0FDM0RGLEtBQUssR0FDTCxXQUFXLEdBQ1hVLElBQUksQ0FBQ0MsU0FBUyxDQUFDTCxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUNqQyx3QkFBd0IsR0FDeEJJLElBQUksQ0FBQ0MsU0FBUyxDQUFDYixrQkFBa0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUNqRCxDQUFDO0VBQ0g7RUFDQSxJQUFNYyxhQUFhLEdBQUcsV0FBVyxHQUFHSCxNQUFNO0VBQzFDLE9BQU9HLGFBQWE7QUFDdEI7QUFFQSxTQUFTQyw0QkFBNEJBLENBQUNQLEtBQW9CLEVBQVU7RUFDbEUsSUFBSVEsVUFBVSxHQUFHQyxXQUFXLENBQUNULEtBQUssQ0FBQztFQUNuQyxPQUFPLENBQUNRLFVBQVUsR0FBRyxHQUFHLEdBQUdSLEtBQUssQ0FBQ1UsSUFBSSxFQUNsQ0MsV0FBVyxDQUFDLENBQUMsQ0FDYkMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FDbkJBLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQzVCQSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztBQUM1QjtBQUVBLFNBQVNILFdBQVdBLENBQUNULEtBQW9CLEVBQVU7RUFDakQsSUFBSWEsUUFBUSxHQUFHYixLQUFLLENBQUNjLGtCQUFrQjtFQUN2QyxJQUFJRCxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0lBQ3ZCQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUMvQjtFQUNBLE9BQU9GLFFBQVE7QUFDakI7QUFFQUcsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZnhCLHFCQUFxQixFQUFFQSxxQkFBcUI7RUFDNUNNLDRCQUE0QixFQUFFQSw0QkFBNEI7RUFDMURRLDRCQUE0QixFQUFFQSw0QkFBNEI7RUFDMURFLFdBQVcsRUFBRUE7QUFDZixDQUFDIn0=