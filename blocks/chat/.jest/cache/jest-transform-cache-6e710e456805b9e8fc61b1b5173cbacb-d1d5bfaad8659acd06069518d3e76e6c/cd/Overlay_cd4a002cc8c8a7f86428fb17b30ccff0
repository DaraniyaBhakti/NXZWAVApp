5b39ec3952722901b50a0041c3652b79
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Overlay = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _excluded = ["children", "isVisible", "containerStyle", "overlayStyle", "windowBackgroundColor", "overlayBackgroundColor", "onBackdropPress", "borderRadius", "width", "height", "fullScreen"];
var Overlay = function Overlay(props) {
  var children = props.children,
    isVisible = props.isVisible,
    containerStyle = props.containerStyle,
    overlayStyle = props.overlayStyle,
    windowBackgroundColor = props.windowBackgroundColor,
    overlayBackgroundColor = props.overlayBackgroundColor,
    onBackdropPress = props.onBackdropPress,
    borderRadius = props.borderRadius,
    width = props.width,
    height = props.height,
    fullScreen = props.fullScreen,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  return _react.default.createElement(_reactNative.Modal, (0, _extends2.default)({
    visible: isVisible,
    onRequestClose: onBackdropPress,
    transparent: true
  }, rest), _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: onBackdropPress,
    testID: "RNE__Overlay__backdrop"
  }, _react.default.createElement(_reactNative.View, {
    testID: "overlayContainer",
    style: _reactNative.StyleSheet.flatten([styles.backdrop, {
      backgroundColor: windowBackgroundColor
    }, containerStyle])
  })), _react.default.createElement(_reactNative.View, {
    style: styles.container,
    pointerEvents: "box-none"
  }, _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.overlay, {
      borderRadius: borderRadius,
      backgroundColor: overlayBackgroundColor,
      width: width,
      height: height
    }, fullScreen && styles.fullscreen, overlayStyle])
  }, children)));
};
exports.Overlay = Overlay;
Overlay.propTypes = {
  children: _propTypes.default.element.isRequired,
  isVisible: _propTypes.default.bool.isRequired,
  containerStyle: _config.ViewPropTypes.style,
  overlayStyle: _config.ViewPropTypes.style,
  windowBackgroundColor: _propTypes.default.string,
  overlayBackgroundColor: _propTypes.default.string,
  onBackdropPress: _propTypes.default.func,
  borderRadius: _propTypes.default.number,
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  fullScreen: _propTypes.default.bool
};
Overlay.defaultProps = {
  borderRadius: 3,
  fullScreen: false,
  windowBackgroundColor: 'rgba(0, 0, 0, .4)',
  overlayBackgroundColor: 'white',
  width: _helpers.ScreenWidth - 80,
  height: _helpers.ScreenHeight - 180,
  onBackdropPress: function onBackdropPress() {
    return null;
  }
};
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center'
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  fullscreen: {
    width: '100%',
    height: '100%'
  },
  overlay: (0, _extends2.default)({
    borderRadius: 5,
    padding: 10
  }, _reactNative.Platform.select({
    android: {
      elevation: 2
    },
    default: {
      shadowColor: 'rgba(0, 0, 0, .3)',
      shadowOffset: {
        width: 0,
        height: 1
      },
      shadowRadius: 4
    }
  }))
});
var _default = (0, _config.withTheme)(Overlay, 'Overlay');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,