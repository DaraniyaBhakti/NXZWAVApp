f4d691d08b14a589f01079d9294fd79e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var DEFAULT_PREVIEW_OPEN_DELAY = 700;
var PREVIEW_CLOSE_DELAY = 300;
var MAX_VELOCITY_CONTRIBUTION = 5;
var SCROLL_LOCK_MILLISECONDS = 300;
var SwipeRow = function (_Component) {
  (0, _inherits2.default)(SwipeRow, _Component);
  var _super = _createSuper(SwipeRow);
  function SwipeRow(props) {
    var _this;
    (0, _classCallCheck2.default)(this, SwipeRow);
    _this = _super.call(this, props);
    _this.ensureScrollEnabled = function () {
      if (!_this.parentScrollEnabled) {
        _this.parentScrollEnabled = true;
        _this.props.setScrollEnabled && _this.props.setScrollEnabled(true);
      }
    };
    _this.combinedOnPress = function () {
      var onPress = _this.props.children[1].props.onPress;
      _this.onRowPress();
      onPress && onPress.apply(void 0, arguments);
    };
    _this.isOpen = false;
    _this.leftActionActivated = false;
    _this.rightActionActivated = false;
    _this.previousTrackedTranslateX = 0;
    _this.currentTranslateX = 0;
    _this.previousTrackedDirection = null;
    _this.horizontalSwipeGestureBegan = false;
    _this.swipeInitialX = null;
    _this.parentScrollEnabled = true;
    _this.ranPreview = false;
    _this._ensureScrollEnabledTimer = null;
    _this.isForceClosing = false;
    _this.state = {
      leftActionActivated: false,
      rightActionActivated: false,
      leftActionState: _this.props.initialLeftActionState || false,
      rightActionState: _this.props.initialRightActionState || false,
      previewRepeatInterval: null,
      timeBetweenPreviewRepeats: null,
      dimensionsSet: false,
      hiddenHeight: _this.props.disableHiddenLayoutCalculation ? '100%' : 0,
      hiddenWidth: _this.props.disableHiddenLayoutCalculation ? '100%' : 0
    };
    _this._translateX = new _reactNative.Animated.Value(0);
    _this._panResponder = _reactNative.PanResponder.create({
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {
        return _this.handleOnMoveShouldSetPanResponder(e, gs);
      },
      onPanResponderMove: function onPanResponderMove(e, gs) {
        return _this.handlePanResponderMove(e, gs);
      },
      onPanResponderRelease: function onPanResponderRelease(e, gs) {
        return _this.handlePanResponderRelease(e, gs);
      },
      onPanResponderTerminate: function onPanResponderTerminate(e, gs) {
        return _this.handlePanResponderEnd(e, gs);
      },
      onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {
        return false;
      }
    });
    _this._translateX.addListener(function (_ref) {
      var value = _ref.value;
      _this.currentTranslateX = value;
      if (_this.props.onSwipeValueChange) {
        var direction = _this.previousTrackedDirection;
        if (value !== _this.previousTrackedTranslateX && Math.abs(value - _this.previousTrackedTranslateX) > 0.5) {
          direction = value > _this.previousTrackedTranslateX ? 'right' : 'left';
        }
        _this.props.onSwipeValueChange && _this.props.onSwipeValueChange({
          isOpen: _this.isOpen,
          direction: direction,
          value: value,
          key: _this.props.swipeKey
        });
        _this.previousTrackedTranslateX = value;
        _this.previousTrackedDirection = direction;
      }
    });
    if (_this.props.forceCloseToRightThreshold && _this.props.forceCloseToRightThreshold > 0) {
      _this._translateX.addListener(function (_ref2) {
        var value = _ref2.value;
        if (!_this.isForceClosing && _reactNative.Dimensions.get('window').width + value < _this.props.forceCloseToRightThreshold) {
          _this.isForceClosing = true;
          _this.forceCloseRow('right');
          if (_this.props.onForceCloseToRight) {
            _this.props.onForceCloseToRight();
          }
        }
      });
    }
    if (_this.props.forceCloseToLeftThreshold && _this.props.forceCloseToRightThreshold > 0) {
      _this._translateX.addListener(function (_ref3) {
        var value = _ref3.value;
        if (!_this.isForceClosing && _reactNative.Dimensions.get('window').width - value < _this.props.forceCloseToLeftThreshold) {
          _this.isForceClosing = true;
          _this.forceCloseRow('left');
          if (_this.props.onForceCloseToLeft) {
            _this.props.onForceCloseToLeft();
          }
        }
      });
    }
    if (_this.props.onLeftActionStatusChange && _this.props.leftActivationValue && _this.props.leftActivationValue > 0) {
      _this._translateX.addListener(function (_ref4) {
        var value = _ref4.value;
        var absValue = Math.abs(value);
        var isActivated = absValue > _this.props.leftActivationValue;
        if (_this.leftActionActivated !== isActivated && value > 0) {
          _this.props.onLeftActionStatusChange({
            isActivated: isActivated,
            value: value,
            key: _this.props.swipeKey
          });
          _this.leftActionActivated = isActivated;
          _this.setState({
            leftActionActivated: isActivated
          });
        }
      });
    }
    if (_this.props.onRightActionStatusChange && _this.props.rightActivationValue && _this.props.rightActivationValue < 0) {
      _this._translateX.addListener(function (_ref5) {
        var value = _ref5.value;
        var absValue = Math.abs(value);
        var isActivated = absValue > Math.abs(_this.props.rightActivationValue);
        if (_this.rightActionActivated !== isActivated && value < 0) {
          _this.props.onRightActionStatusChange({
            isActivated: isActivated,
            value: value,
            key: _this.props.swipeKey
          });
          _this.rightActionActivated = isActivated;
          _this.setState({
            rightActionActivated: isActivated
          });
        }
      });
    }
    return _this;
  }
  (0, _createClass2.default)(SwipeRow, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this._ensureScrollEnabledTimer);
      this._translateX.removeAllListeners();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (this.state.hiddenHeight !== nextState.hiddenHeight || this.state.hiddenWidth !== nextState.hiddenWidth || this.state.leftActionActivated !== nextState.leftActionActivated || this.state.rightActionActivated !== nextState.rightActionActivated || this.state.leftActionState !== nextState.leftActionState || this.state.rightActionState !== nextState.rightActionState || !this.props.shouldItemUpdate || this.props.shouldItemUpdate && this.props.shouldItemUpdate(this.props.item, nextProps.item)) {
        return true;
      }
      return false;
    }
  }, {
    key: "getPreviewAnimation",
    value: function getPreviewAnimation(toValue, delay) {
      return _reactNative.Animated.timing(this._translateX, {
        duration: this.props.previewDuration,
        toValue: toValue,
        delay: delay,
        useNativeDriver: this.props.useNativeDriver
      });
    }
  }, {
    key: "onContentLayout",
    value: function onContentLayout(e) {
      var _this2 = this;
      this.setState((0, _extends2.default)({
        dimensionsSet: !this.props.recalculateHiddenLayout
      }, !this.props.disableHiddenLayoutCalculation ? {
        hiddenHeight: e.nativeEvent.layout.height,
        hiddenWidth: e.nativeEvent.layout.width
      } : {}));
      if (this.props.preview && !this.ranPreview) {
        this.ranPreview = true;
        this.doFullAnimation();
        if (this.props.previewRepeat) {
          this.setState({
            previewRepeatInterval: setInterval(function () {
              _this2.doFullAnimation();
            }, this.state.timeBetweenPreviewRepeats)
          });
        }
      }
    }
  }, {
    key: "doFullAnimation",
    value: function doFullAnimation() {
      var _this3 = this;
      var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;
      return this.getPreviewAnimation(previewOpenValue, this.props.previewOpenDelay).start(function () {
        _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start(function () {
          _this3.props.onPreviewEnd && _this3.props.onPreviewEnd();
        });
      });
    }
  }, {
    key: "onRowPress",
    value: function onRowPress() {
      if (this.props.onRowPress) {
        this.props.onRowPress();
      } else {
        if (this.props.closeOnRowPress) {
          this.closeRow();
        }
      }
    }
  }, {
    key: "handleOnMoveShouldSetPanResponder",
    value: function handleOnMoveShouldSetPanResponder(e, gs) {
      var dx = gs.dx;
      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;
    }
  }, {
    key: "handlePanResponderMove",
    value: function handlePanResponderMove(e, gestureState) {
      if (this.isForceClosing) {
        return;
      }
      var dx = gestureState.dx,
        dy = gestureState.dy;
      var absDx = Math.abs(dx);
      var absDy = Math.abs(dy);
      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {
        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {
          return;
        }
        if (this.parentScrollEnabled) {
          this.parentScrollEnabled = false;
          this.props.setScrollEnabled && this.props.setScrollEnabled(false);
        }
        if (this.swipeInitialX === null) {
          this.swipeInitialX = this.currentTranslateX;
        }
        if (!this.horizontalSwipeGestureBegan) {
          this.horizontalSwipeGestureBegan = true;
          this.props.swipeGestureBegan && this.props.swipeGestureBegan();
        }
        var newDX = this.swipeInitialX + dx;
        if (this.props.disableLeftSwipe && newDX < 0) {
          newDX = 0;
        }
        if (this.props.disableRightSwipe && newDX > 0) {
          newDX = 0;
        }
        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {
          newDX = this.props.stopLeftSwipe;
        }
        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {
          newDX = this.props.stopRightSwipe;
        }
        this._translateX.setValue(newDX);
      }
    }
  }, {
    key: "handlePanResponderRelease",
    value: function handlePanResponderRelease(e, gestureState) {
      this.props.swipeGestureEnded && this.props.swipeGestureEnded(this.props.swipeKey, {
        translateX: this.currentTranslateX,
        direction: this.previousTrackedDirection,
        event: e,
        gestureState: gestureState
      });
      if (!e.defaultPrevented) {
        this.handlePanResponderEnd(e, gestureState);
      }
    }
  }, {
    key: "handlePanResponderEnd",
    value: function handlePanResponderEnd(e, gestureState) {
      var _this4 = this;
      if (this.isForceClosing) {
        setTimeout(function () {
          _this4.isForceClosing = false;
        }, 500);
      }
      var swipeToOpenVelocityContribution = this.props.swipeToOpenVelocityContribution;
      var possibleExtraPixels = this.props.rightOpenValue * swipeToOpenVelocityContribution;
      var clampedVelocity = Math.min(gestureState.vx, MAX_VELOCITY_CONTRIBUTION);
      var projectedExtraPixels = possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);
      this._ensureScrollEnabledTimer = setTimeout(this.ensureScrollEnabled, SCROLL_LOCK_MILLISECONDS);
      if (this.currentTranslateX >= 0) {
        this.handleRightSwipe(projectedExtraPixels);
      } else {
        if (this.props.disableLeftSwipe) {
          return;
        }
        this.handleLeftSwipe(projectedExtraPixels);
      }
    }
  }, {
    key: "handleRightSwipe",
    value: function handleRightSwipe(projectedExtraPixels) {
      var toValue = 0;
      var actionSide;
      var leftActionValue = this.props.leftActionValue || 0;
      if (this.swipeInitialX < this.currentTranslateX) {
        if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {
          toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;
        }
        if (this.currentTranslateX - projectedExtraPixels > this.props.leftActivationValue) {
          toValue = this.isForceClosing ? 0 : leftActionValue;
          actionSide = 'left';
        }
      } else {
        if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (1 - this.props.swipeToClosePercent / 100)) {
          toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;
        }
        if (this.currentTranslateX - projectedExtraPixels > this.props.leftActivationValue) {
          toValue = this.isForceClosing ? 0 : leftActionValue;
          actionSide = 'left';
        }
      }
      var action = this.determineAction(actionSide);
      this.manuallySwipeRow(toValue, action);
    }
  }, {
    key: "handleLeftSwipe",
    value: function handleLeftSwipe(projectedExtraPixels) {
      var toValue = 0;
      var actionSide;
      var rightActionValue = this.props.rightActionValue || 0;
      if (this.swipeInitialX > this.currentTranslateX) {
        if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {
          toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;
        }
        if (this.currentTranslateX - projectedExtraPixels < this.props.rightActivationValue) {
          toValue = this.isForceClosing ? 0 : rightActionValue;
          actionSide = 'right';
        }
      } else {
        if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue) {
          toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;
        }
        if (this.currentTranslateX - projectedExtraPixels < this.props.rightActivationValue * (1 - this.props.swipeToClosePercent / 100)) {
          toValue = this.isForceClosing ? 0 : rightActionValue;
          actionSide = 'right';
        }
      }
      var action = this.determineAction(actionSide);
      this.manuallySwipeRow(toValue, action);
    }
  }, {
    key: "determineAction",
    value: function determineAction(actionSide) {
      var _this5 = this;
      if (actionSide === 'right') {
        return function () {
          _this5.props.onRightAction && _this5.props.onRightAction();
          _this5.setState({
            rightActionState: !_this5.state.rightActionState
          });
        };
      }
      if (actionSide === 'left') {
        return function () {
          _this5.props.onLeftAction && _this5.props.onLeftAction();
          _this5.setState({
            leftActionState: !_this5.state.leftActionState
          });
        };
      }
    }
  }, {
    key: "closeRow",
    value: function closeRow() {
      this.manuallySwipeRow(0);
    }
  }, {
    key: "forceCloseRow",
    value: function forceCloseRow(direction) {
      var _this6 = this;
      this.manuallySwipeRow(0, function () {
        if (direction === 'right' && _this6.props.onForceCloseToRightEnd) {
          _this6.props.onForceCloseToRightEnd();
        } else if (direction === 'left' && _this6.props.onForceCloseToLeftEnd) {
          _this6.props.onForceCloseToLeftEnd();
        }
      });
    }
  }, {
    key: "closeRowWithoutAnimation",
    value: function closeRowWithoutAnimation() {
      this._translateX.setValue(0);
      this.ensureScrollEnabled();
      this.isOpen = false;
      this.props.onRowDidClose && this.props.onRowDidClose();
      this.props.onRowClose && this.props.onRowClose();
      this.swipeInitialX = null;
      this.horizontalSwipeGestureBegan = false;
    }
  }, {
    key: "manuallySwipeRow",
    value: function manuallySwipeRow(toValue, onAnimationEnd) {
      var _this7 = this;
      _reactNative.Animated.spring(this._translateX, {
        toValue: toValue,
        friction: this.props.friction,
        tension: this.props.tension,
        restSpeedThreshold: this.props.restSpeedThreshold,
        restDisplacementThreshold: this.props.restDisplacementThreshold,
        useNativeDriver: this.props.useNativeDriver
      }).start(function () {
        _this7.ensureScrollEnabled();
        if (toValue === 0) {
          _this7.isOpen = false;
          _this7.props.onRowDidClose && _this7.props.onRowDidClose();
        } else {
          _this7.isOpen = true;
          _this7.props.onRowDidOpen && _this7.props.onRowDidOpen(toValue);
        }
        if (onAnimationEnd) {
          onAnimationEnd();
        }
      });
      if (toValue === 0) {
        this.props.onRowClose && this.props.onRowClose();
      } else {
        this.props.onRowOpen && this.props.onRowOpen(toValue);
      }
      this.swipeInitialX = null;
      this.horizontalSwipeGestureBegan = false;
    }
  }, {
    key: "renderVisibleContent",
    value: function renderVisibleContent() {
      if (!this.props.closeOnRowPress) {
        return _react.default.cloneElement(this.props.children[1], (0, _extends2.default)({}, this.props.children[1].props, {
          leftActionActivated: this.state.leftActionActivated,
          rightActionActivated: this.state.rightActionActivated,
          leftActionState: this.state.leftActionState,
          rightActionState: this.state.rightActionState,
          swipeAnimatedValue: this._translateX
        }));
      }
      var onPress = this.props.children[1].props.onPress;
      if (onPress) {
        return _react.default.cloneElement(this.props.children[1], (0, _extends2.default)({}, this.props.children[1].props, {
          onPress: this.combinedOnPress,
          leftActionActivated: this.state.leftActionActivated,
          rightActionActivated: this.state.rightActionActivated,
          leftActionState: this.state.leftActionState,
          rightActionState: this.state.rightActionState,
          swipeAnimatedValue: this._translateX
        }));
      }
      return _react.default.createElement(_reactNative.TouchableOpacity, {
        activeOpacity: 1,
        onPress: this.combinedOnPress,
        accessible: false
      }, _react.default.cloneElement(this.props.children[1], (0, _extends2.default)({}, this.props.children[1].props, {
        leftActionActivated: this.state.leftActionActivated,
        rightActionActivated: this.state.rightActionActivated,
        leftActionState: this.state.leftActionState,
        rightActionState: this.state.rightActionState,
        swipeAnimatedValue: this._translateX
      })));
    }
  }, {
    key: "renderRowContent",
    value: function renderRowContent() {
      var _this8 = this;
      if (this.state.dimensionsSet) {
        return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
          manipulationModes: ['translateX']
        }, this._panResponder.panHandlers, {
          style: {
            zIndex: 2,
            transform: [{
              translateX: this._translateX
            }]
          }
        }), this.renderVisibleContent());
      } else {
        return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({
          manipulationModes: ['translateX']
        }, this._panResponder.panHandlers, {
          onLayout: function onLayout(e) {
            return _this8.onContentLayout(e);
          },
          style: {
            zIndex: 2,
            transform: [{
              translateX: this._translateX
            }]
          }
        }), this.renderVisibleContent());
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(_reactNative.View, {
        style: this.props.style ? this.props.style : styles.container
      }, _react.default.createElement(_reactNative.View, {
        style: [styles.hidden, {
          height: this.state.hiddenHeight,
          width: this.state.hiddenWidth
        }]
      }, _react.default.cloneElement(this.props.children[0], (0, _extends2.default)({}, this.props.children[0].props, {
        leftActionActivated: this.state.leftActionActivated,
        rightActionActivated: this.state.rightActionActivated,
        leftActionState: this.state.leftActionState,
        rightActionState: this.state.rightActionState,
        swipeAnimatedValue: this._translateX
      }))), this.renderRowContent());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (!nextProps.previewRepeat) {
        clearInterval(prevState.previewRepeatInterval);
        prevState.previewRepeatInterval = null;
      }
      prevState.timeBetweenPreviewRepeats = nextProps.previewDuration * 2 + nextProps.previewOpenDelay + PREVIEW_CLOSE_DELAY + nextProps.previewRepeatDelay;
      return prevState;
    }
  }]);
  return SwipeRow;
}(_react.Component);
var styles = _reactNative.StyleSheet.create({
  container: {},
  hidden: {
    zIndex: 1,
    bottom: 0,
    left: 0,
    overflow: 'hidden',
    position: 'absolute',
    right: 0,
    top: 0
  }
});
SwipeRow.propTypes = {
  setScrollEnabled: _propTypes.default.func,
  swipeGestureBegan: _propTypes.default.func,
  swipeGestureEnded: _propTypes.default.func,
  onRowOpen: _propTypes.default.func,
  onRowDidOpen: _propTypes.default.func,
  leftOpenValue: _propTypes.default.number,
  rightOpenValue: _propTypes.default.number,
  leftActivationValue: _propTypes.default.number,
  rightActivationValue: _propTypes.default.number,
  leftActionValue: _propTypes.default.number,
  rightActionValue: _propTypes.default.number,
  initialLeftActionState: _propTypes.default.bool,
  initialRightActionState: _propTypes.default.bool,
  stopLeftSwipe: _propTypes.default.number,
  stopRightSwipe: _propTypes.default.number,
  friction: _propTypes.default.number,
  tension: _propTypes.default.number,
  restSpeedThreshold: _propTypes.default.number,
  restDisplacementThreshold: _propTypes.default.number,
  closeOnRowPress: _propTypes.default.bool,
  disableLeftSwipe: _propTypes.default.bool,
  disableRightSwipe: _propTypes.default.bool,
  recalculateHiddenLayout: _propTypes.default.bool,
  disableHiddenLayoutCalculation: _propTypes.default.bool,
  onRowClose: _propTypes.default.func,
  onRowDidClose: _propTypes.default.func,
  onLeftAction: _propTypes.default.func,
  onRightAction: _propTypes.default.func,
  onLeftActionStatusChange: _propTypes.default.func,
  onRightActionStatusChange: _propTypes.default.func,
  style: _propTypes.default.object,
  preview: _propTypes.default.bool,
  previewDuration: _propTypes.default.number,
  previewRepeat: _propTypes.default.bool,
  previewRepeatDelay: _propTypes.default.number,
  previewOpenValue: _propTypes.default.number,
  directionalDistanceChangeThreshold: _propTypes.default.number,
  swipeToOpenPercent: _propTypes.default.number,
  swipeToOpenVelocityContribution: _propTypes.default.number,
  swipeToClosePercent: _propTypes.default.number,
  shouldItemUpdate: _propTypes.default.func,
  onSwipeValueChange: _propTypes.default.func,
  forceCloseToLeftThreshold: _propTypes.default.number,
  forceCloseToRightThreshold: _propTypes.default.number,
  onForceCloseToLeft: _propTypes.default.func,
  onForceCloseToRight: _propTypes.default.func,
  onForceCloseToLeftEnd: _propTypes.default.func,
  onForceCloseToRightEnd: _propTypes.default.func,
  useNativeDriver: _propTypes.default.bool,
  children: _propTypes.default.node.isRequired,
  swipeKey: _propTypes.default.string,
  onPreviewEnd: _propTypes.default.func
};
SwipeRow.defaultProps = {
  leftOpenValue: 0,
  rightOpenValue: 0,
  closeOnRowPress: true,
  disableLeftSwipe: false,
  disableRightSwipe: false,
  recalculateHiddenLayout: false,
  disableHiddenLayoutCalculation: false,
  preview: false,
  previewDuration: 300,
  previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,
  directionalDistanceChangeThreshold: 2,
  swipeToOpenPercent: 50,
  swipeToOpenVelocityContribution: 0,
  swipeToClosePercent: 50,
  item: {},
  useNativeDriver: true,
  previewRepeat: false,
  previewRepeatDelay: 1000
};
var _default = SwipeRow;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,