{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_extends2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_react","_interopRequireWildcard","_propTypes","_reactNative","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","valueOf","e","DEFAULT_PREVIEW_OPEN_DELAY","PREVIEW_CLOSE_DELAY","MAX_VELOCITY_CONTRIBUTION","SCROLL_LOCK_MILLISECONDS","SwipeRow","_Component","_super","props","_this","ensureScrollEnabled","parentScrollEnabled","setScrollEnabled","combinedOnPress","onPress","children","onRowPress","isOpen","leftActionActivated","rightActionActivated","previousTrackedTranslateX","currentTranslateX","previousTrackedDirection","horizontalSwipeGestureBegan","swipeInitialX","ranPreview","_ensureScrollEnabledTimer","isForceClosing","state","leftActionState","initialLeftActionState","rightActionState","initialRightActionState","previewRepeatInterval","timeBetweenPreviewRepeats","dimensionsSet","hiddenHeight","disableHiddenLayoutCalculation","hiddenWidth","_translateX","Animated","Value","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","gs","handleOnMoveShouldSetPanResponder","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderRelease","onPanResponderTerminate","handlePanResponderEnd","onShouldBlockNativeResponder","addListener","_ref","onSwipeValueChange","direction","Math","abs","swipeKey","forceCloseToRightThreshold","_ref2","Dimensions","width","forceCloseRow","onForceCloseToRight","forceCloseToLeftThreshold","_ref3","onForceCloseToLeft","onLeftActionStatusChange","leftActivationValue","_ref4","absValue","isActivated","setState","onRightActionStatusChange","rightActivationValue","_ref5","componentWillUnmount","clearTimeout","removeAllListeners","shouldComponentUpdate","nextProps","nextState","shouldItemUpdate","item","getPreviewAnimation","toValue","delay","timing","duration","previewDuration","useNativeDriver","onContentLayout","_this2","recalculateHiddenLayout","nativeEvent","layout","height","preview","doFullAnimation","previewRepeat","setInterval","_this3","previewOpenValue","rightOpenValue","previewOpenDelay","start","onPreviewEnd","closeOnRowPress","closeRow","dx","directionalDistanceChangeThreshold","gestureState","dy","absDx","absDy","swipeGestureBegan","newDX","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","setValue","swipeGestureEnded","translateX","event","defaultPrevented","_this4","setTimeout","swipeToOpenVelocityContribution","possibleExtraPixels","clampedVelocity","min","vx","projectedExtraPixels","handleRightSwipe","handleLeftSwipe","actionSide","leftActionValue","leftOpenValue","swipeToOpenPercent","swipeToClosePercent","action","determineAction","manuallySwipeRow","rightActionValue","_this5","onRightAction","onLeftAction","_this6","onForceCloseToRightEnd","onForceCloseToLeftEnd","closeRowWithoutAnimation","onRowDidClose","onRowClose","onAnimationEnd","_this7","spring","friction","tension","restSpeedThreshold","restDisplacementThreshold","onRowDidOpen","onRowOpen","renderVisibleContent","React","cloneElement","swipeAnimatedValue","createElement","TouchableOpacity","activeOpacity","accessible","renderRowContent","_this8","View","manipulationModes","panHandlers","style","zIndex","transform","onLayout","render","styles","container","hidden","getDerivedStateFromProps","prevState","clearInterval","previewRepeatDelay","Component","StyleSheet","bottom","left","overflow","position","right","top","propTypes","PropTypes","func","number","bool","object","node","isRequired","string","defaultProps","_default"],"sources":["SwipeRow.js"],"sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Dimensions,\n    Animated,\n    PanResponder,\n    StyleSheet,\n    TouchableOpacity,\n    View,\n} from 'react-native';\n\nconst DEFAULT_PREVIEW_OPEN_DELAY = 700;\nconst PREVIEW_CLOSE_DELAY = 300;\nconst MAX_VELOCITY_CONTRIBUTION = 5;\nconst SCROLL_LOCK_MILLISECONDS = 300;\n\n/**\n * Row that is generally used in a SwipeListView.\n * If you are rendering a SwipeRow explicitly you must pass the SwipeRow exactly two children.\n * The first will be rendered behind the second.\n * e.g.\n  <SwipeRow>\n      <View style={hiddenRowStyle} />\n      <View style={visibleRowStyle} />\n  </SwipeRow>\n */\nclass SwipeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.isOpen = false;\n        this.leftActionActivated = false;\n        this.rightActionActivated = false;\n        this.previousTrackedTranslateX = 0;\n        this.currentTranslateX = 0;\n        this.previousTrackedDirection = null;\n        this.horizontalSwipeGestureBegan = false;\n        this.swipeInitialX = null;\n        this.parentScrollEnabled = true;\n        this.ranPreview = false;\n        this._ensureScrollEnabledTimer = null;\n        this.isForceClosing = false;\n        this.state = {\n            leftActionActivated: false,\n            rightActionActivated: false,\n            leftActionState: this.props.initialLeftActionState || false,\n            rightActionState: this.props.initialRightActionState || false,\n            previewRepeatInterval: null,\n            timeBetweenPreviewRepeats: null,\n            dimensionsSet: false,\n            hiddenHeight: this.props.disableHiddenLayoutCalculation\n                ? '100%'\n                : 0,\n            hiddenWidth: this.props.disableHiddenLayoutCalculation ? '100%' : 0,\n        };\n        this._translateX = new Animated.Value(0);\n\n        this._panResponder = PanResponder.create({\n            onMoveShouldSetPanResponder: (e, gs) =>\n                this.handleOnMoveShouldSetPanResponder(e, gs),\n            onPanResponderMove: (e, gs) => this.handlePanResponderMove(e, gs),\n            onPanResponderRelease: (e, gs) =>\n                this.handlePanResponderRelease(e, gs),\n            onPanResponderTerminate: (e, gs) =>\n                this.handlePanResponderEnd(e, gs),\n            onShouldBlockNativeResponder: () => false,\n        });\n\n        this._translateX.addListener(({ value }) => {\n            this.currentTranslateX = value;\n            if (this.props.onSwipeValueChange) {\n                let direction = this.previousTrackedDirection;\n                if (\n                    value !== this.previousTrackedTranslateX &&\n                    Math.abs(value - this.previousTrackedTranslateX) > 0.5\n                ) {\n                    direction =\n                        value > this.previousTrackedTranslateX\n                            ? 'right'\n                            : 'left';\n                }\n                this.props.onSwipeValueChange &&\n                    this.props.onSwipeValueChange({\n                        isOpen: this.isOpen,\n                        direction,\n                        value,\n                        key: this.props.swipeKey,\n                    });\n                this.previousTrackedTranslateX = value;\n                this.previousTrackedDirection = direction;\n            }\n        });\n\n        if (\n            this.props.forceCloseToRightThreshold &&\n            this.props.forceCloseToRightThreshold > 0\n        ) {\n            this._translateX.addListener(({ value }) => {\n                if (\n                    !this.isForceClosing &&\n                    Dimensions.get('window').width + value <\n                        this.props.forceCloseToRightThreshold\n                ) {\n                    this.isForceClosing = true;\n                    this.forceCloseRow('right');\n                    if (this.props.onForceCloseToRight) {\n                        this.props.onForceCloseToRight();\n                    }\n                }\n            });\n        }\n\n        if (\n            this.props.forceCloseToLeftThreshold &&\n            this.props.forceCloseToRightThreshold > 0\n        ) {\n            this._translateX.addListener(({ value }) => {\n                if (\n                    !this.isForceClosing &&\n                    Dimensions.get('window').width - value <\n                        this.props.forceCloseToLeftThreshold\n                ) {\n                    this.isForceClosing = true;\n                    this.forceCloseRow('left');\n                    if (this.props.onForceCloseToLeft) {\n                        this.props.onForceCloseToLeft();\n                    }\n                }\n            });\n        }\n\n        if (\n            this.props.onLeftActionStatusChange &&\n            this.props.leftActivationValue &&\n            this.props.leftActivationValue > 0\n        ) {\n            this._translateX.addListener(({ value }) => {\n                const absValue = Math.abs(value);\n                const isActivated = absValue > this.props.leftActivationValue;\n                if (this.leftActionActivated !== isActivated && value > 0) {\n                    this.props.onLeftActionStatusChange({\n                        isActivated,\n                        value,\n                        key: this.props.swipeKey,\n                    });\n                    this.leftActionActivated = isActivated;\n                    this.setState({\n                        leftActionActivated: isActivated,\n                    });\n                }\n            });\n        }\n\n        if (\n            this.props.onRightActionStatusChange &&\n            this.props.rightActivationValue &&\n            this.props.rightActivationValue < 0\n        ) {\n            this._translateX.addListener(({ value }) => {\n                const absValue = Math.abs(value);\n                const isActivated =\n                    absValue > Math.abs(this.props.rightActivationValue);\n                if (this.rightActionActivated !== isActivated && value < 0) {\n                    this.props.onRightActionStatusChange({\n                        isActivated,\n                        value,\n                        key: this.props.swipeKey,\n                    });\n                    this.rightActionActivated = isActivated;\n                    this.setState({\n                        rightActionActivated: isActivated,\n                    });\n                }\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this._ensureScrollEnabledTimer);\n        this._translateX.removeAllListeners();\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            this.state.hiddenHeight !== nextState.hiddenHeight ||\n            this.state.hiddenWidth !== nextState.hiddenWidth ||\n            this.state.leftActionActivated !== nextState.leftActionActivated ||\n            this.state.rightActionActivated !==\n                nextState.rightActionActivated ||\n            this.state.leftActionState !== nextState.leftActionState ||\n            this.state.rightActionState !== nextState.rightActionState ||\n            !this.props.shouldItemUpdate ||\n            (this.props.shouldItemUpdate &&\n                this.props.shouldItemUpdate(this.props.item, nextProps.item))\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.previewRepeat) {\n            clearInterval(prevState.previewRepeatInterval);\n            prevState.previewRepeatInterval = null;\n        }\n        prevState.timeBetweenPreviewRepeats =\n            nextProps.previewDuration * 2 +\n            nextProps.previewOpenDelay +\n            PREVIEW_CLOSE_DELAY +\n            nextProps.previewRepeatDelay;\n        return prevState;\n    }\n\n    getPreviewAnimation(toValue, delay) {\n        return Animated.timing(this._translateX, {\n            duration: this.props.previewDuration,\n            toValue,\n            delay,\n            useNativeDriver: this.props.useNativeDriver,\n        });\n    }\n\n    onContentLayout(e) {\n        this.setState({\n            dimensionsSet: !this.props.recalculateHiddenLayout,\n            ...(!this.props.disableHiddenLayoutCalculation\n                ? {\n                      hiddenHeight: e.nativeEvent.layout.height,\n                      hiddenWidth: e.nativeEvent.layout.width,\n                  }\n                : {}),\n        });\n\n        if (this.props.preview && !this.ranPreview) {\n            this.ranPreview = true;\n            this.doFullAnimation();\n            if (this.props.previewRepeat) {\n                this.setState({\n                    previewRepeatInterval: setInterval(() => {\n                        this.doFullAnimation();\n                    }, this.state.timeBetweenPreviewRepeats),\n                });\n            }\n        }\n    }\n\n    doFullAnimation() {\n        const previewOpenValue =\n            this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n        return this.getPreviewAnimation(\n            previewOpenValue,\n            this.props.previewOpenDelay\n        ).start(() => {\n            this.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start(() => {\n                this.props.onPreviewEnd && this.props.onPreviewEnd();\n            });\n        });\n    }\n\n    onRowPress() {\n        if (this.props.onRowPress) {\n            this.props.onRowPress();\n        } else {\n            if (this.props.closeOnRowPress) {\n                this.closeRow();\n            }\n        }\n    }\n\n    handleOnMoveShouldSetPanResponder(e, gs) {\n        const { dx } = gs;\n        return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n\n    handlePanResponderMove(e, gestureState) {\n        /* If the view is force closing, then ignore Moves. Return */\n        if (this.isForceClosing) {\n            return;\n        }\n\n        /* Else, do normal job */\n        const { dx, dy } = gestureState;\n        const absDx = Math.abs(dx);\n        const absDy = Math.abs(dy);\n\n        // this check may not be necessary because we don't capture the move until we pass the threshold\n        // just being extra safe here\n        if (\n            absDx > this.props.directionalDistanceChangeThreshold ||\n            absDy > this.props.directionalDistanceChangeThreshold\n        ) {\n            // we have enough to determine direction\n            if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n                // user is moving vertically, do nothing, listView will handle\n                return;\n            }\n\n            // user is moving horizontally\n            if (this.parentScrollEnabled) {\n                // disable scrolling on the listView parent\n                this.parentScrollEnabled = false;\n                this.props.setScrollEnabled &&\n                    this.props.setScrollEnabled(false);\n            }\n\n            if (this.swipeInitialX === null) {\n                // set tranlateX value when user started swiping\n                this.swipeInitialX = this.currentTranslateX;\n            }\n            if (!this.horizontalSwipeGestureBegan) {\n                this.horizontalSwipeGestureBegan = true;\n                this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n            }\n\n            let newDX = this.swipeInitialX + dx;\n            if (this.props.disableLeftSwipe && newDX < 0) {\n                newDX = 0;\n            }\n            if (this.props.disableRightSwipe && newDX > 0) {\n                newDX = 0;\n            }\n\n            if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n                newDX = this.props.stopLeftSwipe;\n            }\n            if (\n                this.props.stopRightSwipe &&\n                newDX < this.props.stopRightSwipe\n            ) {\n                newDX = this.props.stopRightSwipe;\n            }\n\n            this._translateX.setValue(newDX);\n        }\n    }\n\n    ensureScrollEnabled = () => {\n        if (!this.parentScrollEnabled) {\n            this.parentScrollEnabled = true;\n            this.props.setScrollEnabled && this.props.setScrollEnabled(true);\n        }\n    };\n\n    handlePanResponderRelease(e, gestureState) {\n        this.props.swipeGestureEnded &&\n            this.props.swipeGestureEnded(this.props.swipeKey, {\n                translateX: this.currentTranslateX,\n                direction: this.previousTrackedDirection,\n                event: e,\n                gestureState,\n            });\n\n        // If preventDefault() called on the event, do not handle responder end.\n        if (!e.defaultPrevented) {\n            this.handlePanResponderEnd(e, gestureState);\n        }\n    }\n\n    handlePanResponderEnd(e, gestureState) {\n        /* PanEnd will reset the force-closing state when it's true. */\n        if (this.isForceClosing) {\n            setTimeout(() => {\n                this.isForceClosing = false;\n            }, 500); // 500 is the default Animated.spring's duration used in manuallySwipeRow\n        }\n        // decide how much the velocity will affect the final position that the list item settles in.\n        const swipeToOpenVelocityContribution = this.props\n            .swipeToOpenVelocityContribution;\n        const possibleExtraPixels =\n            this.props.rightOpenValue * swipeToOpenVelocityContribution;\n        const clampedVelocity = Math.min(\n            gestureState.vx,\n            MAX_VELOCITY_CONTRIBUTION\n        );\n        const projectedExtraPixels =\n            possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\n\n        // re-enable scrolling on listView parent\n        this._ensureScrollEnabledTimer = setTimeout(\n            this.ensureScrollEnabled,\n            SCROLL_LOCK_MILLISECONDS\n        );\n\n        // finish up the animation\n        if (this.currentTranslateX >= 0) {\n            // trying to swipe right\n            // if (this.props.disableRightSwipe) {\n            //    return;\n            // }\n\n            this.handleRightSwipe(projectedExtraPixels);\n        } else {\n            // trying to swipe left\n            if (this.props.disableLeftSwipe) {\n                return;\n            }\n\n            this.handleLeftSwipe(projectedExtraPixels);\n        }\n    }\n\n    handleRightSwipe(projectedExtraPixels) {\n        let toValue = 0;\n        let actionSide;\n        const leftActionValue = this.props.leftActionValue || 0;\n        if (this.swipeInitialX < this.currentTranslateX) {\n            if (\n                this.currentTranslateX - projectedExtraPixels >\n                this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)\n            ) {\n                // we're more than halfway\n                toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n            }\n            if (\n                this.currentTranslateX - projectedExtraPixels >\n                this.props.leftActivationValue\n            ) {\n                // we've passed the threshold to trigger the leftActionValue\n                toValue = this.isForceClosing ? 0 : leftActionValue;\n                actionSide = 'left';\n            }\n        } else {\n            if (\n                this.currentTranslateX - projectedExtraPixels >\n                this.props.leftOpenValue *\n                    (1 - this.props.swipeToClosePercent / 100)\n            ) {\n                toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n            }\n            if (\n                this.currentTranslateX - projectedExtraPixels >\n                this.props.leftActivationValue\n            ) {\n                toValue = this.isForceClosing ? 0 : leftActionValue;\n                actionSide = 'left';\n            }\n        }\n\n        const action = this.determineAction(actionSide);\n        this.manuallySwipeRow(toValue, action);\n    }\n\n    handleLeftSwipe(projectedExtraPixels) {\n        let toValue = 0;\n        let actionSide;\n        const rightActionValue = this.props.rightActionValue || 0;\n        if (this.swipeInitialX > this.currentTranslateX) {\n            if (\n                this.currentTranslateX - projectedExtraPixels <\n                this.props.rightOpenValue *\n                    (this.props.swipeToOpenPercent / 100)\n            ) {\n                // we're more than halfway\n                toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n            }\n            if (\n                this.currentTranslateX - projectedExtraPixels <\n                this.props.rightActivationValue\n            ) {\n                // we've passed the threshold to trigger the rightActionValue\n                toValue = this.isForceClosing ? 0 : rightActionValue;\n                actionSide = 'right';\n            }\n        } else {\n            if (\n                this.currentTranslateX - projectedExtraPixels <\n                this.props.rightOpenValue\n            ) {\n                toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n            }\n            if (\n                this.currentTranslateX - projectedExtraPixels <\n                this.props.rightActivationValue *\n                    (1 - this.props.swipeToClosePercent / 100)\n            ) {\n                toValue = this.isForceClosing ? 0 : rightActionValue;\n                actionSide = 'right';\n            }\n        }\n        const action = this.determineAction(actionSide);\n        this.manuallySwipeRow(toValue, action);\n    }\n\n    determineAction(actionSide) {\n        if (actionSide === 'right') {\n            return () => {\n                this.props.onRightAction && this.props.onRightAction();\n                this.setState({\n                    rightActionState: !this.state.rightActionState,\n                });\n            };\n        }\n        if (actionSide === 'left') {\n            return () => {\n                this.props.onLeftAction && this.props.onLeftAction();\n                this.setState({\n                    leftActionState: !this.state.leftActionState,\n                });\n            };\n        }\n    }\n\n    /*\n     * This method is called by SwipeListView\n     */\n    closeRow() {\n        this.manuallySwipeRow(0);\n    }\n\n    /**\n     * Force close the row toward the end of the given direction.\n     * @param  {String} direction The direction to force close.\n     */\n    forceCloseRow(direction) {\n        this.manuallySwipeRow(0, () => {\n            if (direction === 'right' && this.props.onForceCloseToRightEnd) {\n                this.props.onForceCloseToRightEnd();\n            } else if (\n                direction === 'left' &&\n                this.props.onForceCloseToLeftEnd\n            ) {\n                this.props.onForceCloseToLeftEnd();\n            }\n        });\n    }\n\n    closeRowWithoutAnimation() {\n        this._translateX.setValue(0);\n\n        this.ensureScrollEnabled();\n        this.isOpen = false;\n        this.props.onRowDidClose && this.props.onRowDidClose();\n\n        this.props.onRowClose && this.props.onRowClose();\n\n        this.swipeInitialX = null;\n        this.horizontalSwipeGestureBegan = false;\n    }\n\n    manuallySwipeRow(toValue, onAnimationEnd) {\n        Animated.spring(this._translateX, {\n            toValue,\n            friction: this.props.friction,\n            tension: this.props.tension,\n            restSpeedThreshold: this.props.restSpeedThreshold,\n            restDisplacementThreshold: this.props.restDisplacementThreshold,\n            useNativeDriver: this.props.useNativeDriver,\n        }).start(() => {\n            this.ensureScrollEnabled();\n            if (toValue === 0) {\n                this.isOpen = false;\n                this.props.onRowDidClose && this.props.onRowDidClose();\n            } else {\n                this.isOpen = true;\n                this.props.onRowDidOpen && this.props.onRowDidOpen(toValue);\n            }\n            if (onAnimationEnd) {\n                onAnimationEnd();\n            }\n        });\n\n        if (toValue === 0) {\n            this.props.onRowClose && this.props.onRowClose();\n        } else {\n            this.props.onRowOpen && this.props.onRowOpen(toValue);\n        }\n\n        // reset everything\n        this.swipeInitialX = null;\n        this.horizontalSwipeGestureBegan = false;\n    }\n\n    combinedOnPress = (...args) => {\n        const onPress = this.props.children[1].props.onPress;\n        this.onRowPress();\n        onPress && onPress(...args);\n    };\n\n    renderVisibleContent() {\n        if (!this.props.closeOnRowPress) {\n            return React.cloneElement(this.props.children[1], {\n                ...this.props.children[1].props,\n                leftActionActivated: this.state.leftActionActivated,\n                rightActionActivated: this.state.rightActionActivated,\n                leftActionState: this.state.leftActionState,\n                rightActionState: this.state.rightActionState,\n                swipeAnimatedValue: this._translateX,\n            });\n        }\n\n        // handle touchables\n        const onPress = this.props.children[1].props.onPress;\n\n        if (onPress) {\n            return React.cloneElement(this.props.children[1], {\n                ...this.props.children[1].props,\n                onPress: this.combinedOnPress,\n                leftActionActivated: this.state.leftActionActivated,\n                rightActionActivated: this.state.rightActionActivated,\n                leftActionState: this.state.leftActionState,\n                rightActionState: this.state.rightActionState,\n                swipeAnimatedValue: this._translateX,\n            });\n        }\n\n        return (\n            <TouchableOpacity\n                activeOpacity={1}\n                onPress={this.combinedOnPress}\n                accessible={false}\n            >\n                {React.cloneElement(this.props.children[1], {\n                    ...this.props.children[1].props,\n                    leftActionActivated: this.state.leftActionActivated,\n                    rightActionActivated: this.state.rightActionActivated,\n                    leftActionState: this.state.leftActionState,\n                    rightActionState: this.state.rightActionState,\n                    swipeAnimatedValue: this._translateX,\n                })}\n            </TouchableOpacity>\n        );\n    }\n\n    renderRowContent() {\n        // We do this annoying if statement for performance.\n        // We don't want the onLayout func to run after it runs once.\n        if (this.state.dimensionsSet) {\n            return (\n                <Animated.View\n                    manipulationModes={['translateX']}\n                    {...this._panResponder.panHandlers}\n                    style={{\n                        zIndex: 2,\n                        transform: [{ translateX: this._translateX }],\n                    }}\n                >\n                    {this.renderVisibleContent()}\n                </Animated.View>\n            );\n        } else {\n            return (\n                <Animated.View\n                    manipulationModes={['translateX']}\n                    {...this._panResponder.panHandlers}\n                    onLayout={e => this.onContentLayout(e)}\n                    style={{\n                        zIndex: 2,\n                        transform: [{ translateX: this._translateX }],\n                    }}\n                >\n                    {this.renderVisibleContent()}\n                </Animated.View>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <View\n                style={this.props.style ? this.props.style : styles.container}\n            >\n                <View\n                    style={[\n                        styles.hidden,\n                        {\n                            height: this.state.hiddenHeight,\n                            width: this.state.hiddenWidth,\n                        },\n                    ]}\n                >\n                    {React.cloneElement(this.props.children[0], {\n                        ...this.props.children[0].props,\n                        leftActionActivated: this.state.leftActionActivated,\n                        rightActionActivated: this.state.rightActionActivated,\n                        leftActionState: this.state.leftActionState,\n                        rightActionState: this.state.rightActionState,\n                        swipeAnimatedValue: this._translateX,\n                    })}\n                </View>\n                {this.renderRowContent()}\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        // As of RN 0.29 flex: 1 is causing all rows to be the same height\n        // flex: 1\n    },\n    hidden: {\n        zIndex: 1,\n        bottom: 0,\n        left: 0,\n        overflow: 'hidden',\n        position: 'absolute',\n        right: 0,\n        top: 0,\n    },\n});\n\nSwipeRow.propTypes = {\n    /**\n     * Used by the SwipeListView to close rows on scroll events.\n     * You shouldn't need to use this prop explicitly.\n     */\n    setScrollEnabled: PropTypes.func,\n    /**\n     * Called when it has been detected that a row should be swiped open.\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when user has ended their swipe gesture\n     */\n    swipeGestureEnded: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open. Used by the SwipeListView\n     * to keep references to open rows.\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open.\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\n     */\n    leftActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onRightActionStatusChange (negative number)\n     */\n    rightActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for left action to which the row will be shifted after gesture release\n     */\n    leftActionValue: PropTypes.number,\n    /**\n     * TranslateX value for right action to which the row will be shifted after gesture release\n     */\n    rightActionValue: PropTypes.number,\n    /**\n     * Initial value for left action state (default is false)\n     */\n    initialLeftActionState: PropTypes.bool,\n    /**\n     * Initial value for right action state (default is false)\n     */\n    initialRightActionState: PropTypes.bool,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * Should the row be closed when it is tapped\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Disable ability to swipe the row left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe the row right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Called when row shifted to leftActivationValue\n     */\n    onLeftAction: PropTypes.func,\n    /**\n     * Called when row shifted to rightActivationValue\n     */\n    onRightAction: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the leftActivationValue\n     */\n    onLeftActionStatusChange: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the rightActivationValue\n     */\n    onRightActionStatusChange: PropTypes.func,\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    style: PropTypes.object,\n    /**\n     * Should the row do a slide out preview to show that it is swipeable\n     */\n    preview: PropTypes.bool,\n    /**\n     * Duration of the slide out preview animation\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture contributes to whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of the row is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Left End (positive number)\n     */\n    forceCloseToLeftThreshold: PropTypes.number,\n    /**\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Right End (positive number)\n     */\n    forceCloseToRightThreshold: PropTypes.number,\n    /**\n     * Callback invoked when row is force closing to the Left End\n     */\n    onForceCloseToLeft: PropTypes.func,\n    /**\n     * Callback invoked when row is force closing to the Right End\n     */\n    onForceCloseToRight: PropTypes.func,\n    /**\n     * Callback invoked when row has finished force closing to the Left End\n     */\n    onForceCloseToLeftEnd: PropTypes.func,\n    /**\n     * Callback invoked when row has finished force closing to the Right End\n     */\n    onForceCloseToRightEnd: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n    /**\n     * Children\n     */\n    children: PropTypes.node.isRequired,\n    /**\n     * Key used to identify rows on swipe value changes\n     */\n    swipeKey: PropTypes.string,\n    /**\n     * Callback that runs after row swipe preview is finished\n     */\n    onPreviewEnd: PropTypes.func,\n};\n\nSwipeRow.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowPress: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    preview: false,\n    previewDuration: 300,\n    previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    item: {},\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n};\n\nexport default SwipeRow;\n"],"mappings":"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"}