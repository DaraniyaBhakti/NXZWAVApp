1d4d5a0528bb06dbcdd602f0e334e82e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_cucumber_1 = require("jest-cucumber");
const enzyme_1 = require("enzyme");
const helpers = __importStar(require("../../../../framework/src/Helpers"));
const react_1 = __importDefault(require("react"));
const PMCompose_1 = __importDefault(require("../../src/PMCompose"));
const MessageEnum_1 = __importStar(require("../../../../framework/src/Messages/MessageEnum"));
const Message_1 = require("../../../../framework/src/Message");
const RunEngine_1 = require("../../../../framework/src/RunEngine");
const navigation = require("react-navigation");
const screenProps = {
    navigation: {
        addListener: jest.fn().mockImplementation((event, callback) => {
            callback();
        }),
        navigate: jest.fn(),
        state: { params: { receiverUser: {}, conversationID: 0 } },
    },
    id: "PMCompose"
};
const feature = jest_cucumber_1.loadFeature("./__tests__/features/PMCompose-scenario.feature");
jest_cucumber_1.defineFeature(feature, (test) => {
    beforeEach(() => {
        jest.resetModules();
        jest.doMock("react-native", () => ({ Platform: { OS: "ios" } }));
        jest.spyOn(helpers, "getOS").mockImplementation(() => "ios");
    });
    test("User navigates to PMCompose", ({ given, when, then }) => {
        let pmComposeWrapper;
        let instance;
        given("I am a User loading PMCompose", () => {
            pmComposeWrapper = enzyme_1.shallow(react_1.default.createElement(PMCompose_1.default, Object.assign({}, screenProps)));
        });
        when("I navigate to PMCompose", () => {
            instance = pmComposeWrapper.instance();
        });
        then('PMCompose will load with out errors', () => {
            let hideKeyboard = pmComposeWrapper.findWhere((node) => node.prop("testID") === "hideKeyboard");
            hideKeyboard.simulate("press");
            expect(hideKeyboard).toHaveLength(1);
            expect(pmComposeWrapper).toBeTruthy();
        });
        then('I can enter text with out errors', () => {
            let textInputComponent = pmComposeWrapper.findWhere((node) => node.prop('testID') === 'textInputMessage');
            textInputComponent.simulate('changeText', 'hello@aol.com');
        });
        then('I can select the button with with out errors', () => {
            let btnImgUpload = pmComposeWrapper.findWhere((node) => node.prop("testID") === "btnImgUpload");
            btnImgUpload.simulate("press");
            expect(btnImgUpload).toHaveLength(1);
            let btnOption50 = pmComposeWrapper.findWhere((node) => node.prop("testID") === "btnOption50");
            btnOption50.simulate("press");
            expect(btnOption50).toHaveLength(1);
            let btnOption100 = pmComposeWrapper.findWhere((node) => node.prop("testID") === "btnOption100");
            btnOption100.simulate("press");
            expect(btnOption100).toHaveLength(1);
            let btnOption250 = pmComposeWrapper.findWhere((node) => node.prop("testID") === "btnOption250");
            btnOption250.simulate("press");
            expect(btnOption250).toHaveLength(1);
            let btnPmCompose = pmComposeWrapper.findWhere((node) => node.prop("testID") === "btnPmCompose");
            btnPmCompose.simulate("press");
            expect(btnPmCompose).toHaveLength(1);
            let btnCancel = pmComposeWrapper.findWhere((node) => node.prop("testID") === "btnCancel");
            btnCancel.simulate("press");
            expect(btnCancel).toHaveLength(1);
        });
        then("Create PM Compose API load with out errors", () => {
            const apiPMCompose = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            apiPMCompose.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), apiPMCompose.messageId);
            apiPMCompose.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), JSON.parse(JSON.stringify({
                "data": {
                    "id": "247",
                    "type": "pm_message",
                    "attributes": {
                        "id": 247,
                        "message": "Nature",
                        "user_profile_info_id": 8,
                        "pm_conversation_id": 31,
                        "created_at": "2023-07-04T11:44:00.081Z",
                        "updated_at": "2023-07-04T11:44:00.090Z",
                        "is_locked": true,
                        "points": 50,
                        "image": {
                            "id": 168,
                            "url": "https://nxzwav-294793-ruby.b294793.dev.eastus.az.svc.builder.cafe/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBYWc9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--27fe6a532e0edb90c424c2a2418c5ec2a4f592ca/IMG_0014.JPG"
                        }
                    }
                }
            })));
            apiPMCompose.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceErrorMessage), JSON.parse(JSON.stringify({ Error: "error message" })));
            instance.apiPMCompose = apiPMCompose.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", apiPMCompose);
            expect(pmComposeWrapper).toBeTruthy();
        });
        then('I can leave the screen with out errors', () => {
            instance.componentWillUnmount();
            expect(pmComposeWrapper).toBeTruthy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,