97037d20cf279bc2df14a7ae9877a17b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Button = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _excluded = ["TouchableComponent", "containerStyle", "onPress", "buttonStyle", "type", "loading", "loadingStyle", "loadingProps", "title", "titleProps", "titleStyle", "icon", "iconContainerStyle", "iconRight", "disabled", "disabledStyle", "disabledTitleStyle", "raised", "linearGradientProps", "ViewComponent", "theme"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var defaultLoadingProps = function defaultLoadingProps(type, theme) {
  return {
    color: type === 'solid' ? 'white' : theme.colors.primary,
    size: 'small'
  };
};
var Button = function (_Component) {
  (0, _inherits2.default)(Button, _Component);
  var _super = _createSuper(Button);
  function Button() {
    (0, _classCallCheck2.default)(this, Button);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Button, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
        linearGradientProps = _this$props.linearGradientProps,
        ViewComponent = _this$props.ViewComponent;
      if (linearGradientProps && !global.Expo && !ViewComponent) {
        console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        TouchableComponent = _this$props2.TouchableComponent,
        containerStyle = _this$props2.containerStyle,
        onPress = _this$props2.onPress,
        buttonStyle = _this$props2.buttonStyle,
        type = _this$props2.type,
        loading = _this$props2.loading,
        loadingStyle = _this$props2.loadingStyle,
        passedLoadingProps = _this$props2.loadingProps,
        title = _this$props2.title,
        titleProps = _this$props2.titleProps,
        titleStyle = _this$props2.titleStyle,
        icon = _this$props2.icon,
        iconContainerStyle = _this$props2.iconContainerStyle,
        iconRight = _this$props2.iconRight,
        disabled = _this$props2.disabled,
        disabledStyle = _this$props2.disabledStyle,
        disabledTitleStyle = _this$props2.disabledTitleStyle,
        raised = _this$props2.raised,
        linearGradientProps = _this$props2.linearGradientProps,
        _this$props2$ViewComp = _this$props2.ViewComponent,
        ViewComponent = _this$props2$ViewComp === void 0 ? !disabled && linearGradientProps && global.Expo ? global.Expo.LinearGradient : _reactNative.View : _this$props2$ViewComp,
        theme = _this$props2.theme,
        attributes = (0, _objectWithoutProperties2.default)(_this$props2, _excluded);
      if (_reactNative.Platform.OS === 'android' && buttonStyle.borderRadius && !attributes.background) {
        if (_reactNative.Platform.Version >= 21) {
          attributes.background = _reactNative.TouchableNativeFeedback.Ripple(undefined, false);
        } else {
          attributes.background = _reactNative.TouchableNativeFeedback.SelectableBackground();
        }
      }
      var loadingProps = (0, _extends2.default)({}, defaultLoadingProps(type, theme), passedLoadingProps);
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, {
          borderRadius: buttonStyle.borderRadius || styles.container.borderRadius
        }, containerStyle, raised && !disabled && styles.raised(type)])
      }, _react.default.createElement(TouchableComponent, (0, _extends2.default)({
        onPress: onPress,
        activeOpacity: 0.3,
        disabled: disabled
      }, attributes), _react.default.createElement(ViewComponent, (0, _extends2.default)({}, linearGradientProps, {
        style: _reactNative.StyleSheet.flatten([styles.button(type, theme), buttonStyle, disabled && styles.disabled(type, theme), disabled && disabledStyle])
      }), loading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
        style: _reactNative.StyleSheet.flatten([styles.loading, loadingStyle]),
        color: loadingProps.color,
        size: loadingProps.size
      }, loadingProps)), !loading && icon && !iconRight && (0, _helpers.renderNode)(_Icon.default, icon, {
        containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
      }), !loading && !!title && _react.default.createElement(_reactNative.Text, (0, _extends2.default)({
        style: _reactNative.StyleSheet.flatten([styles.title(type, theme), titleStyle, disabled && styles.disabledTitle(theme), disabled && disabledTitleStyle])
      }, titleProps), title), !loading && icon && iconRight && (0, _helpers.renderNode)(_Icon.default, icon, {
        containerStyle: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle])
      }))));
    }
  }]);
  return Button;
}(_react.Component);
exports.Button = Button;
Button.propTypes = {
  title: _propTypes.default.string,
  titleStyle: _reactNative.Text.propTypes.style,
  titleProps: _propTypes.default.object,
  buttonStyle: _config.ViewPropTypes.style,
  type: _propTypes.default.oneOf(['solid', 'clear', 'outline']),
  loading: _propTypes.default.bool,
  loadingStyle: _config.ViewPropTypes.style,
  loadingProps: _propTypes.default.object,
  onPress: _propTypes.default.func,
  containerStyle: _config.ViewPropTypes.style,
  icon: _helpers.nodeType,
  iconContainerStyle: _config.ViewPropTypes.style,
  iconRight: _propTypes.default.bool,
  linearGradientProps: _propTypes.default.object,
  TouchableComponent: _propTypes.default.elementType,
  ViewComponent: _propTypes.default.elementType,
  disabled: _propTypes.default.bool,
  disabledStyle: _config.ViewPropTypes.style,
  disabledTitleStyle: _reactNative.Text.propTypes.style,
  raised: _propTypes.default.bool,
  theme: _propTypes.default.object
};
Button.defaultProps = {
  title: '',
  iconRight: false,
  TouchableComponent: _reactNative.Platform.select({
    android: _reactNative.TouchableNativeFeedback,
    default: _reactNative.TouchableOpacity
  }),
  onPress: function onPress() {
    return console.log('Please attach a method to this component');
  },
  type: 'solid',
  buttonStyle: {
    borderRadius: 3
  },
  disabled: false,
  raised: false,
  loading: false
};
var styles = {
  button: function button(type, theme) {
    return {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      borderRadius: 3,
      backgroundColor: type === 'solid' ? theme.colors.primary : 'transparent',
      padding: 8,
      borderWidth: type === 'outline' ? _reactNative.StyleSheet.hairlineWidth : 0,
      borderColor: theme.colors.primary
    };
  },
  container: {
    borderRadius: 3
  },
  disabled: function disabled(type, theme) {
    return (0, _extends2.default)({}, (0, _helpers.conditionalStyle)(type === 'solid', {
      backgroundColor: theme.colors.disabled
    }), (0, _helpers.conditionalStyle)(type === 'outline', {
      borderColor: (0, _helpers.color)(theme.colors.disabled).darken(0.3)
    }));
  },
  disabledTitle: function disabledTitle(theme) {
    return {
      color: (0, _helpers.color)(theme.colors.disabled).darken(0.3)
    };
  },
  title: function title(type, theme) {
    return (0, _extends2.default)({
      color: type === 'solid' ? 'white' : theme.colors.primary,
      fontSize: 16,
      textAlign: 'center',
      paddingTop: 2,
      paddingBottom: 1
    }, _reactNative.Platform.select({
      android: {
        fontFamily: 'sans-serif-medium'
      },
      default: {
        fontSize: 18
      }
    }));
  },
  iconContainer: {
    marginHorizontal: 5
  },
  raised: function raised(type) {
    return type !== 'clear' && (0, _extends2.default)({
      backgroundColor: '#fff'
    }, _reactNative.Platform.select({
      android: {
        elevation: 4
      },
      default: {
        shadowColor: 'rgba(0,0,0, .4)',
        shadowOffset: {
          height: 1,
          width: 1
        },
        shadowOpacity: 1,
        shadowRadius: 1
      }
    }));
  },
  loading: {
    marginVertical: 2
  }
};
var _default = (0, _config.withTheme)(Button, 'Button');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,