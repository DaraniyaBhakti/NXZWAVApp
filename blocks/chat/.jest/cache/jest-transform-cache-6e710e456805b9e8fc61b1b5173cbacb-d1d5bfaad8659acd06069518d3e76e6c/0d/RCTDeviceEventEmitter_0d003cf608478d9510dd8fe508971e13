7f5c6fb89295fe7da434064db1370ed8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EventEmitter = require('../vendor/emitter/EventEmitter');
var EventSubscriptionVendor = require('../vendor/emitter/EventSubscriptionVendor');
function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf('statusBar', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
    }
    if (eventType.lastIndexOf('keyboard', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
    }
    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
      throw new Error('`' + eventType + '` event should be registered via the AppState module');
    }
  }
}
var RCTDeviceEventEmitter = function (_EventEmitter) {
  (0, _inherits2.default)(RCTDeviceEventEmitter, _EventEmitter);
  var _super = _createSuper(RCTDeviceEventEmitter);
  function RCTDeviceEventEmitter() {
    var _this;
    (0, _classCallCheck2.default)(this, RCTDeviceEventEmitter);
    var sharedSubscriber = new EventSubscriptionVendor();
    _this = _super.call(this, sharedSubscriber);
    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }
  (0, _createClass2.default)(RCTDeviceEventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      return (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
      }
    }
  }]);
  return RCTDeviceEventEmitter;
}(EventEmitter);
module.exports = new RCTDeviceEventEmitter();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiRXZlbnRFbWl0dGVyIiwiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IiLCJjaGVja05hdGl2ZUV2ZW50TW9kdWxlIiwiZXZlbnRUeXBlIiwibGFzdEluZGV4T2YiLCJFcnJvciIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsIl9FdmVudEVtaXR0ZXIiLCJfc3VwZXIiLCJfdGhpcyIsInNoYXJlZFN1YnNjcmliZXIiLCJrZXkiLCJ2YWx1ZSIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJjb250ZXh0IiwiX19ERVZfXyIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImVtaXR0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUkNURGV2aWNlRXZlbnRFbWl0dGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcicpO1xuY29uc3QgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IgPSByZXF1aXJlKCcuLi92ZW5kb3IvZW1pdHRlci9FdmVudFN1YnNjcmlwdGlvblZlbmRvcicpO1xuXG5pbXBvcnQgdHlwZSBFbWl0dGVyU3Vic2NyaXB0aW9uIGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0VtaXR0ZXJTdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBjaGVja05hdGl2ZUV2ZW50TW9kdWxlKGV2ZW50VHlwZTogP3N0cmluZykge1xuICBpZiAoZXZlbnRUeXBlKSB7XG4gICAgaWYgKGV2ZW50VHlwZS5sYXN0SW5kZXhPZignc3RhdHVzQmFyJywgMCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2AnICtcbiAgICAgICAgICBldmVudFR5cGUgK1xuICAgICAgICAgICdgIGV2ZW50IHNob3VsZCBiZSByZWdpc3RlcmVkIHZpYSB0aGUgU3RhdHVzQmFySU9TIG1vZHVsZScsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRUeXBlLmxhc3RJbmRleE9mKCdrZXlib2FyZCcsIDApID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgJyArXG4gICAgICAgICAgZXZlbnRUeXBlICtcbiAgICAgICAgICAnYCBldmVudCBzaG91bGQgYmUgcmVnaXN0ZXJlZCB2aWEgdGhlIEtleWJvYXJkIG1vZHVsZScsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZXZlbnRUeXBlID09PSAnYXBwU3RhdGVEaWRDaGFuZ2UnIHx8IGV2ZW50VHlwZSA9PT0gJ21lbW9yeVdhcm5pbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgJyArXG4gICAgICAgICAgZXZlbnRUeXBlICtcbiAgICAgICAgICAnYCBldmVudCBzaG91bGQgYmUgcmVnaXN0ZXJlZCB2aWEgdGhlIEFwcFN0YXRlIG1vZHVsZScsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERlcHJlY2F0ZWQgLSBzdWJjbGFzcyBOYXRpdmVFdmVudEVtaXR0ZXIgdG8gY3JlYXRlIGdyYW51bGFyIGV2ZW50IG1vZHVsZXMgaW5zdGVhZCBvZlxuICogYWRkaW5nIGFsbCBldmVudCBsaXN0ZW5lcnMgZGlyZWN0bHkgdG8gUkNURGV2aWNlRXZlbnRFbWl0dGVyLlxuICovXG5jbGFzcyBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBzaGFyZWRTdWJzY3JpYmVyOiBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBzaGFyZWRTdWJzY3JpYmVyID0gbmV3IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yKCk7XG4gICAgc3VwZXIoc2hhcmVkU3Vic2NyaWJlcik7XG4gICAgdGhpcy5zaGFyZWRTdWJzY3JpYmVyID0gc2hhcmVkU3Vic2NyaWJlcjtcbiAgfVxuXG4gIGFkZExpc3RlbmVyKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyOiBGdW5jdGlvbixcbiAgICBjb250ZXh0OiA/T2JqZWN0LFxuICApOiBFbWl0dGVyU3Vic2NyaXB0aW9uIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgY2hlY2tOYXRpdmVFdmVudE1vZHVsZShldmVudFR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkTGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgY29udGV4dCk7XG4gIH1cblxuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlOiA/c3RyaW5nKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNoZWNrTmF0aXZlRXZlbnRNb2R1bGUoZXZlbnRUeXBlKTtcbiAgICB9XG4gICAgc3VwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50VHlwZSk7XG4gIH1cblxuICByZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uOiBFbWl0dGVyU3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5lbWl0dGVyICE9PSB0aGlzKSB7XG4gICAgICBzdWJzY3JpcHRpb24uZW1pdHRlci5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIucmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKG5ldyBSQ1REZXZpY2VFdmVudEVtaXR0ZXIoKTogUkNURGV2aWNlRXZlbnRFbWl0dGVyKTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLFVBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLDJCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQU8sYUFBQUMsT0FBQSxRQUFBQyx5QkFBQSxHQUFBQyx5QkFBQSxvQkFBQUMscUJBQUEsUUFBQUMsS0FBQSxPQUFBTixnQkFBQSxDQUFBTyxPQUFBLEVBQUFMLE9BQUEsR0FBQU0sTUFBQSxNQUFBTCx5QkFBQSxRQUFBTSxTQUFBLE9BQUFULGdCQUFBLENBQUFPLE9BQUEs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