02cf8ca961ed6df053d03486e27e6092
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const react_native_1 = require("react-native");
const react_1 = __importDefault(require("react"));
const AppGlobals_1 = require("../AppGlobals");
const react_native_elements_1 = require("react-native-elements");
const GlobalStyles_1 = require("../../../blocks/utilities/src/GlobalStyles");
const react_native_fast_image_1 = __importDefault(require("react-native-fast-image"));
const AppConstant_1 = require("../../../framework/src/AppConstant");
const BlockHelper_1 = require("../../../framework/src/BlockHelper");
function ChatMessageView(props) {
  var _a;
  return react_1.default.createElement(react_native_1.View, {
    style: {
      flexDirection: "row",
      marginTop: react_native_elements_1.normalize(20),
      marginLeft: props.isReceiver ? react_native_elements_1.normalize(0) : react_native_elements_1.normalize(50),
      marginRight: props.isReceiver ? react_native_elements_1.normalize(50) : react_native_elements_1.normalize(0)
    }
  }, props.isReceiver && react_1.default.createElement(react_native_fast_image_1.default, {
    style: styles.userImage,
    source: {
      uri: props.profilePic ? props.profilePic : AppConstant_1.defaultProfileImage((_a = props.userName) !== null && _a !== void 0 ? _a : "")
    }
  }), react_1.default.createElement(react_native_1.View, {
    style: {
      flexDirection: "column",
      width: "100%",
      marginLeft: react_native_elements_1.normalize(5)
    }
  }, react_1.default.createElement(react_native_1.View, {
    style: {
      backgroundColor: props.isReceiver ? AppGlobals_1.COLORS.grey : AppGlobals_1.COLORS.blue,
      borderRadius: react_native_elements_1.normalize(8),
      minHeight: react_native_elements_1.normalize(50),
      justifyContent: "center",
      padding: react_native_elements_1.normalize(8)
    }
  }, react_1.default.createElement(react_native_1.View, {
    style: {
      flexDirection: "row"
    }
  }, props.isReceiver ? react_1.default.createElement(react_native_1.Text, {
    style: [styles.commentUserName],
    numberOfLines: 1
  }, "@", props.userName) : react_1.default.createElement(react_native_1.View, {
    style: {
      flex: 1
    }
  }), react_1.default.createElement(react_native_1.View, {
    style: {
      maxWidth: react_native_elements_1.normalize(80),
      backgroundColor: AppGlobals_1.COLORS.black,
      borderRadius: react_native_elements_1.normalize(10),
      paddingLeft: react_native_elements_1.normalize(15),
      paddingRight: react_native_elements_1.normalize(15),
      paddingTop: react_native_elements_1.normalize(3),
      paddingBottom: react_native_elements_1.normalize(3)
    }
  }, react_1.default.createElement(react_native_1.Text, {
    style: {
      color: AppGlobals_1.COLORS.textColor
    },
    numberOfLines: 1
  }, BlockHelper_1.getTimeFromDateString(props.created)))), react_1.default.createElement(react_native_1.Text, {
    style: styles.commentText
  }, props.message))));
}
exports.default = ChatMessageView;
const styles = react_native_1.StyleSheet.create({
  userImage: {
    width: react_native_elements_1.normalize(40),
    height: react_native_elements_1.normalize(40),
    borderRadius: react_native_elements_1.normalize(35),
    borderColor: AppGlobals_1.COLORS.white,
    borderWidth: react_native_elements_1.normalize(2)
  },
  comment: {
    flex: 1,
    fontSize: react_native_elements_1.normalize(12),
    color: AppGlobals_1.COLORS.textColorOffWhite,
    marginLeft: react_native_elements_1.normalize(10),
    alignSelf: "center"
  },
  commentUserName: {
    flex: 1,
    fontSize: react_native_elements_1.normalize(GlobalStyles_1.dimension.commentUsername),
    color: AppGlobals_1.COLORS.textColor,
    textAlign: "left",
    fontFamily: AppGlobals_1.FONTS.bold
  },
  commentText: {
    fontSize: react_native_elements_1.normalize(GlobalStyles_1.dimension.commentText),
    color: AppGlobals_1.COLORS.textColor,
    fontFamily: AppGlobals_1.FONTS.regular,
    marginTop: react_native_elements_1.normalize(8),
    marginBottom: react_native_elements_1.normalize(5)
  },
  rectangleView: {
    flex: 1,
    backgroundColor: AppGlobals_1.COLORS.lightBlack,
    height: react_native_elements_1.normalize(60),
    justifyContent: "center",
    borderRadius: react_native_elements_1.normalize(10)
  },
  image: {
    width: react_native_elements_1.normalize(25),
    height: react_native_elements_1.normalize(25),
    padding: react_native_elements_1.normalize(5),
    marginRight: react_native_elements_1.normalize(5),
    alignSelf: "flex-end"
  },
  viewColumn: {
    flex: 1,
    justifyContent: 'flex-start',
    marginLeft: react_native_elements_1.normalize(10),
    marginRight: react_native_elements_1.normalize(10)
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,