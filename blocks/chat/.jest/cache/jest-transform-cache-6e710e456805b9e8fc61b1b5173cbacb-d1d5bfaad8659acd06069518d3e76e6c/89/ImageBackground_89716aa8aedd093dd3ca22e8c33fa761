0f09c39a58bf0592855c5ab601b7bdb9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _excluded = ["children", "style", "imageStyle", "imageRef"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Image = require('./Image');
var React = require('react');
var StyleSheet = require('../StyleSheet/StyleSheet');
var View = require('../Components/View/View');
var ImageBackground = function (_React$Component) {
  (0, _inherits2.default)(ImageBackground, _React$Component);
  var _super = _createSuper(ImageBackground);
  function ImageBackground() {
    var _this;
    (0, _classCallCheck2.default)(this, ImageBackground);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this._viewRef = null;
    _this._captureRef = function (ref) {
      _this._viewRef = ref;
    };
    return _this;
  }
  (0, _createClass2.default)(ImageBackground, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var viewRef = this._viewRef;
      if (viewRef) {
        viewRef.setNativeProps(props);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        style = _this$props.style,
        imageStyle = _this$props.imageStyle,
        imageRef = _this$props.imageRef,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      return React.createElement(View, {
        accessibilityIgnoresInvertColors: true,
        style: style,
        ref: this._captureRef
      }, React.createElement(Image, (0, _extends2.default)({}, props, {
        style: [StyleSheet.absoluteFill, {
          width: style.width,
          height: style.height
        }, imageStyle],
        ref: imageRef
      })), children);
    }
  }]);
  return ImageBackground;
}(React.Component);
module.exports = ImageBackground;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,