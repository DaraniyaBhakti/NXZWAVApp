31880544f3ff71c92ffd26d4992f3151
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _excluded = ["behavior", "children", "contentContainerStyle", "enabled", "keyboardVerticalOffset", "style"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Keyboard = require('./Keyboard');
var LayoutAnimation = require('../../LayoutAnimation/LayoutAnimation');
var Platform = require('../../Utilities/Platform');
var React = require('react');
var StyleSheet = require('../../StyleSheet/StyleSheet');
var View = require('../View/View');
var KeyboardAvoidingView = function (_React$Component) {
  (0, _inherits2.default)(KeyboardAvoidingView, _React$Component);
  var _super = _createSuper(KeyboardAvoidingView);
  function KeyboardAvoidingView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, KeyboardAvoidingView);
    _this = _super.call(this, props);
    _this._frame = null;
    _this._subscriptions = [];
    _this._initialFrameHeight = 0;
    _this._onKeyboardChange = function (event) {
      if (event == null) {
        _this.setState({
          bottom: 0
        });
        return;
      }
      var duration = event.duration,
        easing = event.easing,
        endCoordinates = event.endCoordinates;
      var height = _this._relativeKeyboardHeight(endCoordinates);
      if (_this.state.bottom === height) {
        return;
      }
      if (duration && easing) {
        LayoutAnimation.configureNext({
          duration: duration > 10 ? duration : 10,
          update: {
            duration: duration > 10 ? duration : 10,
            type: LayoutAnimation.Types[easing] || 'keyboard'
          }
        });
      }
      _this.setState({
        bottom: height
      });
    };
    _this._onLayout = function (event) {
      _this._frame = event.nativeEvent.layout;
      if (!_this._initialFrameHeight) {
        _this._initialFrameHeight = _this._frame.height;
      }
    };
    _this.state = {
      bottom: 0
    };
    _this.viewRef = React.createRef();
    return _this;
  }
  (0, _createClass2.default)(KeyboardAvoidingView, [{
    key: "_relativeKeyboardHeight",
    value: function _relativeKeyboardHeight(keyboardFrame) {
      var frame = this._frame;
      if (!frame || !keyboardFrame) {
        return 0;
      }
      var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;
      return Math.max(frame.y + frame.height - keyboardY, 0);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (Platform.OS === 'ios') {
        this._subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange)];
      } else {
        this._subscriptions = [Keyboard.addListener('keyboardDidHide', this._onKeyboardChange), Keyboard.addListener('keyboardDidShow', this._onKeyboardChange)];
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._subscriptions.forEach(function (subscription) {
        subscription.remove();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        behavior = _this$props.behavior,
        children = _this$props.children,
        contentContainerStyle = _this$props.contentContainerStyle,
        enabled = _this$props.enabled,
        keyboardVerticalOffset = _this$props.keyboardVerticalOffset,
        style = _this$props.style,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var bottomHeight = enabled ? this.state.bottom : 0;
      switch (behavior) {
        case 'height':
          var heightStyle;
          if (this._frame != null && this.state.bottom > 0) {
            heightStyle = {
              height: this._initialFrameHeight - bottomHeight,
              flex: 0
            };
          }
          return React.createElement(View, (0, _extends2.default)({
            ref: this.viewRef,
            style: StyleSheet.compose(style, heightStyle),
            onLayout: this._onLayout
          }, props), children);
        case 'position':
          return React.createElement(View, (0, _extends2.default)({
            ref: this.viewRef,
            style: style,
            onLayout: this._onLayout
          }, props), React.createElement(View, {
            style: StyleSheet.compose(contentContainerStyle, {
              bottom: bottomHeight
            })
          }, children));
        case 'padding':
          return React.createElement(View, (0, _extends2.default)({
            ref: this.viewRef,
            style: StyleSheet.compose(style, {
              paddingBottom: bottomHeight
            }),
            onLayout: this._onLayout
          }, props), children);
        default:
          return React.createElement(View, (0, _extends2.default)({
            ref: this.viewRef,
            onLayout: this._onLayout,
            style: style
          }, props), children);
      }
    }
  }]);
  return KeyboardAvoidingView;
}(React.Component);
KeyboardAvoidingView.defaultProps = {
  enabled: true,
  keyboardVerticalOffset: 0
};
module.exports = KeyboardAvoidingView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,