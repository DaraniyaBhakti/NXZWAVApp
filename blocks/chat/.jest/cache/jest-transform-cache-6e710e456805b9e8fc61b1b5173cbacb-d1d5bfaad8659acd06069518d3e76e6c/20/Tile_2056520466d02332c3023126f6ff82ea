af1d8569f0e6985258c09219670d26c0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tile = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _Image = _interopRequireDefault(require("../image/Image"));
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _FeaturedTile = _interopRequireDefault(require("./FeaturedTile"));
var _excluded = ["featured", "imageSrc", "icon", "title", "children", "caption", "titleStyle", "onPress", "activeOpacity", "overlayContainerStyle", "captionStyle", "iconContainerStyle", "imageContainerStyle", "containerStyle", "contentContainerStyle", "titleNumberOfLines", "ImageComponent", "imageProps"];
var Tile = function Tile(props) {
  var featured = props.featured,
    imageSrc = props.imageSrc,
    icon = props.icon,
    title = props.title,
    children = props.children,
    caption = props.caption,
    titleStyle = props.titleStyle,
    onPress = props.onPress,
    activeOpacity = props.activeOpacity,
    overlayContainerStyle = props.overlayContainerStyle,
    captionStyle = props.captionStyle,
    iconContainerStyle = props.iconContainerStyle,
    imageContainerStyle = props.imageContainerStyle,
    containerStyle = props.containerStyle,
    contentContainerStyle = props.contentContainerStyle,
    titleNumberOfLines = props.titleNumberOfLines,
    ImageComponent = props.ImageComponent,
    imageProps = props.imageProps,
    attributes = (0, _objectWithoutProperties2.default)(props, _excluded);
  var width = props.width,
    _props$height = props.height,
    height = _props$height === void 0 ? width * 0.8 : _props$height;
  if (featured) {
    var featuredProps = {
      title: title,
      icon: icon,
      caption: caption,
      imageSrc: imageSrc,
      onPress: onPress,
      activeOpacity: activeOpacity,
      containerStyle: containerStyle,
      imageContainerStyle: imageContainerStyle,
      overlayContainerStyle: overlayContainerStyle,
      titleStyle: titleStyle,
      captionStyle: captionStyle,
      width: width,
      height: height,
      imageProps: imageProps,
      ImageComponent: ImageComponent
    };
    return _react.default.createElement(_FeaturedTile.default, featuredProps);
  }
  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, attributes, {
    onPress: onPress,
    activeOpacity: activeOpacity,
    style: _reactNative.StyleSheet.flatten([{
      width: width,
      height: height
    }, containerStyle && containerStyle])
  }), _react.default.createElement(ImageComponent, (0, _extends2.default)({
    resizeMode: "cover",
    source: imageSrc,
    containerStyle: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle]),
    style: (0, _extends2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
      alignItems: 'center',
      justifyContent: 'center'
    })
  }, imageProps), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle])
  }, icon && _react.default.createElement(_Icon.default, icon))), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.contentContainer, contentContainerStyle && contentContainerStyle])
  }, _react.default.createElement(_Text.default, {
    testID: "tileTitle",
    h4: true,
    style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle]),
    numberOfLines: titleNumberOfLines
  }, title), children));
};
exports.Tile = Tile;
Tile.propTypes = {
  title: _propTypes.default.string,
  icon: _propTypes.default.object,
  caption: _propTypes.default.node,
  imageSrc: _reactNative.Image.propTypes.source,
  onPress: _propTypes.default.func,
  activeOpacity: _propTypes.default.number,
  containerStyle: _config.ViewPropTypes.style,
  imageContainerStyle: _config.ViewPropTypes.style,
  iconContainerStyle: _config.ViewPropTypes.style,
  overlayContainerStyle: _config.ViewPropTypes.style,
  titleStyle: _config.TextPropTypes.style,
  captionStyle: _config.TextPropTypes.style,
  width: _propTypes.default.number,
  height: _propTypes.default.number,
  featured: _propTypes.default.bool,
  children: _propTypes.default.node,
  contentContainerStyle: _config.ViewPropTypes.style,
  titleNumberOfLines: _propTypes.default.number,
  imageProps: _propTypes.default.object,
  ImageComponent: _propTypes.default.elementType
};
Tile.defaultProps = {
  width: _reactNative.Dimensions.get('window').width,
  ImageComponent: _Image.default,
  imageProps: {}
};
var styles = _reactNative.StyleSheet.create({
  imageContainer: {
    flex: 2
  },
  text: {
    backgroundColor: 'rgba(0,0,0,0)',
    marginBottom: 5
  },
  contentContainer: {
    paddingTop: 15,
    paddingBottom: 5,
    paddingLeft: 15,
    paddingRight: 15
  },
  iconContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center'
  }
});
var _default = (0, _config.withTheme)(Tile, 'Tile');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,