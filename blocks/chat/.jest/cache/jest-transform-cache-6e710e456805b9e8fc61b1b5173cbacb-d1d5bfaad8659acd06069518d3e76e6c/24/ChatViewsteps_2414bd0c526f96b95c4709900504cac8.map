{"version":3,"file":"/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/ChatView.steps.tsx","sources":["/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/ChatView.steps.tsx"],"names":[],"mappings":"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","sourcesContent":["// import { defineFeature, loadFeature } from \"jest-cucumber\";\n// import { shallow, ShallowWrapper } from \"enzyme\";\n// import DocumentPicker, { DocumentPickerResponse } from 'react-native-document-picker';\n\n// import * as helpersChatView from \"../../../../framework/src/Helpers\";\n// import { runEngine } from \"../../../../framework/src/RunEngine\";\n\n// import React from \"react\";\n// import ChatView from \"../../src/ChatView\";\n// import { IMessage } from \"../../src/ChatViewController\";\n// import { Message } from \"../../../../framework/src/Message\";\n// import MessageEnum, { getName } from \"../../../../framework/src/Messages/MessageEnum\";\n// import { act } from \"react-dom/test-utils\";\n\n// const screenPropsChatView = {\n//   navigation: {\n//     navigate: jest.fn(),\n//     setOptions: jest.fn(),\n//     push: jest.fn(),\n//     addListener: jest.fn().mockImplementation((event, callback) => {\n//       callback();\n//     }),\n//     goBack: jest.fn(),\n//     state: {\n//       params: {\n//         receiverUser: \"ReceiveUser\",\n//         userID: \"7\",\n//         userName: \"name\",\n//         userPic: \"\",\n//         userPoints: \"12\",\n//         userRole: \"designer\"\n//       },\n//     },\n//   },\n//   id: \"ChatView\",\n// };\n\n// const featureChatView = loadFeature(\"./__tests__/features/ChatView-scenario.feature\");\n\n// const messagesChatView: IMessage[] = [\n//   {\n//     id: \"743\",\n//     type: \"conversation\",\n//     attributes: {\n//       id: 743,\n//       message: \"test_message\",\n//       user_profile_info_id: 320,\n//       conversation_id: 237,\n//       created_at: \"2023-05-12T14:04:40.470Z\",\n//       updated_at: \"2023-05-12T14:04:40.544Z\",\n//       is_mark_read: false,\n//       profile_image: null,\n//       user_name: null\n//     }\n//   },\n//   {\n//     id: \"212\",\n//     type: \"conversation\",\n//     attributes: {\n//       id: 212,\n//       message: \"test_message\",\n//       user_profile_info_id: 320,\n//       conversation_id: 237,\n//       created_at: \"2023-05-11T12:03:12.560Z\",\n//       updated_at: \"2023-05-11T12:03:12.564Z\",\n//       is_mark_read: true,\n//       profile_image: null,\n//       user_name: null\n//     }\n//   },\n//   {\n//     id: \"210\",\n//     type: \"conversation\",\n//     attributes: {\n//       id: 210,\n//       message: \"test_message\",\n//       user_profile_info_id: 319,\n//       conversation_id: 237,\n//       created_at: \"2023-05-11T11:58:21.959Z\",\n//       updated_at: \"2023-05-11T11:58:21.967Z\",\n//       is_mark_read: true,\n//       profile_image: null,\n//       user_name: \"Prof. Kieth Crona\"\n//     }\n//   },\n// ]\n\n// const EXAMPLE_CHAT_RESPONSE_CHAT_VIEW = {\n//   data: {\n//     id: \"17\",\n//     type: \"chat\",\n//     attributes: {\n//       id: 17,\n//       name: \"Duis est moll\",\n//       accounts_chats: [\n//         {\n//           id: \"19\",\n//           type: \"accounts_chats\",\n//           attributes: {\n//             account_id: 2,\n//             muted: true,\n//             unread_count: 0,\n//           },\n//         },\n//       ],\n//       messages: [],\n//     },\n//     relationships: {\n//       accounts: {\n//         data: [\n//           {\n//             id: \"2\",\n//             type: \"account\",\n//           },\n//         ],\n//       },\n//     },\n//   },\n// };\n\n// defineFeature(featureChatView, (test) => {\n//   beforeEach(() => {\n//     jest.resetModules();\n//     jest.clearAllMocks();\n//     jest.doMock(\"react-native\", () => ({ Platform: { OS: \"ios\" } }));\n//     jest.spyOn(helpersChatView, \"getOS\").mockImplementation(() => \"ios\");\n//     jest.spyOn(DocumentPicker, 'pickSingle').mockImplementation(() => {\n//       const response: DocumentPickerResponse = { name: \"testFile\", uri: 'testUri', size: 100, fileCopyUri: \"testCopyUri\", type: \"testFileType\" };\n//       return Promise.resolve(response);\n//     });\n//     jest.spyOn(runEngine, \"sendMessage\");\n//     jest.useFakeTimers();\n//   });\n\n//   test(\"User navigates to ChatView\", ({ given, when, then }) => {\n//     let chatViewWrapper: ShallowWrapper;\n//     let instanceChatView: ChatView;\n\n//     given(\"I am a User loading ChatView\", () => {\n//       chatViewWrapper = shallow(<ChatView {...screenPropsChatView} />);\n//     });\n\n//     when(\"I navigate to ChatView\", () => {\n//       instanceChatView = chatViewWrapper.instance() as ChatView;\n\n//       instanceChatView.state = {\n//         // Customizable Area Start\n//         token: \"\",\n//         chatId: 3,\n//         message: \"\",\n//         accountId: -1,\n//         accountIdInput: \"\",\n//         chatData: null,\n//         isVisibleModal: false,\n//         isVisiblePreviewModal: false,\n//         imageUrl: \"\",\n//         docRes: null,\n//         keyboardHeight: 0,\n//         muted: null,\n//         messageList: [],\n//         receiverUserID: \"12\",\n//         receiverUserName: \"RName\",\n//         receiverUserRole: \"RRole\",\n//         receiverUserPic: \"\",\n//         receiverUserPoints: \"12\",\n//         // Customizable Area End\n//       };\n//       instanceChatView.loginUserProfileId = \"9\"\n\n//       instanceChatView.addUserToChat(\"\", 3);\n//       instanceChatView.addUserToChat(\"2\", 3);\n//     });\n\n//     then(\"ChatView will load\", () => {\n\n//       let btnBackChatView = chatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnBack\"\n//       );\n//       btnBackChatView.simulate(\"press\");\n\n//       let btnSendMessageChatView = chatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnSendMessage\"\n//       );\n//       btnSendMessageChatView.simulate(\"press\");\n\n//       instanceChatView.setState({ messageList: messagesChatView })\n//       let itemChatView = {\n//         item: {\n//           id: \"743\",\n//           type: \"conversation\",\n//           attributes: {\n//             id: 743,\n//             message: \"test_message\",\n//             user_profile_info_id: 320,\n//             conversation_id: 237,\n//             created_at: \"2023-05-12T14:04:40.470Z\",\n//             updated_at: \"2023-05-12T14:04:40.544Z\",\n//             is_mark_read: false,\n//             profile_image: null,\n//             user_name: null\n//           }\n//         }\n//       };\n//       let flatListChatView = chatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"flatList\"\n//       );\n//       let rowItemChatView = flatListChatView\n//         .renderProp(\"renderItem\")(itemChatView)\n\n//       instanceChatView.loginUserProfileId = \"320\"\n//       let rowItemChatView1 = flatListChatView\n//         .renderProp(\"renderItem\")(itemChatView)\n\n//       instanceChatView.refreshConversationListScreen();\n\n//       instanceChatView.chatTypeDM = false;\n//       instanceChatView.getReadMessage();\n\n//       const msgGetConversationsChatView = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n//       msgGetConversationsChatView.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         msgGetConversationsChatView.messageId\n//       );\n//       msgGetConversationsChatView.addData(\n//         getName(MessageEnum.RestAPIResponceSuccessMessage),\n//         {\n//           data: [\n//             {\n//               id: \"743\",\n//               type: \"conversation\",\n//               attributes: {\n//                 id: 743,\n//                 message: \"test_message\",\n//                 user_profile_info_id: 320,\n//                 conversation_id: 237,\n//                 created_at: \"2023-05-12T14:04:40.470Z\",\n//                 updated_at: \"2023-05-12T14:04:40.544Z\",\n//                 is_mark_read: false,\n//                 profile_image: null,\n//                 user_name: null\n//               }\n//             },]\n//         })\n//       instanceChatView.conversationID = \"\"\n//       instanceChatView.getChatListApiCallId = msgGetConversationsChatView.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgGetConversationsChatView);\n\n//       instanceChatView.sendMessageApiCallId = msgGetConversationsChatView.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgGetConversationsChatView);\n\n//       instanceChatView.addUserToChatApiCallId = msgGetConversationsChatView.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgGetConversationsChatView);\n\n//       instanceChatView.putReadMessageApiCallId = msgGetConversationsChatView.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgGetConversationsChatView);\n\n//       instanceChatView.leaveChatApiCallId = msgGetConversationsChatView.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgGetConversationsChatView);\n\n//       const msgGetSessionChatView = new Message(\n//         getName(MessageEnum.SessionResponseMessage)\n//       );\n//       msgGetSessionChatView.addData(\n//         getName(MessageEnum.SessionResponseToken),\n//         \"token\"\n//       );\n//       msgGetSessionChatView.addData(\n//         getName(MessageEnum.SessionResponseData),\n//         //\"{data: { id: 1},meta: {id: 2}}\"\n//         {\n//           data: {\n//             id: \"1\",\n//             type: \"apple_account\",\n//           },\n//           meta: {\n//             id: 1,\n//           }\n//         }\n//       );\n//       runEngine.sendMessage(\"Unit Test\", msgGetSessionChatView);\n\n//       const msgGetApiErrorChatView = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n//       msgGetApiErrorChatView.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         msgGetApiErrorChatView.messageId\n//       );\n//       msgGetApiErrorChatView.addData(getName(MessageEnum.RestAPIResponceSuccessMessage), {\n//         errors: [\"Signature verification failed\"],\n//       });\n//       msgGetApiErrorChatView.addData(getName(MessageEnum.RestAPIResponceErrorMessage), \n//       \"Signature verification failed\"\n//       );\n      \n//       instanceChatView.addUserToChatApiCallId = msgGetApiErrorChatView.id\n//       runEngine.sendMessage(\"Unit Test\", msgGetApiErrorChatView);\n\n\n//     });\n\n//     when(\"dm type message\", () => {\n//       instanceChatView.chatTypeDM = true;\n//       instanceChatView.isStringNullOrBlank(\"\")\n//       instanceChatView.isStringNullOrBlank(\"string\")\n//     });\n\n//     then(\"do action for dm Type\", () => {\n//       instanceChatView.getReadMessage();\n//     });\n\n//     when(\"pm type message\", () => {\n//       instanceChatView.chatTypeDM = false;\n//       const msgGetApiErrorChatView = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n//       msgGetApiErrorChatView.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         msgGetApiErrorChatView.messageId\n//       );\n//       msgGetApiErrorChatView.addData(getName(MessageEnum.RestAPIResponceSuccessMessage), {\n//         errors: [\"Signature verification failed\"],\n//       });\n      \n//       instanceChatView.addUserToChatApiCallId = msgGetApiErrorChatView.id\n//       runEngine.sendMessage(\"Unit Test\", msgGetApiErrorChatView);\n      \n//     });\n\n//     then(\"do action for pm Type\", () => {\n//       instanceChatView.getReadMessage();\n\n//       const messageInput = chatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"inputMessage\"\n//       );\n//       messageInput.simulate(\"changeText\", \"Hi\");\n//       expect(instanceChatView.state.message).toEqual(\"Hi\")\n//     });\n\n//     then(\"I can leave the screen\", () => {\n\n//       const msgTokenChatView = new Message(getName(MessageEnum.SessionResponseMessage));\n//       msgTokenChatView.addData(getName(MessageEnum.SessionResponseToken), \"TOKEN\");\n//       runEngine.sendMessage(\"Unit Test\", msgTokenChatView);\n\n//       const msgValidationAPI = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n//       msgValidationAPI.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         msgValidationAPI.messageId\n//       );\n\n//       msgValidationAPI.addData(\n//         getName(MessageEnum.RestAPIResponceSuccessMessage),\n//         {\n//           data: EXAMPLE_CHAT_RESPONSE_CHAT_VIEW,\n//           meta: {\n//             message: \"Chat data\",\n//           },\n//         }\n//       );\n\n//       instanceChatView.addUserToChatApiCallId = msgValidationAPI.messageId;\n//       instanceChatView.leaveChatApiCallId = msgValidationAPI.messageId;\n//       instanceChatView.sendMessageApiCallId = msgValidationAPI.messageId;\n//       instanceChatView.updateReadMessageApiCallId = msgValidationAPI.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgValidationAPI);\n\n//       instanceChatView.changeNotificationStatus()\n//       instanceChatView.setState({ muted: true })\n//       instanceChatView.changeNotificationStatus()\n\n//       instanceChatView.getReceiverData()\n//       act(() => {\n//         jest.runOnlyPendingTimers();\n//       });\n//     });\n//   });\n// });\n"]}