df09f812a610f6954e999e70313a662b
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TurboModuleRegistry = _interopRequireWildcard(require("../../TurboModule/TurboModuleRegistry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _default = TurboModuleRegistry.get('DialogManagerAndroid');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiTmF0aXZlRGlhbG9nTWFuYWdlckFuZHJvaWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtUdXJib01vZHVsZX0gZnJvbSAnLi4vLi4vVHVyYm9Nb2R1bGUvUkNURXhwb3J0JztcbmltcG9ydCAqIGFzIFR1cmJvTW9kdWxlUmVnaXN0cnkgZnJvbSAnLi4vLi4vVHVyYm9Nb2R1bGUvVHVyYm9Nb2R1bGVSZWdpc3RyeSc7XG5cbi8qICdidXR0b25DbGlja2VkJyB8ICdkaXNtaXNzZWQnICovXG50eXBlIERpYWxvZ0FjdGlvbiA9IHN0cmluZztcbi8qXG4gIGJ1dHRvblBvc2l0aXZlID0gLTEsXG4gIGJ1dHRvbk5lZ2F0aXZlID0gLTIsXG4gIGJ1dHRvbk5ldXRyYWwgPSAtM1xuKi9cbnR5cGUgRGlhbG9nQnV0dG9uS2V5ID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgRGlhbG9nT3B0aW9ucyA9IHt8XG4gIHRpdGxlPzogc3RyaW5nLFxuICBtZXNzYWdlPzogc3RyaW5nLFxuICBidXR0b25Qb3NpdGl2ZT86IHN0cmluZyxcbiAgYnV0dG9uTmVnYXRpdmU/OiBzdHJpbmcsXG4gIGJ1dHRvbk5ldXRyYWw/OiBzdHJpbmcsXG4gIGl0ZW1zPzogQXJyYXk8c3RyaW5nPixcbiAgY2FuY2VsYWJsZT86IGJvb2xlYW4sXG58fTtcblxuZXhwb3J0IGludGVyZmFjZSBTcGVjIGV4dGVuZHMgVHVyYm9Nb2R1bGUge1xuICArZ2V0Q29uc3RhbnRzOiAoKSA9PiB7fFxuICAgICtidXR0b25DbGlja2VkOiBEaWFsb2dBY3Rpb24sXG4gICAgK2Rpc21pc3NlZDogRGlhbG9nQWN0aW9uLFxuICAgICtidXR0b25Qb3NpdGl2ZTogRGlhbG9nQnV0dG9uS2V5LFxuICAgICtidXR0b25OZWdhdGl2ZTogRGlhbG9nQnV0dG9uS2V5LFxuICAgICtidXR0b25OZXV0cmFsOiBEaWFsb2dCdXR0b25LZXksXG4gIHx9O1xuICArc2hvd0FsZXJ0OiAoXG4gICAgY29uZmlnOiBEaWFsb2dPcHRpb25zLFxuICAgIG9uRXJyb3I6IChlcnJvcjogc3RyaW5nKSA9PiB2b2lkLFxuICAgIG9uQWN0aW9uOiAoYWN0aW9uOiBEaWFsb2dBY3Rpb24sIGJ1dHRvbktleT86IERpYWxvZ0J1dHRvbktleSkgPT4gdm9pZCxcbiAgKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoVHVyYm9Nb2R1bGVSZWdpc3RyeS5nZXQ8U3BlYz4oJ0RpYWxvZ01hbmFnZXJBbmRyb2lkJyk6ID9TcGVjKTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQ0EsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsT0FBQTtBQUdiLElBQUFDLG1CQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBNkUsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFULE9BQUEsRUFBQVMsR0FBQSxVQUFBRSxLQUFBLEdBQUFQLHdCQUFBLENBQUFDLFdBQUEsT0FBQU0sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUgsR0FBQSxZQUFBRSxLQUFBLENBQUFFLEdBQUEsQ0FBQUosR0FBQSxTQUFBSyxNQUFBLFdBQUFDLHFCQUFBLEdBQUFuQixNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBb0Isd0JBQUEsV0FBQUMsR0FBQSxJQUFBUixHQUFBLFFBQUFRLEdBQUEsa0JBQUFyQixNQUFBLENBQUFzQixTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBWCxHQUFBLEVBQUFRLEdBQUEsU0FBQUksSUFBQSxHQUFBTixxQkFBQSxHQUFBbkIsTUFBQSxDQUFBb0Isd0JBQUEsQ0FBQVAsR0FBQSxFQUFBUSxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBUixHQUFBLElBQUFRLElBQUEsQ0FBQUMsR0FBQSxLQUFBMUIsTUFBQSxDQUFBQyxjQUFBLENBQUFpQixNQUFBLEVBQUFHLEdBQUEsRUFBQUksSUFBQSxZQUFBUCxNQUFBLENBQUFHLEdBQUEsSUFBQVIsR0FBQSxDQUFBUSxHQUFBLFNBQUFILE1BQUEsQ0FBQWQsT0FBQSxHQUFBUyxHQUFBLE1BQUFFLEtBQUEsSUFBQUEsS0FBQSxDQUFBVyxHQUFBLENBQUFiLEdBQUEsRUFBQUssTUFBQSxZQUFBQSxNQUFBO0FBQUEsSUFBQVMsUUFBQSxHQW1DN0R0QixtQkFBbUIsQ0FBQ1ksR0FBRyxDQUFPLHNCQUFzQixDQUFDO0FBQUFmLE9BQUEsQ0FBQUUsT0FBQSxHQUFBdUIsUUFBQSJ9