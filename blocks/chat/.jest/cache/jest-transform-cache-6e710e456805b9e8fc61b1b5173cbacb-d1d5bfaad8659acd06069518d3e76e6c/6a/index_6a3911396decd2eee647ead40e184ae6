dd9bbf03578d6d00995d05b625272d37
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function convertErrors(errs) {
  if (!errs) {
    return null;
  }
  return Array.isArray(errs) ? errs.filter(function (e) {
    return !!e;
  }) : [errs];
}
function checkValidInput(usedKey, value) {
  var isValuePassed = arguments.length > 1;
  if (typeof usedKey !== 'string') {
    console.warn("[AsyncStorageLegacy] Using \"" + typeof usedKey + "\" type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\nKey passed: " + usedKey + "\n");
  }
  if (isValuePassed && typeof value !== 'string') {
    if (value == null) {
      throw new Error("[AsyncStorageLegacy] Passing \"null\" or \"undefined\" as value is not supported. If you need to remove a value, use \".removeSingle\" method instead.\nUsed key: " + usedKey + "\n");
    } else {
      console.warn("[AsyncStorageLegacy] The value for key \"" + usedKey + "\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\nPassed value: " + value + "\nPassed key: " + usedKey + "\n");
    }
  }
}
var LegacyAsyncStorage = function () {
  function LegacyAsyncStorage() {
    (0, _classCallCheck2.default)(this, LegacyAsyncStorage);
    _defineProperty(this, "_asyncStorageNativeModule", void 0);
    this._asyncStorageNativeModule = _reactNative.NativeModules.RNC_AsyncSQLiteDBStorage || _reactNative.NativeModules.RNCAsyncStorage;
    if (!this._asyncStorageNativeModule) {
      throw new Error('[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.');
    }
  }
  (0, _createClass2.default)(LegacyAsyncStorage, [{
    key: "getSingle",
    value: function getSingle(key, _) {
      var _this = this;
      return _regenerator.default.async(function getSingle$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            checkValidInput(key);
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              _this._asyncStorageNativeModule.multiGet([key], function (errors, result) {
                var value = result && result[0] && result[0][1] || null;
                var errs = convertErrors(errors);
                if (errs && errs.length) {
                  reject(errs[0]);
                } else {
                  resolve(value);
                }
              });
            }));
          case 2:
          case "end":
            return _context.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "setSingle",
    value: function setSingle(key, value, _) {
      var _this2 = this;
      return _regenerator.default.async(function setSingle$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            checkValidInput(key, value);
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              _this2._asyncStorageNativeModule.multiSet([[key, value]], function (errors) {
                var errs = convertErrors(errors);
                if (errs && errs.length) {
                  reject(errs[0]);
                } else {
                  resolve();
                }
              });
            }));
          case 2:
          case "end":
            return _context2.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getMany",
    value: function getMany(keys, _) {
      var _this3 = this;
      return _regenerator.default.async(function getMany$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            keys.forEach(function (k) {
              return checkValidInput(k);
            });
            return _context3.abrupt("return", new Promise(function (resolve, reject) {
              _this3._asyncStorageNativeModule.multiGet(keys, function (errors, result) {
                var value = result.reduce(function (acc, current) {
                  var key = current[0];
                  var val = current[1];
                  return _objectSpread({}, acc, (0, _defineProperty3.default)({}, key, val));
                }, {});
                var errs = convertErrors(errors);
                if (errs && errs.length) {
                  reject(errs[0]);
                } else {
                  resolve(value);
                }
              });
            }));
          case 2:
          case "end":
            return _context3.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "setMany",
    value: function setMany(values, _) {
      var _this4 = this;
      return _regenerator.default.async(function setMany$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            values.forEach(function (keyValue) {
              Object.keys(keyValue).forEach(function (key) {
                checkValidInput(key, keyValue[key]);
              });
            });
            return _context4.abrupt("return", new Promise(function (resolve, reject) {
              var valuesArray = values.map(function (entry) {
                var key = Object.keys(entry)[0];
                var value = entry[key];
                return [key, value];
              });
              _this4._asyncStorageNativeModule.multiSet(valuesArray, function (errors) {
                var errs = convertErrors(errors);
                if (errs && errs.length) {
                  reject(errs[0]);
                } else {
                  resolve();
                }
              });
            }));
          case 2:
          case "end":
            return _context4.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "removeSingle",
    value: function removeSingle(key, _) {
      var _this5 = this;
      return _regenerator.default.async(function removeSingle$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            checkValidInput(key);
            return _context5.abrupt("return", new Promise(function (resolve, reject) {
              _this5._asyncStorageNativeModule.multiRemove([key], function (errors) {
                var errs = convertErrors(errors);
                if (errs && errs.length) {
                  reject(errs[0]);
                } else {
                  resolve();
                }
              });
            }));
          case 2:
          case "end":
            return _context5.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "removeMany",
    value: function removeMany(keys, _) {
      var _this6 = this;
      return _regenerator.default.async(function removeMany$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            keys.forEach(function (k) {
              return checkValidInput(k);
            });
            return _context6.abrupt("return", new Promise(function (resolve, reject) {
              _this6._asyncStorageNativeModule.multiRemove(keys, function (errors) {
                var errs = convertErrors(errors);
                if (errs && errs.length) {
                  reject(errs[0]);
                } else {
                  resolve();
                }
              });
            }));
          case 2:
          case "end":
            return _context6.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getKeys",
    value: function getKeys(_) {
      var _this7 = this;
      return _regenerator.default.async(function getKeys$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", new Promise(function (resolve, reject) {
              _this7._asyncStorageNativeModule.getAllKeys(function (errors, keys) {
                var err = convertErrors(errors);
                if (err && err.length) {
                  reject(err[0]);
                } else {
                  resolve(keys);
                }
              });
            }));
          case 1:
          case "end":
            return _context7.stop();
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "dropStorage",
    value: function dropStorage(_) {
      var _this8 = this;
      return _regenerator.default.async(function dropStorage$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            return _context8.abrupt("return", new Promise(function (resolve, reject) {
              _this8._asyncStorageNativeModule.clear(function (error) {
                var err = convertErrors(error);
                if (err) {
                  reject(err);
                } else {
                  resolve();
                }
              });
            }));
          case 1:
          case "end":
            return _context8.stop();
        }
      }, null, null, null, Promise);
    }
  }]);
  return LegacyAsyncStorage;
}();
exports.default = LegacyAsyncStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,