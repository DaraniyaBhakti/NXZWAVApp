03bc6ac2d6dad502a07dd4a9f79382cb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Input = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _config = require("../config");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _excluded = ["containerStyle", "disabled", "disabledInputStyle", "inputContainerStyle", "leftIcon", "leftIconContainerStyle", "rightIcon", "rightIconContainerStyle", "inputComponent", "inputStyle", "errorProps", "errorStyle", "errorMessage", "label", "labelStyle", "labelProps", "theme"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_reactNative.Text, content, (0, _extends2.default)({}, defaultProps, {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};
var Input = function (_React$Component) {
  (0, _inherits2.default)(Input, _React$Component);
  var _super = _createSuper(Input);
  function Input() {
    var _this;
    (0, _classCallCheck2.default)(this, Input);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.shakeAnimationValue = new _reactNative.Animated.Value(0);
    _this.shake = function () {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
        shakeAnimationValue = _assertThisInitialize.shakeAnimationValue;
      shakeAnimationValue.setValue(0);
      _reactNative.Animated.timing(shakeAnimationValue, {
        duration: 375,
        toValue: 3,
        ease: _reactNative.Easing.bounce
      }).start();
    };
    return _this;
  }
  (0, _createClass2.default)(Input, [{
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.input.clear();
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this.input.isFocused();
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(nativeProps) {
      this.input.setNativeProps(nativeProps);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        containerStyle = _this$props.containerStyle,
        disabled = _this$props.disabled,
        disabledInputStyle = _this$props.disabledInputStyle,
        inputContainerStyle = _this$props.inputContainerStyle,
        leftIcon = _this$props.leftIcon,
        leftIconContainerStyle = _this$props.leftIconContainerStyle,
        rightIcon = _this$props.rightIcon,
        rightIconContainerStyle = _this$props.rightIconContainerStyle,
        _this$props$inputComp = _this$props.inputComponent,
        InputComponent = _this$props$inputComp === void 0 ? _reactNative.TextInput : _this$props$inputComp,
        inputStyle = _this$props.inputStyle,
        errorProps = _this$props.errorProps,
        errorStyle = _this$props.errorStyle,
        errorMessage = _this$props.errorMessage,
        label = _this$props.label,
        labelStyle = _this$props.labelStyle,
        labelProps = _this$props.labelProps,
        theme = _this$props.theme,
        attributes = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var translateX = this.shakeAnimationValue.interpolate({
        inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
        outputRange: [0, -15, 0, 15, 0, -15, 0]
      });
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, renderText(label, (0, _extends2.default)({
        style: labelStyle
      }, labelProps), styles.label(theme)), _react.default.createElement(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([styles.inputContainer(theme), inputContainerStyle, {
          transform: [{
            translateX: translateX
          }]
        }])
      }, leftIcon && _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.iconContainer, leftIconContainerStyle])
      }, (0, _helpers.renderNode)(_Icon.default, leftIcon)), _react.default.createElement(InputComponent, (0, _extends2.default)({
        testID: "RNE__Input__text-input",
        underlineColorAndroid: "transparent",
        editable: !disabled
      }, (0, _helpers.patchWebProps)(attributes), {
        ref: function ref(_ref) {
          _this2.input = _ref;
        },
        style: _reactNative.StyleSheet.flatten([styles.input, inputStyle, disabled && styles.disabledInput, disabled && disabledInputStyle])
      })), rightIcon && _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.iconContainer, rightIconContainerStyle])
      }, (0, _helpers.renderNode)(_Icon.default, rightIcon))), !!errorMessage && _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, errorProps, {
        style: _reactNative.StyleSheet.flatten([styles.error(theme), errorStyle && errorStyle])
      }), errorMessage));
    }
  }]);
  return Input;
}(_react.default.Component);
exports.Input = Input;
Input.propTypes = {
  containerStyle: _config.ViewPropTypes.style,
  disabled: _propTypes.default.bool,
  disabledInputStyle: _config.TextPropTypes.style,
  inputContainerStyle: _config.ViewPropTypes.style,
  leftIcon: _helpers.nodeType,
  leftIconContainerStyle: _config.ViewPropTypes.style,
  rightIcon: _helpers.nodeType,
  rightIconContainerStyle: _config.ViewPropTypes.style,
  inputStyle: _config.TextPropTypes.style,
  inputComponent: _propTypes.default.elementType,
  errorProps: _propTypes.default.object,
  errorStyle: _config.TextPropTypes.style,
  errorMessage: _propTypes.default.string,
  label: _propTypes.default.node,
  labelStyle: _config.TextPropTypes.style,
  labelProps: _propTypes.default.object,
  theme: _propTypes.default.object
};
var styles = {
  container: {
    width: '100%',
    paddingHorizontal: 10
  },
  disabledInput: {
    opacity: 0.5
  },
  inputContainer: function inputContainer(theme) {
    return {
      flexDirection: 'row',
      borderBottomWidth: 1,
      alignItems: 'center',
      borderColor: theme.colors.grey3
    };
  },
  iconContainer: {
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 15
  },
  input: {
    alignSelf: 'center',
    color: 'black',
    fontSize: 18,
    flex: 1,
    minHeight: 40
  },
  error: function error(theme) {
    return {
      margin: 5,
      fontSize: 12,
      color: theme.colors.error
    };
  },
  label: function label(theme) {
    return (0, _extends2.default)({
      fontSize: 16,
      color: theme.colors.grey3
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.bold),
      default: {
        fontWeight: 'bold'
      }
    }));
  }
};
var _default = (0, _config.withTheme)(Input, 'Input');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,