426ea05803f5566fdff7e27fcc76a714
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var PixelRatio = require('../Utilities/PixelRatio');
var Platform = require('../Utilities/Platform');
var assetPathUtils = require('./assetPathUtils');
var invariant = require('invariant');
function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}
var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }
  (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }
      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: "pickScale",
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }
      return scales[scales.length - 1] || 1;
    }
  }]);
  return AssetSourceResolver;
}();
module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiUGl4ZWxSYXRpbyIsIlBsYXRmb3JtIiwiYXNzZXRQYXRoVXRpbHMiLCJpbnZhcmlhbnQiLCJnZXRTY2FsZWRBc3NldFBhdGgiLCJhc3NldCIsInNjYWxlIiwiQXNzZXRTb3VyY2VSZXNvbHZlciIsInBpY2tTY2FsZSIsInNjYWxlcyIsImdldCIsInNjYWxlU3VmZml4IiwiYXNzZXREaXIiLCJnZXRCYXNlUGF0aCIsIm5hbWUiLCJ0eXBlIiwiZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlciIsImRyYXdibGVGb2xkZXIiLCJnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lIiwiZmlsZU5hbWUiLCJnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyIiwic2VydmVyVXJsIiwianNidW5kbGVVcmwiLCJkZWZhdWx0Iiwia2V5IiwidmFsdWUiLCJpc0xvYWRlZEZyb21TZXJ2ZXIiLCJpc0xvYWRlZEZyb21GaWxlU3lzdGVtIiwic3RhcnRzV2l0aCIsImRlZmF1bHRBc3NldCIsImFzc2V0U2VydmVyVVJMIiwiT1MiLCJkcmF3YWJsZUZvbGRlckluQnVuZGxlIiwicmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlIiwic2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlIiwiZnJvbVNvdXJjZSIsImhhc2giLCJzY2FsZWRBc3NldFBhdGgiLCJwYXRoIiwic291cmNlIiwiX19wYWNrYWdlcl9hc3NldCIsIndpZHRoIiwiaGVpZ2h0IiwidXJpIiwiZGV2aWNlU2NhbGUiLCJpIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFzc2V0U291cmNlUmVzb2x2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCB0eXBlIFJlc29sdmVkQXNzZXRTb3VyY2UgPSB7fFxuICArX19wYWNrYWdlcl9hc3NldDogYm9vbGVhbixcbiAgK3dpZHRoOiA/bnVtYmVyLFxuICAraGVpZ2h0OiA/bnVtYmVyLFxuICArdXJpOiBzdHJpbmcsXG4gICtzY2FsZTogbnVtYmVyLFxufH07XG5cbmltcG9ydCB0eXBlIHtQYWNrYWdlckFzc2V0fSBmcm9tICcuL0Fzc2V0UmVnaXN0cnknO1xuXG5jb25zdCBQaXhlbFJhdGlvID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BpeGVsUmF0aW8nKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5cbmNvbnN0IGFzc2V0UGF0aFV0aWxzID0gcmVxdWlyZSgnLi9hc3NldFBhdGhVdGlscycpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggbGlrZSAnYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlZEFzc2V0UGF0aChhc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IHNjYWxlID0gQXNzZXRTb3VyY2VSZXNvbHZlci5waWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgY29uc3Qgc2NhbGVTdWZmaXggPSBzY2FsZSA9PT0gMSA/ICcnIDogJ0AnICsgc2NhbGUgKyAneCc7XG4gIGNvbnN0IGFzc2V0RGlyID0gYXNzZXRQYXRoVXRpbHMuZ2V0QmFzZVBhdGgoYXNzZXQpO1xuICByZXR1cm4gYXNzZXREaXIgKyAnLycgKyBhc3NldC5uYW1lICsgc2NhbGVTdWZmaXggKyAnLicgKyBhc3NldC50eXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIoYXNzZXQpOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IEFzc2V0U291cmNlUmVzb2x2ZXIucGlja1NjYWxlKGFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSk7XG4gIGNvbnN0IGRyYXdibGVGb2xkZXIgPSBhc3NldFBhdGhVdGlscy5nZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lKFxuICAgIGFzc2V0LFxuICAgIHNjYWxlLFxuICApO1xuICBjb25zdCBmaWxlTmFtZSA9IGFzc2V0UGF0aFV0aWxzLmdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQpO1xuICByZXR1cm4gZHJhd2JsZUZvbGRlciArICcvJyArIGZpbGVOYW1lICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuY2xhc3MgQXNzZXRTb3VyY2VSZXNvbHZlciB7XG4gIHNlcnZlclVybDogP3N0cmluZztcbiAgLy8gd2hlcmUgdGhlIGpzYnVuZGxlIGlzIGJlaW5nIHJ1biBmcm9tXG4gIGpzYnVuZGxlVXJsOiA/c3RyaW5nO1xuICAvLyB0aGUgYXNzZXQgdG8gcmVzb2x2ZVxuICBhc3NldDogUGFja2FnZXJBc3NldDtcblxuICBjb25zdHJ1Y3RvcihzZXJ2ZXJVcmw6ID9zdHJpbmcsIGpzYnVuZGxlVXJsOiA/c3RyaW5nLCBhc3NldDogUGFja2FnZXJBc3NldCkge1xuICAgIHRoaXMuc2VydmVyVXJsID0gc2VydmVyVXJsO1xuICAgIHRoaXMuanNidW5kbGVVcmwgPSBqc2J1bmRsZVVybDtcbiAgICB0aGlzLmFzc2V0ID0gYXNzZXQ7XG4gIH1cblxuICBpc0xvYWRlZEZyb21TZXJ2ZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXJVcmw7XG4gIH1cblxuICBpc0xvYWRlZEZyb21GaWxlU3lzdGVtKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLmpzYnVuZGxlVXJsICYmIHRoaXMuanNidW5kbGVVcmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKTtcbiAgfVxuXG4gIGRlZmF1bHRBc3NldCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZEZyb21TZXJ2ZXIoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXRTZXJ2ZXJVUkwoKTtcbiAgICB9XG5cbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgcmV0dXJuIHRoaXMuaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpXG4gICAgICAgID8gdGhpcy5kcmF3YWJsZUZvbGRlckluQnVuZGxlKClcbiAgICAgICAgOiB0aGlzLnJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhYnNvbHV0ZSBVUkwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmV0Y2ggdGhlIGFzc2V0XG4gICAqIGZyb20gdGhlIGRldnNlcnZlclxuICAgKi9cbiAgYXNzZXRTZXJ2ZXJVUkwoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KCEhdGhpcy5zZXJ2ZXJVcmwsICduZWVkIHNlcnZlciB0byBsb2FkIGZyb20nKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgdGhpcy5zZXJ2ZXJVcmwgK1xuICAgICAgICBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkgK1xuICAgICAgICAnP3BsYXRmb3JtPScgK1xuICAgICAgICBQbGF0Zm9ybS5PUyArXG4gICAgICAgICcmaGFzaD0nICtcbiAgICAgICAgdGhpcy5hc3NldC5oYXNoLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8ganVzdCB0aGUgc2NhbGVkIGFzc2V0IGZpbGVuYW1lXG4gICAqIEUuZy4gJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRQYXRoKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0byB3aGVyZSB0aGUgYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSwgd2l0aCBhIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9idW5kbGUvYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gICAqL1xuICBzY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuanNidW5kbGVVcmwgfHwgJ2ZpbGU6Ly8nO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UocGF0aCArIGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbG9jYXRpb24gb2YgYXNzZXRzIGJ1bmRsZWQgd2l0aCB0aGUgYXBwLCBsb2NhdGVkIGJ5XG4gICAqIHJlc291cmNlIGlkZW50aWZpZXJcbiAgICogVGhlIEFuZHJvaWQgcmVzb3VyY2Ugc3lzdGVtIHBpY2tzIHRoZSBjb3JyZWN0IHNjYWxlLlxuICAgKiBFLmcuICdhc3NldHNfYXdlc29tZW1vZHVsZV9pY29uJ1xuICAgKi9cbiAgcmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudChcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcsXG4gICAgICAncmVzb3VyY2UgaWRlbnRpZmllcnMgd29yayBvbiBBbmRyb2lkJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoXG4gICAgICBhc3NldFBhdGhVdGlscy5nZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKHRoaXMuYXNzZXQpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIGpzYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSBhIHNpZGVsb2FkIGxvY2F0aW9uLCB0aGlzIHJlc29sdmVzIGFzc2V0c1xuICAgKiByZWxhdGl2ZSB0byBpdHMgbG9jYXRpb25cbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvQXdlc29tZU1vZHVsZS9kcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICAgKi9cbiAgZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCB8fCAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShwYXRoICsgZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICBmcm9tU291cmNlKHNvdXJjZTogc3RyaW5nKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fcGFja2FnZXJfYXNzZXQ6IHRydWUsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldC53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldC5oZWlnaHQsXG4gICAgICB1cmk6IHNvdXJjZSxcbiAgICAgIHNjYWxlOiBBc3NldFNvdXJjZVJlc29sdmVyLnBpY2tTY2FsZSh0aGlzLmFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwaWNrU2NhbGUoc2NhbGVzOiBBcnJheTxudW1iZXI+LCBkZXZpY2VTY2FsZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBQYWNrYWdlciBndWFyYW50ZWVzIHRoYXQgYHNjYWxlc2AgYXJyYXkgaXMgc29ydGVkXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzY2FsZXNbaV0gPj0gZGV2aWNlU2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIHNjYWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3RoaW5nIG1hdGNoZXMsIGRldmljZSBzY2FsZSBpcyBsYXJnZXIgdGhhbiBhbnkgYXZhaWxhYmxlXG4gICAgLy8gc2NhbGVzLCBzbyB3ZSByZXR1cm4gdGhlIGJpZ2dlc3Qgb25lLiBVbmxlc3MgdGhlIGFycmF5IGlzIGVtcHR5LFxuICAgIC8vIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byAxXG4gICAgcmV0dXJuIHNjYWxlc1tzY2FsZXMubGVuZ3RoIC0gMV0gfHwgMTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2V0U291cmNlUmVzb2x2ZXI7XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFZYixJQUFNRyxVQUFVLEdBQUdILE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUNyRCxJQUFNSSxRQUFRLEdBQUdKLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUVqRCxJQUFNSyxjQUFjLEdBQUdMLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUNsRCxJQUFNTSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFLdEMsU0FBU08sa0JBQWtCQSxDQUFDQyxLQUFLLEVBQVU7RUFDekMsSUFBTUMsS0FBSyxHQUFHQyxtQkFBbUIsQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLLENBQUNJLE1BQU0sRUFBRVQsVUFBVSxD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