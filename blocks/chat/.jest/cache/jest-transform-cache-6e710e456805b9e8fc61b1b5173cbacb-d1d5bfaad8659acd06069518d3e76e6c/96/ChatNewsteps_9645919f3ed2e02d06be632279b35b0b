68a34d5d65e6abaf919d7dd0325b037e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_cucumber_1 = require("jest-cucumber");
const enzyme_1 = require("enzyme");
const helpersChatNew = __importStar(require("../../../../framework/src/Helpers"));
const react_1 = __importDefault(require("react"));
const ChatNew_1 = __importDefault(require("../../src/ChatNew"));
const Message_1 = require("../../../../framework/src/Message");
const MessageEnum_1 = __importStar(require("../../../../framework/src/Messages/MessageEnum"));
const RunEngine_1 = require("../../../../framework/src/RunEngine");
const screenPropsChatNew = {
    navigation: {
        navigate: jest.fn(),
        setOptions: jest.fn(),
        push: jest.fn(),
        addListener: jest.fn().mockImplementation((event, callback) => {
            callback();
        }),
        goBack: jest.fn(),
        state: {
            params: {
                receiverUser: "ReceiveUser",
                userID: "7",
                userName: "name",
                userPic: "",
                userPoints: "12",
                userRole: "designer"
            },
        },
    },
    id: "ChatNew",
};
const userList = [{
        id: "319",
        type: "user_profile_info",
        attributes: {
            user_name: "Prof. Kieth Crona",
            unlock_amount: null,
            apple_account_id: 320,
            level_name: "Level 1",
            points: 4950,
            rank: 1,
            profile_account_categories_id: {
                id: 321,
                name: "Tracee Wintheiser"
            },
            profile_pic: null,
            cover_pic: null
        }
    },
    {
        id: "320",
        type: "user_profile_info",
        attributes: {
            user_name: "Diana Fisher DO",
            unlock_amount: null,
            apple_account_id: 321,
            level_name: "Level 1",
            points: 125,
            rank: 2,
            profile_account_categories_id: {
                id: 322,
                name: "Bobbie Luettgen"
            },
            profile_pic: null,
            cover_pic: null
        }
    }
];
const featureChatNew = jest_cucumber_1.loadFeature("./__tests__/features/ChatNew-scenario.feature");
jest_cucumber_1.defineFeature(featureChatNew, (test) => {
    beforeEach(() => {
        jest.resetModules();
        jest.clearAllMocks();
        jest.doMock("react-native", () => ({ Platform: { OS: "ios" } }));
        jest.spyOn(helpersChatNew, "getOS").mockImplementation(() => "ios");
    });
    test("User navigates to ChatNew", ({ given, when, then }) => {
        let chatNewWrapper;
        let instanceChatNew;
        given("I am a User loading ChatNew", () => {
            chatNewWrapper = enzyme_1.shallow(react_1.default.createElement(ChatNew_1.default, Object.assign({}, screenPropsChatNew)));
        });
        when("I navigate to ChatNew", () => {
            instanceChatNew = chatNewWrapper.instance();
            let textInputComponentChatNew = chatNewWrapper.findWhere((node) => node.prop("testID") === "textInputComponentChatNew");
            textInputComponentChatNew.simulate("changeText", "user1");
            instanceChatNew.onPressUserSubmitting();
        });
        then("ChatNew will load", () => {
            instanceChatNew.setState({ userList: userList });
            let itemChatNew = {
                item: {
                    id: "319",
                    type: "user_profile_info",
                    attributes: {
                        user_name: "Prof. Kieth Crona",
                        unlock_amount: null,
                        apple_account_id: 320,
                        level_name: "Level 1",
                        points: 4900,
                        rank: 1,
                        profile_account_categories_id: {
                            id: 321,
                            name: "Tracee Wintheiser"
                        },
                        profile_pic: null,
                        cover_pic: null
                    }
                }
            };
            let flatListChatNew = chatNewWrapper.findWhere((node) => node.prop("testID") === "flatListChatNew");
            let rowItemChatNew = flatListChatNew
                .renderProp("renderItem")(itemChatNew)
                .findWhere((node) => node.prop("testID") === "rowItemChatNew");
            rowItemChatNew.simulate("press");
            let touchOnMainContainerChatNew = chatNewWrapper.findWhere((node) => node.prop("testID") === "touchOnMainContainerChatNew");
            touchOnMainContainerChatNew.simulate("press");
            let btnBackChatNew = chatNewWrapper.findWhere((node) => node.prop("testID") === "btnBackChatNew");
            btnBackChatNew.simulate("press");
            let btnChatChatNew = chatNewWrapper.findWhere((node) => node.prop("testID") === "btnChatChatNew");
            btnChatChatNew.simulate("press");
            instanceChatNew.setState({ currentSelectedUser: null });
        });
        then("I can leave the screen", () => {
            const msgGetUsersForConversation = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            msgGetUsersForConversation.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), msgGetUsersForConversation.messageId);
            msgGetUsersForConversation.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), {
                data: {
                    message: "No conversations Found"
                }
            });
            instanceChatNew.getUserListApiCallId = msgGetUsersForConversation.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", msgGetUsersForConversation);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,