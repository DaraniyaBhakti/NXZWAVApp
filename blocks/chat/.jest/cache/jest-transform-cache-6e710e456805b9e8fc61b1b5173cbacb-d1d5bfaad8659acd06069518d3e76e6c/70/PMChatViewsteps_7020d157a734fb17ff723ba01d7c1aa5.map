{"version":3,"file":"/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/PMChatView.steps.tsx","sources":["/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/PMChatView.steps.tsx"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,oDAAoD;AACpD,yFAAyF;AAEzF,gEAAgE;AAEhE,6BAA6B;AAC7B,iDAAiD;AACjD,kDAAkD;AAElD,wBAAwB;AACxB,kBAAkB;AAClB,uEAAuE;AACvE,oBAAoB;AACpB,UAAU;AACV,2BAA2B;AAC3B,OAAO;AACP,qBAAqB;AACrB,KAAK;AAEL,mFAAmF;AAEnF,qCAAqC;AACrC,uBAAuB;AACvB,2BAA2B;AAC3B,wEAAwE;AACxE,oEAAoE;AACpE,6EAA6E;AAC7E,uJAAuJ;AACvJ,6CAA6C;AAC7C,aAAa;AACb,QAAQ;AAER,sEAAsE;AACtE,6CAA6C;AAC7C,gCAAgC;AAEhC,sDAAsD;AACtD,sEAAsE;AACtE,UAAU;AAEV,+CAA+C;AAC/C,+DAA+D;AAG/D,UAAU;AACV,2DAA2D;AAC3D,gDAAgD;AAChD,UAAU;AAEV,uDAAuD;AACvD,gHAAgH;AAChH,oEAAoE;AACpE,UAAU;AAEV,mEAAmE;AACnE,mDAAmD;AACnD,uDAAuD;AACvD,WAAW;AACX,mCAAmC;AACnC,yCAAyC;AAEzC,mDAAmD;AACnD,uDAAuD;AACvD,WAAW;AACX,mCAAmC;AACnC,yCAAyC;AAEzC,0DAA0D;AAC1D,8DAA8D;AAC9D,WAAW;AACX,0CAA0C;AAC1C,gDAAgD;AAChD,UAAU;AACV,6DAA6D;AAC7D,wCAAwC;AACxC,gDAAgD;AAChD,UAAU;AAEV,QAAQ;AACR,MAAM","sourcesContent":["// import { defineFeature, loadFeature } from \"jest-cucumber\";\n// import { shallow, ShallowWrapper } from \"enzyme\";\n// import DocumentPicker, { DocumentPickerResponse } from 'react-native-document-picker';\n\n// import * as helpers from \"../../../../framework/src/Helpers\";\n\n// import React from \"react\";\n// import PMChatView from \"../../src/PmChatView\";\n// const navigation = require(\"react-navigation\");\n\n// const screenProps = {\n//   navigation: {\n//     addListener: jest.fn().mockImplementation((event, callback) => {\n//       callback();\n//     }),\n//     navigate: jest.fn(),\n//   },\n//   id: \"PMChatView\"\n// };\n\n// const feature = loadFeature(\"./__tests__/features/PMChatView-scenario.feature\");\n\n// defineFeature(feature, (test) => {\n//   beforeEach(() => {\n//     jest.resetModules();\n//     jest.doMock(\"react-native\", () => ({ Platform: { OS: \"ios\" } }));\n//     jest.spyOn(helpers, \"getOS\").mockImplementation(() => \"ios\");\n//     // jest.spyOn(DocumentPicker, 'pickSingle').mockImplementation(() => {\n//     //   const response: DocumentPickerResponse = { name: \"testFile\", uri: 'testUri', size: 100, fileCopyUri: \"testCopyUri\", type: \"testFileType\" };\n//     //   return Promise.resolve(response);\n//     // });\n//   });\n\n//   test(\"User navigates to PMChatView\", ({ given, when, then }) => {\n//     let pmChatViewWrapper: ShallowWrapper;\n//     let instance: PMChatView;\n\n//     given(\"I am a User loading PMChatView\", () => {\n//       pmChatViewWrapper = shallow(<PMChatView {...screenProps} />);\n//     });\n\n//     when(\"I navigate to PMChatView\", () => {\n//       instance = pmChatViewWrapper.instance() as PMChatView;\n\n\n//     });\n//     then('PMChatView will load with out errors', () => {\n//       expect(pmChatViewWrapper).toBeTruthy();\n//     });\n\n//     then('I can enter text with out errors', () => {\n//       let textInputComponent = pmChatViewWrapper.findWhere((node) => node.prop('testID') === 'inputMessage');\n//       textInputComponent.simulate('changeText', 'hello@aol.com');\n//     });\n\n//     then('I can select the button with with out errors', () => {\n//       let backBtn = pmChatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"backBtn\",\n//       );\n//       backBtn.simulate(\"press\");\n//       expect(backBtn).toHaveLength(1);\n\n//       let editBtn = pmChatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"editBtn\",\n//       );\n//       editBtn.simulate(\"press\");\n//       expect(editBtn).toHaveLength(1);\n\n//       let btnSendMessage = pmChatViewWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnSendMessage\",\n//       );\n//       btnSendMessage.simulate(\"press\");\n//       expect(btnSendMessage).toHaveLength(1);\n//     });\n//     then('I can leave the screen with out errors', () => {\n//       instance.componentWillUnmount()\n//       expect(pmChatViewWrapper).toBeTruthy();\n//     });\n\n//   });\n// });\n"]}