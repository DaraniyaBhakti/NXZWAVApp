16f5b23542b0c6796be4d0813584751d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedValue = require('./AnimatedValue');
var AnimatedNode = require('./AnimatedNode');
var _require = require('../NativeAnimatedHelper'),
  generateNewAnimationId = _require.generateNewAnimationId,
  shouldUseNativeDriver = _require.shouldUseNativeDriver;
var AnimatedTracking = function (_AnimatedNode) {
  (0, _inherits2.default)(AnimatedTracking, _AnimatedNode);
  var _super = _createSuper(AnimatedTracking);
  function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedTracking);
    _this = _super.call(this);
    _this._value = value;
    _this._parent = parent;
    _this._animationClass = animationClass;
    _this._animationConfig = animationConfig;
    _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
    _this._callback = callback;
    _this.__attach();
    return _this;
  }
  (0, _createClass2.default)(AnimatedTracking, [{
    key: "__makeNative",
    value: function __makeNative() {
      this.__isNative = true;
      this._parent.__makeNative();
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTracking.prototype), "__makeNative", this).call(this);
      this._value.__makeNative();
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._parent.__addChild(this);
      if (this._useNativeDriver) {
        this.__makeNative();
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._parent.__removeChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTracking.prototype), "__detach", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {
      this._value.animate(new this._animationClass((0, _extends2.default)({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var animation = new this._animationClass((0, _extends2.default)({}, this._animationConfig, {
        toValue: undefined
      }));
      var animationConfig = animation.__getNativeAnimationConfig();
      return {
        type: 'tracking',
        animationId: generateNewAnimationId(),
        animationConfig: animationConfig,
        toValue: this._parent.__getNativeTag(),
        value: this._value.__getNativeTag()
      };
    }
  }]);
  return AnimatedTracking;
}(AnimatedNode);
module.exports = AnimatedTracking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9leHRlbmRzMiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkTm9kZSIsIl9yZXF1aXJlIiwiZ2VuZXJhdGVOZXdBbmltYXRpb25JZCIsInNob3VsZFVzZU5hdGl2ZURyaXZlciIsIkFuaW1hdGVkVHJhY2tpbmciLCJfQW5pbWF0ZWROb2RlIiwiX3N1cGVyIiwidmFsdWUiLCJwYXJlbnQiLCJhbmltYXRpb25DbGFzcyIsImFuaW1hdGlvbkNvbmZpZyIsImNhbGxiYWNrIiwiX3RoaXMiLCJfdmFsdWUiLCJfcGFyZW50IiwiX2FuaW1hdGlvbkNsYXNzIiwiX2FuaW1hdGlvbkNvbmZpZyIsIl91c2VOYXRpdmVEcml2ZXIiLCJfY2FsbGJhY2siLCJfX2F0dGFjaCIsImtleSIsIl9fbWFrZU5hdGl2ZSIsIl9faXNOYXRpdmUiLCJfX2dldFZhbHVlIiwiX19hZGRDaGlsZCIsIl9fZGV0YWNoIiwiX19yZW1vdmVDaGlsZCIsInVwZGF0ZSIsImFuaW1hdGUiLCJ0b1ZhbHVlIiwiX19nZXROYXRpdmVDb25maWciLCJhbmltYXRpb24iLCJ1bmRlZmluZWQiLCJfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyIsInR5cGUiLCJhbmltYXRpb25JZCIsIl9fZ2V0TmF0aXZlVGFnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFuaW1hdGVkVHJhY2tpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkVmFsdWUgPSByZXF1aXJlKCcuL0FuaW1hdGVkVmFsdWUnKTtcbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCB7XG4gIGdlbmVyYXRlTmV3QW5pbWF0aW9uSWQsXG4gIHNob3VsZFVzZU5hdGl2ZURyaXZlcixcbn0gPSByZXF1aXJlKCcuLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG5pbXBvcnQgdHlwZSB7RW5kQ2FsbGJhY2t9IGZyb20gJy4uL2FuaW1hdGlvbnMvQW5pbWF0aW9uJztcblxuY2xhc3MgQW5pbWF0ZWRUcmFja2luZyBleHRlbmRzIEFuaW1hdGVkTm9kZSB7XG4gIF92YWx1ZTogQW5pbWF0ZWRWYWx1ZTtcbiAgX3BhcmVudDogQW5pbWF0ZWROb2RlO1xuICBfY2FsbGJhY2s6ID9FbmRDYWxsYmFjaztcbiAgX2FuaW1hdGlvbkNvbmZpZzogT2JqZWN0O1xuICBfYW5pbWF0aW9uQ2xhc3M6IGFueTtcbiAgX3VzZU5hdGl2ZURyaXZlcjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICB2YWx1ZTogQW5pbWF0ZWRWYWx1ZSxcbiAgICBwYXJlbnQ6IEFuaW1hdGVkTm9kZSxcbiAgICBhbmltYXRpb25DbGFzczogYW55LFxuICAgIGFuaW1hdGlvbkNvbmZpZzogT2JqZWN0LFxuICAgIGNhbGxiYWNrPzogP0VuZENhbGxiYWNrLFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX2FuaW1hdGlvbkNsYXNzID0gYW5pbWF0aW9uQ2xhc3M7XG4gICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnID0gYW5pbWF0aW9uQ29uZmlnO1xuICAgIHRoaXMuX3VzZU5hdGl2ZURyaXZlciA9IHNob3VsZFVzZU5hdGl2ZURyaXZlcihhbmltYXRpb25Db25maWcpO1xuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fX2F0dGFjaCgpO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKCkge1xuICAgIHRoaXMuX19pc05hdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5fcGFyZW50Ll9fbWFrZU5hdGl2ZSgpO1xuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZSgpO1xuICAgIHRoaXMuX3ZhbHVlLl9fbWFrZU5hdGl2ZSgpO1xuICB9XG5cbiAgX19nZXRWYWx1ZSgpOiBPYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl9wYXJlbnQuX19nZXRWYWx1ZSgpO1xuICB9XG5cbiAgX19hdHRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fcGFyZW50Ll9fYWRkQ2hpbGQodGhpcyk7XG4gICAgaWYgKHRoaXMuX3VzZU5hdGl2ZURyaXZlcikge1xuICAgICAgLy8gd2hlbiB0aGUgdHJhY2tpbmcgc3RhcnRzIHdlIG5lZWQgdG8gY29udmVydCB0aGlzIG5vZGUgdG8gYSBcIm5hdGl2ZSBub2RlXCJcbiAgICAgIC8vIHNvIHRoYXQgdGhlIHBhcmVudCBub2RlIHdpbGwgYmUgbWFkZSBcIm5hdGl2ZVwiIHRvby4gVGhpcyBpcyBuZWNlc3NhcnkgYXNcbiAgICAgIC8vIGlmIHdlIGRvbid0IGRvIHRoaXMgYHVwZGF0ZWAgbWV0aG9kIHdpbGwgZ2V0IGNhbGxlZC4gQXQgdGhhdCBwb2ludCBpdFxuICAgICAgLy8gbWF5IGJlIHRvbyBsYXRlIGFzIGl0IHdvdWxkIG1lYW4gdGhlIEpTIGRyaXZlciBoYXMgYWxyZWFkeSBzdGFydGVkXG4gICAgICAvLyB1cGRhdGluZyBub2RlIHZhbHVlc1xuICAgICAgdGhpcy5fX21ha2VOYXRpdmUoKTtcbiAgICB9XG4gIH1cblxuICBfX2RldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9wYXJlbnQuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICBzdXBlci5fX2RldGFjaCgpO1xuICB9XG5cbiAgdXBkYXRlKCk6IHZvaWQge1xuICAgIHRoaXMuX3ZhbHVlLmFuaW1hdGUoXG4gICAgICBuZXcgdGhpcy5fYW5pbWF0aW9uQ2xhc3Moe1xuICAgICAgICAuLi50aGlzLl9hbmltYXRpb25Db25maWcsXG4gICAgICAgIHRvVmFsdWU6ICh0aGlzLl9hbmltYXRpb25Db25maWcudG9WYWx1ZTogYW55KS5fX2dldFZhbHVlKCksXG4gICAgICB9KSxcbiAgICAgIHRoaXMuX2NhbGxiYWNrLFxuICAgICk7XG4gIH1cblxuICBfX2dldE5hdGl2ZUNvbmZpZygpOiBhbnkge1xuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5ldyB0aGlzLl9hbmltYXRpb25DbGFzcyh7XG4gICAgICAuLi50aGlzLl9hbmltYXRpb25Db25maWcsXG4gICAgICAvLyByZW1vdmUgdG9WYWx1ZSBmcm9tIHRoZSBjb25maWcgYXMgaXQncyBhIHJlZiB0byBBbmltYXRlZC5WYWx1ZVxuICAgICAgdG9WYWx1ZTogdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIGNvbnN0IGFuaW1hdGlvbkNvbmZpZyA9IGFuaW1hdGlvbi5fX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndHJhY2tpbmcnLFxuICAgICAgYW5pbWF0aW9uSWQ6IGdlbmVyYXRlTmV3QW5pbWF0aW9uSWQoKSxcbiAgICAgIGFuaW1hdGlvbkNvbmZpZyxcbiAgICAgIHRvVmFsdWU6IHRoaXMuX3BhcmVudC5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgdmFsdWU6IHRoaXMuX3ZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkVHJhY2tpbmc7XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGdCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSxLQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSwyQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU8sZ0JBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFRLGFBQUFDLE9BQUEsUUFBQUMseUJBQUEsR0FBQUMseUJBQUEsb0JBQUFDLHFCQUFBLFFBQUFDLEtBQUEsT0FBQU4sZ0JBQUEsQ0FBQU8sT0FBQSxFQUFBTCxPQUFBLEdBQUFNLE1BQUEsTUFBQUwseUJBQUEsUUFBQU0sU0FBQSxPQUFBVCxnQkFBQSxDQUFBTyxPQUFBLFFBQUFHLFdBQUEsRUFBQUYsTUFBQSxHQUFBRyxPQUFBLENBQUFDLFNBQUEsQ0FBQU4sS0FBQSxFQUFBTyxTQUFBLEVBQUFKLFNBQUEsWUFBQUQsTUFBQSxHQUFBRixLQUFBLENBQUFRLEtBQUEsT0FBQUQsU0FBQSxnQkFBQWQsMkJBQUEsQ0FBQVEsT0FBQSxRQUFBQyxNQUFBO0FBQUEsU0FBQUosMEJBQUEsZUFBQU8sT0FBQSxxQkFBQUEsT0FBQSxDQUFBQyxTQUFBLG9CQUFBRCxPQUFBLENBQUFD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