670570329981c4a3cc7b13210479d11d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));
var _getIconType = _interopRequireDefault(require("../helpers/getIconType"));
var CheckBoxIcon = function CheckBoxIcon(_ref) {
  var checked = _ref.checked,
    onIconPress = _ref.onIconPress,
    onLongIconPress = _ref.onLongIconPress,
    size = _ref.size,
    checkedIcon = _ref.checkedIcon,
    uncheckedIcon = _ref.uncheckedIcon,
    iconType = _ref.iconType,
    checkedColor = _ref.checkedColor,
    uncheckedColor = _ref.uncheckedColor;
  if (checked && _react.default.isValidElement(checkedIcon)) {
    return checkedIcon;
  }
  if (!checked && _react.default.isValidElement(uncheckedIcon)) {
    return uncheckedIcon;
  }
  var VectorIcon = iconType ? (0, _getIconType.default)(iconType) : _FontAwesome.default;
  return _react.default.createElement(VectorIcon, {
    color: checked ? checkedColor : uncheckedColor,
    name: checked ? checkedIcon : uncheckedIcon,
    size: size || 24,
    style: {
      minWidth: size || 24
    },
    onLongPress: onLongIconPress,
    onPress: onIconPress
  });
};
CheckBoxIcon.propTypes = {
  checked: _propTypes.default.bool,
  onIconPress: _propTypes.default.func,
  onLongIconPress: _propTypes.default.func,
  size: _propTypes.default.number,
  checkedIcon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  uncheckedIcon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  iconType: _propTypes.default.string,
  checkedColor: _propTypes.default.string,
  uncheckedColor: _propTypes.default.string
};
var _default = CheckBoxIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfRm9udEF3ZXNvbWUiLCJfZ2V0SWNvblR5cGUiLCJDaGVja0JveEljb24iLCJfcmVmIiwiY2hlY2tlZCIsIm9uSWNvblByZXNzIiwib25Mb25nSWNvblByZXNzIiwic2l6ZSIsImNoZWNrZWRJY29uIiwidW5jaGVja2VkSWNvbiIsImljb25UeXBlIiwiY2hlY2tlZENvbG9yIiwidW5jaGVja2VkQ29sb3IiLCJSZWFjdCIsImlzVmFsaWRFbGVtZW50IiwiVmVjdG9ySWNvbiIsImdldEljb25UeXBlIiwiRkFJY29uIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJjb2xvciIsIm5hbWUiLCJzdHlsZSIsIm1pbldpZHRoIiwib25Mb25nUHJlc3MiLCJvblByZXNzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJlbGVtZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQ2hlY2tCb3hJY29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEZBSWNvbiBmcm9tICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL0ZvbnRBd2Vzb21lJztcblxuaW1wb3J0IGdldEljb25UeXBlIGZyb20gJy4uL2hlbHBlcnMvZ2V0SWNvblR5cGUnO1xuXG5jb25zdCBDaGVja0JveEljb24gPSAoe1xuICBjaGVja2VkLFxuICBvbkljb25QcmVzcyxcbiAgb25Mb25nSWNvblByZXNzLFxuICBzaXplLFxuICBjaGVja2VkSWNvbixcbiAgdW5jaGVja2VkSWNvbixcbiAgaWNvblR5cGUsXG4gIGNoZWNrZWRDb2xvcixcbiAgdW5jaGVja2VkQ29sb3IsXG59KSA9PiB7XG4gIGlmIChjaGVja2VkICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoZWNrZWRJY29uKSkge1xuICAgIHJldHVybiBjaGVja2VkSWNvbjtcbiAgfVxuXG4gIGlmICghY2hlY2tlZCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudCh1bmNoZWNrZWRJY29uKSkge1xuICAgIHJldHVybiB1bmNoZWNrZWRJY29uO1xuICB9XG5cbiAgY29uc3QgVmVjdG9ySWNvbiA9IGljb25UeXBlID8gZ2V0SWNvblR5cGUoaWNvblR5cGUpIDogRkFJY29uO1xuXG4gIHJldHVybiAoXG4gICAgPFZlY3Rvckljb25cbiAgICAgIGNvbG9yPXtjaGVja2VkID8gY2hlY2tlZENvbG9yIDogdW5jaGVja2VkQ29sb3J9XG4gICAgICBuYW1lPXtjaGVja2VkID8gY2hlY2tlZEljb24gOiB1bmNoZWNrZWRJY29ufVxuICAgICAgc2l6ZT17c2l6ZSB8fCAyNH1cbiAgICAgIHN0eWxlPXt7IG1pbldpZHRoOiBzaXplIHx8IDI0IH19XG4gICAgICBvbkxvbmdQcmVzcz17b25Mb25nSWNvblByZXNzfVxuICAgICAgb25QcmVzcz17b25JY29uUHJlc3N9XG4gICAgLz5cbiAgKTtcbn07XG5cbkNoZWNrQm94SWNvbi5wcm9wVHlwZXMgPSB7XG4gIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuICBvbkljb25QcmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTG9uZ0ljb25QcmVzczogUHJvcFR5cGVzLmZ1bmMsXG4gIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoZWNrZWRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZWxlbWVudF0pLFxuICB1bmNoZWNrZWRJY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZWxlbWVudF0pLFxuICBpY29uVHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hlY2tlZENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB1bmNoZWNrZWRDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrQm94SWNvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxZQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFNSSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQUMsSUFBQSxFQVVaO0VBQUEsSUFUSkMsT0FBTyxHQUFBRCxJQUFBLENBQVBDLE9BQU87SUFDUEMsV0FBVyxHQUFBRixJQUFBLENBQVhFLFdBQVc7SUFDWEMsZUFBZSxHQUFBSCxJQUFBLENBQWZHLGVBQWU7SUFDZkMsSUFBSSxHQUFBSixJQUFBLENBQUpJLElBQUk7SUFDSkMsV0FBVyxHQUFBTCxJQUFBLENBQVhLLFdBQVc7SUFDWEMsYUFBYSxHQUFBTixJQUFBLENBQWJNLGFBQWE7SUFDYkMsUUFBUSxHQUFBUCxJQUFBLENBQVJPLFFBQVE7SUFDUkMsWUFBWSxHQUFBUixJQUFBLENBQVpRLFlBQVk7SUFDWkMsY0FBYyxHQUFBVCxJQUFBLENBQWRTLGNBQWM7RUFFZCxJQUFJUixPQUFPLElBQUlTLGNBQUssQ0FBQ0MsY0FBYyxDQUFDTixXQUFXLENBQUMsRUFBRTtJQUNoRCxPQUFPQSxXQUFXO0VBQ3BCO0VBRUEsSUFBSSxDQUFDSixPQUFPLElBQUlTLGNBQUssQ0FBQ0MsY0FBYyxDQUFDTCxhQUFhLENBQUMsRUFBRTtJQUNuRCxPQUFPQSxhQUFhO0VBQ3RCO0VBRUEsSUFBTU0sVUFBVSxHQUFHTCxRQUFRLEdBQUcsSUFBQU0sb0JBQVcsRUFBQ04sUUFBUSxDQUFDLEdBQUdPLG9CQUFNO0VBRTVELE9BQ0VyQixNQUFBLENBQUFzQixPQUFBLENBQUFDLGFBQUEsQ0FBQ0osVUFBVTtJQUNUSyxLQUFLLEVBQUVoQixPQUFPLEdBQUdPLFlBQVksR0FBR0MsY0FBZTtJQUMvQ1MsSUFBSSxFQUFFakIsT0FBTyxHQUFHSSxXQUFXLEdBQUdDLGFBQWM7SUFDNUNGLElBQUksRUFBRUEsSUFBSSxJQUFJLEVBQUc7SUFDakJlLEtBQUssRUFBRTtNQUFFQyxRQUFRLEVBQUVoQixJQUFJLElBQUk7SUFBRyxDQUFFO0lBQ2hDaUIsV0FBVyxFQUFFbEIsZUFBZ0I7SUFDN0JtQixPQUFPLEVBQUVwQjtFQUFZLENBQ3RCLENBQUM7QUFFTixDQUFDO0FBRURILFlBQVksQ0FBQ3dCLFNBQVMsR0FBRztFQUN2QnRCLE9BQU8sRUFBRXVCLGtCQUFTLENBQUNDLElBQUk7RUFDdkJ2QixXQUFXLEVBQUVzQixrQkFBUyxDQUFDRSxJQUFJO0VBQzNCdkIsZUFBZSxFQUFFcUIsa0JBQVMsQ0FBQ0UsSUFBSTtFQUMvQnRCLElBQUksRUFBRW9CLGtCQUFTLENBQUNHLE1BQU07RUFDdEJ0QixXQUFXLEVBQUVtQixrQkFBUyxDQUFDSSxTQUFTLENBQUMsQ0FBQ0osa0JBQVMsQ0FBQ0ssTUFBTSxFQUFFTCxrQkFBUyxDQUFDTSxPQUFPLENBQUMsQ0FBQztFQUN2RXhCLGFBQWEsRUFBRWtCLGtCQUFTLENBQUNJLFNBQVMsQ0FBQyxDQUFDSixrQkFBUyxDQUFDSyxNQUFNLEVBQUVMLGtCQUFTLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0VBQ3pFdkIsUUFBUSxFQUFFaUIsa0JBQVMsQ0FBQ0ssTUFBTTtFQUMxQnJCLFlBQVksRUFBRWdCLGtCQUFTLENBQUNLLE1BQU07RUFDOUJwQixjQUFjLEVBQUVlLGtCQUFTLENBQUNLO0FBQzVCLENBQUM7QUFBQyxJQUFBRSxRQUFBLEdBRWFoQyxZQUFZO0FBQUFpQyxPQUFBLENBQUFqQixPQUFBLEdBQUFnQixRQUFBIn0=