539e3742f854e1c6233689fe7b34ff6a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var NativeAnimatedHelper = require('../NativeAnimatedHelper');
var Animation = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }
  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      NativeAnimatedHelper.API.enableQueue();
      animatedValue.__makeNative();
      NativeAnimatedHelper.API.disableQueue();
      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();
module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiTmF0aXZlQW5pbWF0ZWRIZWxwZXIiLCJBbmltYXRpb24iLCJkZWZhdWx0Iiwia2V5IiwidmFsdWUiLCJzdGFydCIsImZyb21WYWx1ZSIsIm9uVXBkYXRlIiwib25FbmQiLCJwcmV2aW91c0FuaW1hdGlvbiIsImFuaW1hdGVkVmFsdWUiLCJzdG9wIiwiX19uYXRpdmVJZCIsIkFQSSIsInN0b3BBbmltYXRpb24iLCJfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyIsIkVycm9yIiwiX19kZWJvdW5jZWRPbkVuZCIsInJlc3VsdCIsIl9fb25FbmQiLCJfX3N0YXJ0TmF0aXZlQW5pbWF0aW9uIiwiZW5hYmxlUXVldWUiLCJfX21ha2VOYXRpdmUiLCJkaXNhYmxlUXVldWUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTmF0aXZlQW5pbWF0ZWRIZWxwZXIgPSByZXF1aXJlKCcuLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG5pbXBvcnQgdHlwZSBBbmltYXRlZFZhbHVlIGZyb20gJy4uL25vZGVzL0FuaW1hdGVkVmFsdWUnO1xuXG5leHBvcnQgdHlwZSBFbmRSZXN1bHQgPSB7ZmluaXNoZWQ6IGJvb2xlYW59O1xuZXhwb3J0IHR5cGUgRW5kQ2FsbGJhY2sgPSAocmVzdWx0OiBFbmRSZXN1bHQpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGlvbkNvbmZpZyA9IHtcbiAgaXNJbnRlcmFjdGlvbj86IGJvb2xlYW4sXG4gIHVzZU5hdGl2ZURyaXZlcjogYm9vbGVhbixcbiAgb25Db21wbGV0ZT86ID9FbmRDYWxsYmFjayxcbiAgaXRlcmF0aW9ucz86IG51bWJlcixcbn07XG5cbi8vIEltcG9ydGFudCBub3RlOiBzdGFydCgpIGFuZCBzdG9wKCkgd2lsbCBvbmx5IGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuXG4vLyBPbmNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiBzdG9wcGVkIG9yIGZpbmlzaGVkIGl0cyBjb3Vyc2UsIGl0IHdpbGxcbi8vIG5vdCBiZSByZXVzZWQuXG5jbGFzcyBBbmltYXRpb24ge1xuICBfX2FjdGl2ZTogYm9vbGVhbjtcbiAgX19pc0ludGVyYWN0aW9uOiBib29sZWFuO1xuICBfX25hdGl2ZUlkOiBudW1iZXI7XG4gIF9fb25FbmQ6ID9FbmRDYWxsYmFjaztcbiAgX19pdGVyYXRpb25zOiBudW1iZXI7XG4gIHN0YXJ0KFxuICAgIGZyb21WYWx1ZTogbnVtYmVyLFxuICAgIG9uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkVuZDogP0VuZENhbGxiYWNrLFxuICAgIHByZXZpb3VzQW5pbWF0aW9uOiA/QW5pbWF0aW9uLFxuICAgIGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICk6IHZvaWQge31cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fX25hdGl2ZUlkKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RvcEFuaW1hdGlvbih0aGlzLl9fbmF0aXZlSWQpO1xuICAgIH1cbiAgfVxuICBfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpOiBhbnkge1xuICAgIC8vIFN1YmNsYXNzZXMgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgYW5pbWF0aW9uIGltcGxlbWVudGF0aW9uIGRvbmUgaW4gbmF0aXZlXG4gICAgLy8gc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGFuaW1hdGlvbiB0eXBlIGNhbm5vdCBiZSBvZmZsb2FkZWQgdG8gbmF0aXZlJyk7XG4gIH1cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBzdWJjbGFzc2VzIHRvIG1ha2Ugc3VyZSBvbkVuZCBpcyBvbmx5IGNhbGxlZCBvbmNlLlxuICBfX2RlYm91bmNlZE9uRW5kKHJlc3VsdDogRW5kUmVzdWx0KTogdm9pZCB7XG4gICAgY29uc3Qgb25FbmQgPSB0aGlzLl9fb25FbmQ7XG4gICAgdGhpcy5fX29uRW5kID0gbnVsbDtcbiAgICBvbkVuZCAmJiBvbkVuZChyZXN1bHQpO1xuICB9XG4gIF9fc3RhcnROYXRpdmVBbmltYXRpb24oYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSk6IHZvaWQge1xuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5lbmFibGVRdWV1ZSgpO1xuICAgIGFuaW1hdGVkVmFsdWUuX19tYWtlTmF0aXZlKCk7XG4gICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLmRpc2FibGVRdWV1ZSgpO1xuICAgIHRoaXMuX19uYXRpdmVJZCA9IE5hdGl2ZUFuaW1hdGVkSGVscGVyLmdlbmVyYXRlTmV3QW5pbWF0aW9uSWQoKTtcbiAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RhcnRBbmltYXRpbmdOb2RlKFxuICAgICAgdGhpcy5fX25hdGl2ZUlkLFxuICAgICAgYW5pbWF0ZWRWYWx1ZS5fX2dldE5hdGl2ZVRhZygpLFxuICAgICAgdGhpcy5fX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpLFxuICAgICAgdGhpcy5fX2RlYm91bmNlZE9uRW5kLmJpbmQodGhpcyksXG4gICAgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBU0EsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUViLElBQU1HLG9CQUFvQixHQUFHSCxPQUFPLENBQUMseUJBQXlCLENBQUM7QUFBQyxJQWlCMURJLFNBQVM7RUFBQSxTQUFBQSxVQUFBO0lBQUEsSUFBQUgsZ0JBQUEsQ0FBQUksT0FBQSxRQUFBRCxTQUFBO0VBQUE7RUFBQSxJQUFBRixhQUFBLENBQUFHLE9BQUEsRUFBQUQsU0FBQTtJQUFBRSxHQUFBO0lBQUFDLEtBQUEsRUFNYixTQUFBQyxNQUNFQyxTQUFpQixFQUNqQkMsUUFBaUMsRUFDakNDLEtBQW1CLEVBQ25CQyxpQkFBNkIsRUFDN0JDLGFBQTRCLEVBQ3RCLENBQUM7RUFBQztJQUFBUCxHQUFBO0lBQUFDLEtBQUEsRUFDVixTQUFBTyxLQUFBLEVBQWE7TUFDWCxJQUFJLElBQUksQ0FBQ0MsVUFBVSxFQUFFO1FBQ25CWixvQkFBb0IsQ0FBQ2EsR0FBRyxDQUFDQyxhQUFhLENBQUMsSUFBSSxDQUFDRixVQUFVLENBQUM7TUFDekQ7SUFDRjtFQUFDO0lBQUFULEdBQUE7SUFBQUMsS0FBQSxFQUNELFNBQUFXLDJCQUFBLEVBQWtDO01BR2hDLE1BQU0sSUFBSUMsS0FBSyxDQUFDLG1EQUFtRCxDQUFDO0lBQ3RFO0VBQUM7SUFBQWIsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQWEsaUJBQWlCQyxNQUFpQixFQUFRO01BQ3hDLElBQU1WLEtBQUssR0FBRyxJQUFJLENBQUNXLE9BQU87TUFDMUIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSTtNQUNuQlgsS0FBSyxJQUFJQSxLQUFLLENBQUNVLE1BQU0sQ0FBQztJQUN4QjtFQUFDO0lBQUFmLEdBQUE7SUFBQUMsS0FBQSxFQUNELFNBQUFnQix1QkFBdUJWLGFBQTRCLEVBQVE7TUFDekRWLG9CQUFvQixDQUFDYSxHQUFHLENBQUNRLFdBQVcsQ0FBQyxDQUFDO01BQ3RDWCxhQUFhLENBQUNZLFlBQVksQ0FBQyxDQUFDO01BQzVCdEIsb0JBQW9CLENBQUNhLEdBQUcsQ0FBQ1UsWUFBWSxDQUFDLENBQUM7TUFDdkMsSUFBSSxDQUFDWCxVQUFVLEdBQUdaLG9CQUFvQixDQUFDd0Isc0JBQXNCLENBQUMsQ0FBQztNQUMvRHhCLG9CQUFvQixDQUFDYSxHQUFHLENBQUNZLGtCQUFrQixDQUN6QyxJQUFJLENBQUNiLFVBQVUsRUFDZkYsYUFBYSxDQUFDZ0IsY0FBYyxDQUFDLENBQUMsRUFDOUIsSUFBSSxDQUFDWCwwQkFBMEIsQ0FBQyxDQUFDLEVBQ2pDLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUNVLElBQUksQ0FBQyxJQUFJLENBQ2pDLENBQUM7SUFDSDtFQUFDO0VBQUEsT0FBQTFCLFNBQUE7QUFBQTtBQUdIMkIsTUFBTSxDQUFDQyxPQUFPLEdBQUc1QixTQUFTIn0=