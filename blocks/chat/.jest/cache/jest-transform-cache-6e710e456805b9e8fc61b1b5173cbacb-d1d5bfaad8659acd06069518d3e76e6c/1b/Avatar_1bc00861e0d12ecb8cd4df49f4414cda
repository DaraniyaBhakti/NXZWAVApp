d00569694b42dd3d8c68d1e9c498245e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Avatar = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _Image = _interopRequireDefault(require("../image/Image"));
var _excluded = ["onPress", "onLongPress", "Component", "containerStyle", "icon", "iconStyle", "source", "size", "avatarStyle", "rounded", "title", "titleStyle", "overlayContainerStyle", "showEditButton", "editButton", "onEditPress", "imageProps", "placeholderStyle", "renderPlaceholderContent", "ImageComponent"];
var avatarSizes = {
  small: 34,
  medium: 50,
  large: 75,
  xlarge: 150
};
var defaultEditButton = {
  name: 'mode-edit',
  type: 'material',
  color: '#fff',
  underlayColor: '#000'
};
var Avatar = function Avatar(_ref) {
  var onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    _ref$Component = _ref.Component,
    Component = _ref$Component === void 0 ? onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View : _ref$Component,
    containerStyle = _ref.containerStyle,
    icon = _ref.icon,
    iconStyle = _ref.iconStyle,
    source = _ref.source,
    size = _ref.size,
    avatarStyle = _ref.avatarStyle,
    rounded = _ref.rounded,
    title = _ref.title,
    titleStyle = _ref.titleStyle,
    overlayContainerStyle = _ref.overlayContainerStyle,
    showEditButton = _ref.showEditButton,
    passedEditButton = _ref.editButton,
    onEditPress = _ref.onEditPress,
    imageProps = _ref.imageProps,
    placeholderStyle = _ref.placeholderStyle,
    renderPlaceholderContent = _ref.renderPlaceholderContent,
    ImageComponent = _ref.ImageComponent,
    attributes = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var width = typeof size === 'number' ? size : avatarSizes[size] || avatarSizes.small;
  var height = width;
  var titleSize = width / 2;
  var iconSize = width / 2;
  var editButton = (0, _extends2.default)({}, defaultEditButton, passedEditButton);
  var editButtonSize = editButton.size || (width + height) / 2 / 3;
  var Utils = showEditButton && _react.default.createElement(_reactNative.TouchableHighlight, {
    style: _reactNative.StyleSheet.flatten([styles.editButton, {
      width: editButtonSize,
      height: editButtonSize,
      borderRadius: editButtonSize / 2
    }, editButton.style]),
    underlayColor: editButton.underlayColor,
    onPress: onEditPress
  }, _react.default.createElement(_reactNative.View, null, _react.default.createElement(_Icon.default, (0, _extends2.default)({
    size: editButtonSize * 0.8
  }, editButton))));
  var PlaceholderContent = renderPlaceholderContent && (0, _helpers.renderNode)(undefined, renderPlaceholderContent) || title && _react.default.createElement(_reactNative.Text, {
    style: _reactNative.StyleSheet.flatten([styles.title, {
      fontSize: titleSize
    }, titleStyle])
  }, title) || icon && _react.default.createElement(_Icon.default, {
    style: iconStyle && iconStyle,
    color: icon.color || 'white',
    name: icon.name || 'user',
    size: icon.size || iconSize,
    type: icon.type && icon.type
  });
  var hidePlaceholder = !source;
  return _react.default.createElement(Component, (0, _extends2.default)({
    onPress: onPress,
    onLongPress: onLongPress,
    style: _reactNative.StyleSheet.flatten([styles.container, {
      height: height,
      width: width
    }, rounded && {
      borderRadius: width / 2
    }, containerStyle])
  }, attributes), _react.default.createElement(_Image.default, (0, _extends2.default)({
    placeholderStyle: _reactNative.StyleSheet.flatten([placeholderStyle, hidePlaceholder && {
      backgroundColor: 'transparent'
    }]),
    PlaceholderContent: PlaceholderContent,
    containerStyle: _reactNative.StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle, rounded && {
      borderRadius: width / 2,
      overflow: 'hidden'
    }]),
    source: source
  }, imageProps, {
    style: _reactNative.StyleSheet.flatten([styles.avatar, imageProps && imageProps.style, avatarStyle]),
    ImageComponent: ImageComponent
  })), Utils);
};
exports.Avatar = Avatar;
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: 'transparent'
  },
  avatar: {
    flex: 1,
    width: null,
    height: null
  },
  overlayContainer: {
    flex: 1,
    backgroundColor: '#bdbdbd'
  },
  title: {
    color: '#ffffff',
    backgroundColor: 'transparent',
    textAlign: 'center'
  },
  editButton: (0, _extends2.default)({
    position: 'absolute',
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aaa'
  }, _reactNative.Platform.select({
    android: {
      elevation: 1
    },
    default: {
      shadowColor: '#000',
      shadowOffset: {
        width: 1,
        height: 1
      },
      shadowRadius: 2,
      shadowOpacity: 0.5
    }
  }))
});
Avatar.propTypes = {
  Component: _propTypes.default.oneOf([_reactNative.View, _reactNative.TouchableOpacity, _reactNative.TouchableHighlight, _reactNative.TouchableNativeFeedback, _reactNative.TouchableWithoutFeedback]),
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  containerStyle: _config.ViewPropTypes.style,
  source: _reactNative.Image.propTypes.source,
  avatarStyle: _config.ViewPropTypes.style,
  rounded: _propTypes.default.bool,
  title: _propTypes.default.string,
  titleStyle: _reactNative.Text.propTypes.style,
  overlayContainerStyle: _config.ViewPropTypes.style,
  activeOpacity: _propTypes.default.number,
  icon: _propTypes.default.object,
  iconStyle: _reactNative.Text.propTypes.style,
  size: _propTypes.default.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large', 'xlarge']), _propTypes.default.number]),
  showEditButton: _propTypes.default.bool,
  onEditPress: _propTypes.default.func,
  editButton: _propTypes.default.shape({
    size: _propTypes.default.number,
    name: _propTypes.default.string,
    type: _propTypes.default.string,
    color: _propTypes.default.string,
    underlayColor: _propTypes.default.string,
    style: _config.ViewPropTypes.style
  }),
  placeholderStyle: _config.ViewPropTypes.style,
  renderPlaceholderContent: _helpers.nodeType,
  imageProps: _propTypes.default.object,
  ImageComponent: _propTypes.default.elementType
};
Avatar.defaultProps = {
  showEditButton: false,
  onEditPress: null,
  size: 'small',
  editButton: defaultEditButton,
  ImageComponent: _reactNative.Image
};
var _default = (0, _config.withTheme)(Avatar, 'Avatar');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,