12e655c156204d527f049f4a0a3fdd65
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedInterpolation = require('./AnimatedInterpolation');
var AnimatedNode = require('./AnimatedNode');
var AnimatedValue = require('./AnimatedValue');
var AnimatedWithChildren = require('./AnimatedWithChildren');
var AnimatedDivision = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedDivision);
  function AnimatedDivision(a, b) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedDivision);
    _this = _super.call(this);
    _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this;
  }
  (0, _createClass2.default)(AnimatedDivision, [{
    key: "__makeNative",
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__makeNative", this).call(this);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var a = this._a.__getValue();
      var b = this._b.__getValue();
      if (b === 0) {
        console.error('Detected division by zero in AnimatedDivision');
      }
      return a / b;
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);
module.exports = AnimatedDivision;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwiQW5pbWF0ZWROb2RlIiwiQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkV2l0aENoaWxkcmVuIiwiQW5pbWF0ZWREaXZpc2lvbiIsIl9BbmltYXRlZFdpdGhDaGlsZHJlbiIsIl9zdXBlciIsImEiLCJiIiwiX3RoaXMiLCJfYSIsIl9iIiwia2V5IiwidmFsdWUiLCJfX21ha2VOYXRpdmUiLCJfX2dldFZhbHVlIiwiY29uc29sZSIsImVycm9yIiwiaW50ZXJwb2xhdGUiLCJjb25maWciLCJfX2F0dGFjaCIsIl9fYWRkQ2hpbGQiLCJfX2RldGFjaCIsIl9fcmVtb3ZlQ2hpbGQiLCJfX2dldE5hdGl2ZUNvbmZpZyIsInR5cGUiLCJpbnB1dCIsIl9fZ2V0TmF0aXZlVGFnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFuaW1hdGVkRGl2aXNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRJbnRlcnBvbGF0aW9uJyk7XG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5cbmltcG9ydCB0eXBlIHtJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZX0gZnJvbSAnLi9BbmltYXRlZEludGVycG9sYXRpb24nO1xuXG5jbGFzcyBBbmltYXRlZERpdmlzaW9uIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICBfYTogQW5pbWF0ZWROb2RlO1xuICBfYjogQW5pbWF0ZWROb2RlO1xuXG4gIGNvbnN0cnVjdG9yKGE6IEFuaW1hdGVkTm9kZSB8IG51bWJlciwgYjogQW5pbWF0ZWROb2RlIHwgbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9hID0gdHlwZW9mIGEgPT09ICdudW1iZXInID8gbmV3IEFuaW1hdGVkVmFsdWUoYSkgOiBhO1xuICAgIHRoaXMuX2IgPSB0eXBlb2YgYiA9PT0gJ251bWJlcicgPyBuZXcgQW5pbWF0ZWRWYWx1ZShiKSA6IGI7XG4gIH1cblxuICBfX21ha2VOYXRpdmUoKSB7XG4gICAgdGhpcy5fYS5fX21ha2VOYXRpdmUoKTtcbiAgICB0aGlzLl9iLl9fbWFrZU5hdGl2ZSgpO1xuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZSgpO1xuICB9XG5cbiAgX19nZXRWYWx1ZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IGEgPSB0aGlzLl9hLl9fZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBiID0gdGhpcy5fYi5fX2dldFZhbHVlKCk7XG4gICAgaWYgKGIgPT09IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RldGVjdGVkIGRpdmlzaW9uIGJ5IHplcm8gaW4gQW5pbWF0ZWREaXZpc2lvbicpO1xuICAgIH1cbiAgICByZXR1cm4gYSAvIGI7XG4gIH1cblxuICBpbnRlcnBvbGF0ZShjb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlKTogQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIHtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGVkSW50ZXJwb2xhdGlvbih0aGlzLCBjb25maWcpO1xuICB9XG5cbiAgX19hdHRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fYS5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuX2IuX19hZGRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIF9fZGV0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX2EuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLl9iLl9fcmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkaXZpc2lvbicsXG4gICAgICBpbnB1dDogW3RoaXMuX2EuX19nZXROYXRpdmVUYWcoKSwgdGhpcy5fYi5fX2dldE5hdGl2ZVRhZygpXSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWREaXZpc2lvbjtcbiJdLCJtYXBwaW5ncyI6IkFBU0EsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FB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