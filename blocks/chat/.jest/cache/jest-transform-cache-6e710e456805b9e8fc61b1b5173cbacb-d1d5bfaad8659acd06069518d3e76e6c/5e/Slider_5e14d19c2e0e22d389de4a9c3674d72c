cb3393542d619dd24193029bb1e91b35
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Slider = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _excluded = ["minimumValue", "maximumValue", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "containerStyle", "style", "trackStyle", "thumbStyle", "debugTouchArea", "orientation"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var TRACK_SIZE = 4;
var THUMB_SIZE = 20;
var DEFAULT_ANIMATION_CONFIGS = {
  spring: {
    friction: 7,
    tension: 100
  },
  timing: {
    duration: 150,
    easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
    delay: 0
  }
};
var getBoundedValue = function getBoundedValue(_ref) {
  var value = _ref.value,
    maximumValue = _ref.maximumValue,
    minimumValue = _ref.minimumValue;
  return value > maximumValue ? maximumValue : value < minimumValue ? minimumValue : value;
};
var Rect = function () {
  function Rect(x, y, width, height) {
    (0, _classCallCheck2.default)(this, Rect);
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  (0, _createClass2.default)(Rect, [{
    key: "containsPoint",
    value: function containsPoint(x, y) {
      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
    }
  }]);
  return Rect;
}();
var Slider = function (_Component) {
  (0, _inherits2.default)(Slider, _Component);
  var _super = _createSuper(Slider);
  function Slider(props) {
    var _this;
    (0, _classCallCheck2.default)(this, Slider);
    _this = _super.call(this, props);
    _this.measureContainer = function (x) {
      _this.handleMeasure('containerSize', x);
    };
    _this.measureTrack = function (x) {
      _this.handleMeasure('trackSize', x);
    };
    _this.measureThumb = function (x) {
      _this.handleMeasure('thumbSize', x);
    };
    _this.state = {
      containerSize: {
        width: 0,
        height: 0
      },
      trackSize: {
        width: 0,
        height: 0
      },
      thumbSize: {
        width: 0,
        height: 0
      },
      allMeasured: false,
      value: new _reactNative.Animated.Value(getBoundedValue(props))
    };
    _this.panResponder = _reactNative.PanResponder.create({
      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this)),
      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderGrant: _this.handlePanResponderGrant.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderMove: _this.handlePanResponderMove.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderRelease: _this.handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind((0, _assertThisInitialized2.default)(_this)),
      onPanResponderTerminate: _this.handlePanResponderEnd.bind((0, _assertThisInitialized2.default)(_this))
    });
    return _this;
  }
  (0, _createClass2.default)(Slider, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var newValue = getBoundedValue(this.props);
      if (prevProps.value !== newValue) {
        if (this.props.animateTransitions) {
          this.setCurrentValueAnimated(newValue);
        } else {
          this.setCurrentValue(newValue);
        }
      }
    }
  }, {
    key: "setCurrentValue",
    value: function setCurrentValue(value) {
      this.state.value.setValue(value);
    }
  }, {
    key: "setCurrentValueAnimated",
    value: function setCurrentValueAnimated(value) {
      var animationType = this.props.animationType;
      var animationConfig = (0, _extends2.default)({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {
        toValue: value
      });
      _reactNative.Animated[animationType](this.state.value, animationConfig).start();
    }
  }, {
    key: "handleMoveShouldSetPanResponder",
    value: function handleMoveShouldSetPanResponder() {
      return false;
    }
  }, {
    key: "handlePanResponderGrant",
    value: function handlePanResponderGrant() {
      this._previousLeft = this.getThumbLeft(this.getCurrentValue());
      this.fireChangeEvent('onSlidingStart');
    }
  }, {
    key: "handlePanResponderMove",
    value: function handlePanResponderMove(_, gestureState) {
      if (this.props.disabled) {
        return;
      }
      this.setCurrentValue(this.getValue(gestureState));
      this.fireChangeEvent('onValueChange');
    }
  }, {
    key: "handlePanResponderRequestEnd",
    value: function handlePanResponderRequestEnd() {
      return false;
    }
  }, {
    key: "handlePanResponderEnd",
    value: function handlePanResponderEnd(_, gestureState) {
      if (this.props.disabled) {
        return;
      }
      this.setCurrentValue(this.getValue(gestureState));
      this.fireChangeEvent('onSlidingComplete');
    }
  }, {
    key: "thumbHitTest",
    value: function thumbHitTest(_ref2) {
      var nativeEvent = _ref2.nativeEvent;
      var thumbTouchRect = this.getThumbTouchRect();
      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);
    }
  }, {
    key: "handleStartShouldSetPanResponder",
    value: function handleStartShouldSetPanResponder(e) {
      return this.thumbHitTest(e);
    }
  }, {
    key: "fireChangeEvent",
    value: function fireChangeEvent(event) {
      if (this.props[event]) {
        this.props[event](this.getCurrentValue());
      }
    }
  }, {
    key: "getTouchOverflowSize",
    value: function getTouchOverflowSize() {
      var _this$state = this.state,
        thumbSize = _this$state.thumbSize,
        allMeasured = _this$state.allMeasured,
        containerSize = _this$state.containerSize;
      var thumbTouchSize = this.props.thumbTouchSize;
      var size = {};
      if (allMeasured === true) {
        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);
        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);
      }
      return size;
    }
  }, {
    key: "getTouchOverflowStyle",
    value: function getTouchOverflowStyle() {
      var _this$getTouchOverflo = this.getTouchOverflowSize(),
        width = _this$getTouchOverflo.width,
        height = _this$getTouchOverflo.height;
      var touchOverflowStyle = {};
      if (width !== undefined && height !== undefined) {
        var verticalMargin = -height / 2;
        touchOverflowStyle.marginTop = verticalMargin;
        touchOverflowStyle.marginBottom = verticalMargin;
        var horizontalMargin = -width / 2;
        touchOverflowStyle.marginLeft = horizontalMargin;
        touchOverflowStyle.marginRight = horizontalMargin;
      }
      if (this.props.debugTouchArea === true) {
        touchOverflowStyle.backgroundColor = 'orange';
        touchOverflowStyle.opacity = 0.5;
      }
      return touchOverflowStyle;
    }
  }, {
    key: "handleMeasure",
    value: function handleMeasure(name, x) {
      var _x$nativeEvent$layout = x.nativeEvent.layout,
        layoutWidth = _x$nativeEvent$layout.width,
        layoutHeight = _x$nativeEvent$layout.height;
      var width = this.props.orientation === 'vertical' ? layoutHeight : layoutWidth;
      var height = this.props.orientation === 'vertical' ? layoutWidth : layoutHeight;
      var size = {
        width: width,
        height: height
      };
      var storeName = "_" + name;
      var currentSize = this[storeName];
      if (currentSize && width === currentSize.width && height === currentSize.height) {
        return;
      }
      this[storeName] = size;
      if (this._containerSize && this._trackSize && this._thumbSize) {
        this.setState({
          containerSize: this._containerSize,
          trackSize: this._trackSize,
          thumbSize: this._thumbSize,
          allMeasured: true
        });
      }
    }
  }, {
    key: "getValue",
    value: function getValue(gestureState) {
      var length = this.state.containerSize.width - this.state.thumbSize.width;
      var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);
      var ratio = thumbLeft / length;
      if (this.props.step) {
        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));
      }
      return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));
    }
  }, {
    key: "getCurrentValue",
    value: function getCurrentValue() {
      return this.state.value.__getValue();
    }
  }, {
    key: "getRatio",
    value: function getRatio(value) {
      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);
    }
  }, {
    key: "getThumbLeft",
    value: function getThumbLeft(value) {
      var ratio = this.getRatio(value);
      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);
    }
  }, {
    key: "getThumbTouchRect",
    value: function getThumbTouchRect() {
      var _this$state2 = this.state,
        thumbSize = _this$state2.thumbSize,
        containerSize = _this$state2.containerSize;
      var thumbTouchSize = this.props.thumbTouchSize;
      var touchOverflowSize = this.getTouchOverflowSize();
      if (this.props.orientation === 'vertical') {
        return new Rect(touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, thumbTouchSize.width, thumbTouchSize.height);
      }
      return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2, thumbTouchSize.width, thumbTouchSize.height);
    }
  }, {
    key: "renderDebugThumbTouchRect",
    value: function renderDebugThumbTouchRect(thumbLeft) {
      var thumbTouchRect = this.getThumbTouchRect();
      var positionStyle = {
        left: thumbLeft,
        top: thumbTouchRect.y,
        width: thumbTouchRect.width,
        height: thumbTouchRect.height
      };
      return _react.default.createElement(_reactNative.Animated.View, {
        style: positionStyle,
        pointerEvents: "none"
      });
    }
  }, {
    key: "getMinimumTrackStyles",
    value: function getMinimumTrackStyles(thumbStart) {
      var _this$state3 = this.state,
        thumbSize = _this$state3.thumbSize,
        trackSize = _this$state3.trackSize;
      var minimumTrackStyle = {
        position: 'absolute'
      };
      if (this.props.orientation === 'vertical') {
        minimumTrackStyle.height = _reactNative.Animated.add(thumbStart, thumbSize.height / 2);
        minimumTrackStyle.marginLeft = -trackSize.width;
      } else {
        minimumTrackStyle.width = _reactNative.Animated.add(thumbStart, thumbSize.width / 2);
        minimumTrackStyle.marginTop = -trackSize.height;
      }
      return minimumTrackStyle;
    }
  }, {
    key: "getThumbPositionStyles",
    value: function getThumbPositionStyles(thumbStart) {
      if (this.props.orientation === 'vertical') {
        return [{
          translateX: -(this.state.trackSize.height + this.state.thumbSize.height) / 2
        }, {
          translateY: thumbStart
        }];
      }
      return [{
        translateX: thumbStart
      }, {
        translateY: -(this.state.trackSize.height + this.state.thumbSize.height) / 2
      }];
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        minimumValue = _this$props.minimumValue,
        maximumValue = _this$props.maximumValue,
        minimumTrackTintColor = _this$props.minimumTrackTintColor,
        maximumTrackTintColor = _this$props.maximumTrackTintColor,
        thumbTintColor = _this$props.thumbTintColor,
        containerStyle = _this$props.containerStyle,
        style = _this$props.style,
        trackStyle = _this$props.trackStyle,
        thumbStyle = _this$props.thumbStyle,
        debugTouchArea = _this$props.debugTouchArea,
        orientation = _this$props.orientation,
        other = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var _this$state4 = this.state,
        value = _this$state4.value,
        containerSize = _this$state4.containerSize,
        thumbSize = _this$state4.thumbSize,
        allMeasured = _this$state4.allMeasured;
      var mainStyles = containerStyle || styles;
      var thumbStart = value.interpolate({
        inputRange: [minimumValue, maximumValue],
        outputRange: [0, containerSize.width - thumbSize.width]
      });
      var valueVisibleStyle = {};
      if (!allMeasured) {
        valueVisibleStyle.height = 0;
        valueVisibleStyle.width = 0;
      }
      var minimumTrackStyle = (0, _extends2.default)({}, this.getMinimumTrackStyles(thumbStart), {
        backgroundColor: minimumTrackTintColor
      }, valueVisibleStyle);
      var thumbStyleTransform = thumbStyle && thumbStyle.transform || [];
      var touchOverflowStyle = this.getTouchOverflowStyle();
      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, other, {
        style: _reactNative.StyleSheet.flatten([orientation === 'vertical' ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),
        onLayout: this.measureContainer
      }), _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, {
          backgroundColor: maximumTrackTintColor
        }]),
        onLayout: this.measureTrack
      }), _react.default.createElement(_reactNative.Animated.View, {
        style: _reactNative.StyleSheet.flatten([mainStyles.track, orientation === 'vertical' ? mainStyles.trackVertical : mainStyles.trackHorizontal, trackStyle, minimumTrackStyle])
      }), _react.default.createElement(_reactNative.Animated.View, {
        testID: "sliderThumb",
        onLayout: this.measureThumb,
        style: _reactNative.StyleSheet.flatten([{
          backgroundColor: thumbTintColor
        }, mainStyles.thumb, orientation === 'vertical' ? mainStyles.thumbVertical(trackStyle && trackStyle.width) : mainStyles.thumbHorizontal(trackStyle && trackStyle.height), thumbStyle, (0, _extends2.default)({
          transform: [].concat((0, _toConsumableArray2.default)(this.getThumbPositionStyles(thumbStart)), (0, _toConsumableArray2.default)(thumbStyleTransform))
        }, valueVisibleStyle)])
      }), _react.default.createElement(_reactNative.View, (0, _extends2.default)({
        style: _reactNative.StyleSheet.flatten([styles.touchArea, touchOverflowStyle])
      }, this.panResponder.panHandlers), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)));
    }
  }]);
  return Slider;
}(_react.Component);
exports.Slider = Slider;
Slider.propTypes = {
  value: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  minimumValue: _propTypes.default.number,
  maximumValue: _propTypes.default.number,
  step: _propTypes.default.number,
  minimumTrackTintColor: _propTypes.default.string,
  maximumTrackTintColor: _propTypes.default.string,
  thumbTintColor: _propTypes.default.string,
  thumbTouchSize: _propTypes.default.shape({
    width: _propTypes.default.number,
    height: _propTypes.default.number
  }),
  onValueChange: _propTypes.default.func,
  onSlidingStart: _propTypes.default.func,
  onSlidingComplete: _propTypes.default.func,
  style: _config.ViewPropTypes.style,
  trackStyle: _config.ViewPropTypes.style,
  thumbStyle: _config.ViewPropTypes.style,
  debugTouchArea: _propTypes.default.bool,
  animateTransitions: _propTypes.default.bool,
  animationType: _propTypes.default.oneOf(['spring', 'timing']),
  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),
  animationConfig: _propTypes.default.object,
  containerStyle: _config.ViewPropTypes.style
};
Slider.defaultProps = {
  value: 0,
  minimumValue: 0,
  maximumValue: 1,
  step: 0,
  minimumTrackTintColor: '#3f3f3f',
  maximumTrackTintColor: '#b3b3b3',
  thumbTintColor: 'red',
  thumbTouchSize: {
    width: 40,
    height: 40
  },
  debugTouchArea: false,
  animationType: 'timing',
  orientation: 'horizontal'
};
var styles = _reactNative.StyleSheet.create({
  containerHorizontal: {
    height: 40,
    justifyContent: 'center'
  },
  containerVertical: {
    width: 40,
    flexDirection: 'column',
    alignItems: 'center'
  },
  track: {
    borderRadius: TRACK_SIZE / 2
  },
  trackHorizontal: {
    height: TRACK_SIZE
  },
  trackVertical: {
    flex: 1,
    width: TRACK_SIZE
  },
  thumb: {
    position: 'absolute',
    width: THUMB_SIZE,
    height: THUMB_SIZE,
    borderRadius: THUMB_SIZE / 2
  },
  thumbHorizontal: function thumbHorizontal(height) {
    return {
      top: 22 + (height ? (height - 4) / 2 : 0)
    };
  },
  thumbVertical: function thumbVertical(width) {
    return {
      left: 22 + (width ? (width - 4) / 2 : 0)
    };
  },
  touchArea: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  debugThumbTouchArea: {
    position: 'absolute',
    backgroundColor: 'green',
    opacity: 0.5
  }
});
var _default = (0, _config.withTheme)(Slider, 'Slider');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,