7ce47d8872116f52288921026d45abfe
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _Badge = _interopRequireDefault(require("./Badge"));
var _excluded = ["bottom", "hidden", "left", "containerStyle"];
var withBadge = function withBadge(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var WithBadge = function WithBadge(props) {
      var bottom = options.bottom,
        _options$hidden = options.hidden,
        hidden = _options$hidden === void 0 ? false : _options$hidden,
        left = options.left,
        containerStyle = options.containerStyle,
        badgeProps = (0, _objectWithoutProperties2.default)(options, _excluded);
      var _options$right = options.right,
        right = _options$right === void 0 ? -16 : _options$right,
        _options$top = options.top,
        top = _options$top === void 0 ? -1 : _options$top;
      if (!value) {
        right = -3;
        top = 3;
      }
      var badgeValue = typeof value === 'function' ? value(props) : value;
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, _react.default.createElement(WrappedComponent, props), !hidden && _react.default.createElement(_Badge.default, (0, _extends2.default)({
        value: badgeValue,
        status: "error",
        containerStyle: _reactNative.StyleSheet.flatten([styles.badgeContainer, {
          bottom: bottom,
          left: left,
          right: right,
          top: top
        }])
      }, badgeProps)));
    };
    WithBadge.displayName = "WithBadge(" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ")";
    return WithBadge;
  };
};
var styles = _reactNative.StyleSheet.create({
  badgeContainer: {
    position: 'absolute'
  },
  container: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative'
  }
});
var _default = withBadge;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9CYWRnZSIsIl9leGNsdWRlZCIsIndpdGhCYWRnZSIsInZhbHVlIiwib3B0aW9ucyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIldyYXBwZWRDb21wb25lbnQiLCJXaXRoQmFkZ2UiLCJwcm9wcyIsImJvdHRvbSIsIl9vcHRpb25zJGhpZGRlbiIsImhpZGRlbiIsImxlZnQiLCJjb250YWluZXJTdHlsZSIsImJhZGdlUHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiZGVmYXVsdCIsIl9vcHRpb25zJHJpZ2h0IiwicmlnaHQiLCJfb3B0aW9ucyR0b3AiLCJ0b3AiLCJiYWRnZVZhbHVlIiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwiY29udGFpbmVyIiwiX2V4dGVuZHMyIiwic3RhdHVzIiwiYmFkZ2VDb250YWluZXIiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJjcmVhdGUiLCJwb3NpdGlvbiIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIndpdGhCYWRnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBCYWRnZSBmcm9tICcuL0JhZGdlJztcblxuY29uc3Qgd2l0aEJhZGdlID0gKHZhbHVlLCBvcHRpb25zID0ge30pID0+IFdyYXBwZWRDb21wb25lbnQgPT4ge1xuICBjb25zdCBXaXRoQmFkZ2UgPSBwcm9wcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgYm90dG9tLFxuICAgICAgaGlkZGVuID0gZmFsc2UsXG4gICAgICBsZWZ0LFxuICAgICAgY29udGFpbmVyU3R5bGUsXG4gICAgICAuLi5iYWRnZVByb3BzXG4gICAgfSA9IG9wdGlvbnM7XG5cbiAgICBsZXQgeyByaWdodCA9IC0xNiwgdG9wID0gLTEgfSA9IG9wdGlvbnM7XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByaWdodCA9IC0zO1xuICAgICAgdG9wID0gMztcbiAgICB9XG5cbiAgICBjb25zdCBiYWRnZVZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUocHJvcHMpIDogdmFsdWU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXcgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVdKX0+XG4gICAgICAgIDxXcmFwcGVkQ29tcG9uZW50IHsuLi5wcm9wc30gLz5cblxuICAgICAgICB7IWhpZGRlbiAmJiAoXG4gICAgICAgICAgPEJhZGdlXG4gICAgICAgICAgICB2YWx1ZT17YmFkZ2VWYWx1ZX1cbiAgICAgICAgICAgIHN0YXR1cz1cImVycm9yXCJcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICBzdHlsZXMuYmFkZ2VDb250YWluZXIsXG4gICAgICAgICAgICAgIHsgYm90dG9tLCBsZWZ0LCByaWdodCwgdG9wIH0sXG4gICAgICAgICAgICBdKX1cbiAgICAgICAgICAgIHsuLi5iYWRnZVByb3BzfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfTtcblxuICBXaXRoQmFkZ2UuZGlzcGxheU5hbWUgPSBgV2l0aEJhZGdlKCR7V3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fFxuICAgIFdyYXBwZWRDb21wb25lbnQubmFtZSB8fFxuICAgICdDb21wb25lbnQnfSlgO1xuXG4gIHJldHVybiBXaXRoQmFkZ2U7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJhZGdlQ29udGFpbmVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIH0sXG4gIGNvbnRhaW5lcjoge1xuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoQmFkZ2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBNEIsSUFBQUcsU0FBQTtBQUU1QixJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBSUMsS0FBSztFQUFBLElBQUVDLE9BQU8sR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBQUEsT0FBSyxVQUFBRyxnQkFBZ0IsRUFBSTtJQUM3RCxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBR0MsS0FBSyxFQUFJO01BQ3pCLElBQ0VDLE1BQU0sR0FLSlAsT0FBTyxDQUxUTyxNQUFNO1FBQUFDLGVBQUEsR0FLSlIsT0FBTyxDQUpUUyxNQUFNO1FBQU5BLE1BQU0sR0FBQUQsZUFBQSxjQUFHLEtBQUssR0FBQUEsZUFBQTtRQUNkRSxJQUFJLEdBR0ZWLE9BQU8sQ0FIVFUsSUFBSTtRQUNKQyxjQUFjLEdBRVpYLE9BQU8sQ0FGVFcsY0FBYztRQUNYQyxVQUFVLE9BQUFDLHlCQUFBLENBQUFDLE9BQUEsRUFDWGQsT0FBTyxFQUFBSCxTQUFBO01BRVgsSUFBQWtCLGNBQUEsR0FBZ0NmLE9BQU8sQ0FBakNnQixLQUFLO1FBQUxBLEtBQUssR0FBQUQsY0FBQSxjQUFHLENBQUMsRUFBRSxHQUFBQSxjQUFBO1FBQUFFLFlBQUEsR0FBZWpCLE9BQU8sQ0FBcEJrQixHQUFHO1FBQUhBLEdBQUcsR0FBQUQsWUFBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxZQUFBO01BRTNCLElBQUksQ0FBQ2xCLEtBQUssRUFBRTtRQUNWaUIsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNWRSxHQUFHLEdBQUcsQ0FBQztNQUNUO01BRUEsSUFBTUMsVUFBVSxHQUFHLE9BQU9wQixLQUFLLEtBQUssVUFBVSxHQUFHQSxLQUFLLENBQUNPLEtBQUssQ0FBQyxHQUFHUCxLQUFLO01BRXJFLE9BQ0VQLE1BQUEsQ0FBQXNCLE9BQUEsQ0FBQU0sYUFBQSxDQUFDekIsWUFBQSxDQUFBMEIsSUFBSTtRQUFDQyxLQUFLLEVBQUVDLHVCQUFVLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxNQUFNLENBQUNDLFNBQVMsRUFBRWYsY0FBYyxDQUFDO01BQUUsR0FDbEVuQixNQUFBLENBQUFzQixPQUFBLENBQUFNLGFBQUEsQ0FBQ2hCLGdCQUFnQixFQUFLRSxLQUFRLENBQUMsRUFFOUIsQ0FBQ0csTUFBTSxJQUNOakIsTUFBQSxDQUFBc0IsT0FBQSxDQUFBTSxhQUFBLENBQUN4QixNQUFBLENBQUFrQixPQUFLLE1BQUFhLFNBQUEsQ0FBQWIsT0FBQTtRQUNKZixLQUFLLEVBQUVvQixVQUFXO1FBQ2xCUyxNQUFNLEVBQUMsT0FBTztRQUNkakIsY0FBYyxFQUFFWSx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FDakNDLE1BQU0sQ0FBQ0ksY0FBYyxFQUNyQjtVQUFFdEIsTUFBTSxFQUFOQSxNQUFNO1VBQUVHLElBQUksRUFBSkEsSUFBSTtVQUFFTSxLQUFLLEVBQUxBLEtBQUs7VUFBRUUsR0FBRyxFQUFIQTtRQUFJLENBQUMsQ0FDN0I7TUFBRSxHQUNDTixVQUFVLENBQ2YsQ0FFQyxDQUFDO0lBRVgsQ0FBQztJQUVEUCxTQUFTLENBQUN5QixXQUFXLG1CQUFnQjFCLGdCQUFnQixDQUFDMEIsV0FBVyxJQUMvRDFCLGdCQUFnQixDQUFDMkIsSUFBSSxJQUNyQixXQUFXLE9BQUc7SUFFaEIsT0FBTzFCLFNBQVM7RUFDbEIsQ0FBQztBQUFBO0FBRUQsSUFBTW9CLE1BQU0sR0FBR0YsdUJBQVUsQ0FBQ1MsTUFBTSxDQUFDO0VBQy9CSCxjQUFjLEVBQUU7SUFDZEksUUFBUSxFQUFFO0VBQ1osQ0FBQztFQUNEUCxTQUFTLEVBQUU7SUFDVFEsVUFBVSxFQUFFLFFBQVE7SUFDcEJDLGNBQWMsRUFBRSxRQUFRO0lBQ3hCRixRQUFRLEVBQUU7RUFDWjtBQUNGLENBQUMsQ0FBQztBQUFDLElBQUFHLFFBQUEsR0FFWXRDLFNBQVM7QUFBQXVDLE9BQUEsQ0FBQXZCLE9BQUEsR0FBQXNCLFFBQUEifQ==