940a96c935565c21a37ed267a50ef082
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FeaturedTile = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _excluded = ["title", "icon", "caption", "imageSrc", "containerStyle", "imageContainerStyle", "overlayContainerStyle", "iconContainerStyle", "titleStyle", "captionStyle", "ImageComponent", "imageProps"];
var renderText = function renderText(content, defaultProps, style) {
  return (0, _helpers.renderNode)(_Text.default, content, (0, _extends2.default)({}, defaultProps, {
    style: _reactNative.StyleSheet.flatten([style, defaultProps && defaultProps.style])
  }));
};
var FeaturedTile = function FeaturedTile(props) {
  var title = props.title,
    icon = props.icon,
    caption = props.caption,
    imageSrc = props.imageSrc,
    containerStyle = props.containerStyle,
    imageContainerStyle = props.imageContainerStyle,
    overlayContainerStyle = props.overlayContainerStyle,
    iconContainerStyle = props.iconContainerStyle,
    titleStyle = props.titleStyle,
    captionStyle = props.captionStyle,
    ImageComponent = props.ImageComponent,
    imageProps = props.imageProps,
    attributes = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _props$width = props.width,
    width = _props$width === void 0 ? _reactNative.Dimensions.get('window').width : _props$width,
    _props$height = props.height,
    height = _props$height === void 0 ? width * 0.8 : _props$height;
  var styles = _reactNative.StyleSheet.create({
    container: {
      width: width,
      height: height
    },
    imageContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      width: width,
      height: height
    },
    overlayContainer: {
      flex: 1,
      alignItems: 'center',
      alignSelf: 'stretch',
      justifyContent: 'center',
      paddingLeft: 25,
      paddingRight: 25,
      paddingTop: 45,
      paddingBottom: 40,
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    text: {
      color: '#ffffff',
      backgroundColor: 'rgba(0,0,0,0)',
      marginBottom: 15,
      textAlign: 'center'
    },
    iconContainer: {
      justifyContent: 'center',
      alignItems: 'center',
      alignSelf: 'center'
    }
  });
  return _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container, containerStyle && containerStyle])
  }), _react.default.createElement(ImageComponent, (0, _extends2.default)({
    resizeMode: "cover"
  }, imageProps, {
    source: imageSrc,
    style: _reactNative.StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.overlayContainer, overlayContainerStyle && overlayContainerStyle])
  }, _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle])
  }, icon && _react.default.createElement(_Icon.default, icon)), _react.default.createElement(_Text.default, {
    testID: "featuredTileTitle",
    h4: true,
    style: _reactNative.StyleSheet.flatten([styles.text, titleStyle && titleStyle])
  }, title), renderText(caption, {
    style: captionStyle
  }, styles.text))));
};
exports.FeaturedTile = FeaturedTile;
FeaturedTile.propTypes = {
  title: _propTypes.default.string,
  icon: _propTypes.default.object,
  caption: _propTypes.default.node,
  imageSrc: _reactNative.Image.propTypes.source,
  onPress: _propTypes.default.func,
  containerStyle: _config.ViewPropTypes.style,
  iconContainerStyle: _config.ViewPropTypes.style,
  imageContainerStyle: _config.ViewPropTypes.style,
  overlayContainerStyle: _config.ViewPropTypes.style,
  titleStyle: _reactNative.Text.propTypes.style,
  captionStyle: _reactNative.Text.propTypes.style,
  width: _propTypes.default.number,
  height: _propTypes.default.number,
  ImageComponent: _propTypes.default.elementType,
  imageProps: _propTypes.default.object
};
FeaturedTile.defaultProps = {
  ImageComponent: _config.BackgroundImage,
  imageProps: {}
};
var _default = (0, _config.withTheme)(FeaturedTile, 'FeaturedTile');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVhY3ROYXRpdmUiLCJfY29uZmlnIiwiX2hlbHBlcnMiLCJfVGV4dCIsIl9JY29uIiwiX2V4Y2x1ZGVkIiwicmVuZGVyVGV4dCIsImNvbnRlbnQiLCJkZWZhdWx0UHJvcHMiLCJzdHlsZSIsInJlbmRlck5vZGUiLCJUZXh0IiwiX2V4dGVuZHMyIiwiZGVmYXVsdCIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiRmVhdHVyZWRUaWxlIiwicHJvcHMiLCJ0aXRsZSIsImljb24iLCJjYXB0aW9uIiwiaW1hZ2VTcmMiLCJjb250YWluZXJTdHlsZSIsImltYWdlQ29udGFpbmVyU3R5bGUiLCJvdmVybGF5Q29udGFpbmVyU3R5bGUiLCJpY29uQ29udGFpbmVyU3R5bGUiLCJ0aXRsZVN0eWxlIiwiY2FwdGlvblN0eWxlIiwiSW1hZ2VDb21wb25lbnQiLCJpbWFnZVByb3BzIiwiYXR0cmlidXRlcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfcHJvcHMkd2lkdGgiLCJ3aWR0aCIsIkRpbWVuc2lvbnMiLCJnZXQiLCJfcHJvcHMkaGVpZ2h0IiwiaGVpZ2h0Iiwic3R5bGVzIiwiY3JlYXRlIiwiY29udGFpbmVyIiwiaW1hZ2VDb250YWluZXIiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJvdmVybGF5Q29udGFpbmVyIiwiZmxleCIsImFsaWduU2VsZiIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRleHQiLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsIm1hcmdpbkJvdHRvbSIsInRleHRBbGlnbiIsImljb25Db250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwiVG91Y2hhYmxlT3BhY2l0eSIsInJlc2l6ZU1vZGUiLCJzb3VyY2UiLCJWaWV3IiwidGVzdElEIiwiaDQiLCJleHBvcnRzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwib2JqZWN0Iiwibm9kZSIsIkltYWdlIiwib25QcmVzcyIsImZ1bmMiLCJWaWV3UHJvcFR5cGVzIiwiTmF0aXZlVGV4dCIsIm51bWJlciIsImVsZW1lbnRUeXBlIiwiQmFja2dyb3VuZEltYWdlIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJGZWF0dXJlZFRpbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1xuICBUb3VjaGFibGVPcGFjaXR5LFxuICBUZXh0IGFzIE5hdGl2ZVRleHQsXG4gIFZpZXcsXG4gIEltYWdlLFxuICBTdHlsZVNoZWV0LFxuICBEaW1lbnNpb25zLFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgeyBWaWV3UHJvcFR5cGVzLCBCYWNrZ3JvdW5kSW1hZ2UsIHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyByZW5kZXJOb2RlIH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmltcG9ydCBUZXh0IGZyb20gJy4uL3RleHQvVGV4dCc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29ucy9JY29uJztcblxuY29uc3QgcmVuZGVyVGV4dCA9IChjb250ZW50LCBkZWZhdWx0UHJvcHMsIHN0eWxlKSA9PlxuICByZW5kZXJOb2RlKFRleHQsIGNvbnRlbnQsIHtcbiAgICAuLi5kZWZhdWx0UHJvcHMsXG4gICAgc3R5bGU6IFN0eWxlU2hlZXQuZmxhdHRlbihbc3R5bGUsIGRlZmF1bHRQcm9wcyAmJiBkZWZhdWx0UHJvcHMuc3R5bGVdKSxcbiAgfSk7XG5cbmNvbnN0IEZlYXR1cmVkVGlsZSA9IHByb3BzID0+IHtcbiAgY29uc3Qge1xuICAgIHRpdGxlLFxuICAgIGljb24sXG4gICAgY2FwdGlvbixcbiAgICBpbWFnZVNyYyxcbiAgICBjb250YWluZXJTdHlsZSxcbiAgICBpbWFnZUNvbnRhaW5lclN0eWxlLFxuICAgIG92ZXJsYXlDb250YWluZXJTdHlsZSxcbiAgICBpY29uQ29udGFpbmVyU3R5bGUsXG4gICAgdGl0bGVTdHlsZSxcbiAgICBjYXB0aW9uU3R5bGUsXG4gICAgSW1hZ2VDb21wb25lbnQsXG4gICAgaW1hZ2VQcm9wcyxcbiAgICAuLi5hdHRyaWJ1dGVzXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCB7XG4gICAgd2lkdGggPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jykud2lkdGgsXG4gICAgaGVpZ2h0ID0gd2lkdGggKiAwLjgsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICB9LFxuICAgIGltYWdlQ29udGFpbmVyOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgIH0sXG4gICAgb3ZlcmxheUNvbnRhaW5lcjoge1xuICAgICAgZmxleDogMSxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBwYWRkaW5nTGVmdDogMjUsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDI1LFxuICAgICAgcGFkZGluZ1RvcDogNDUsXG4gICAgICBwYWRkaW5nQm90dG9tOiA0MCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgY29sb3I6ICcjZmZmZmZmJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgbWFyZ2luQm90dG9tOiAxNSxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgfSxcbiAgICBpY29uQ29udGFpbmVyOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgey4uLmF0dHJpYnV0ZXN9XG4gICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgY29udGFpbmVyU3R5bGUgJiYgY29udGFpbmVyU3R5bGUsXG4gICAgICBdKX1cbiAgICA+XG4gICAgICA8SW1hZ2VDb21wb25lbnRcbiAgICAgICAgcmVzaXplTW9kZT1cImNvdmVyXCJcbiAgICAgICAgey4uLmltYWdlUHJvcHN9XG4gICAgICAgIHNvdXJjZT17aW1hZ2VTcmN9XG4gICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgIHN0eWxlcy5pbWFnZUNvbnRhaW5lcixcbiAgICAgICAgICBpbWFnZUNvbnRhaW5lclN0eWxlICYmIGltYWdlQ29udGFpbmVyU3R5bGUsXG4gICAgICAgIF0pfVxuICAgICAgPlxuICAgICAgICA8Vmlld1xuICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLm92ZXJsYXlDb250YWluZXIsXG4gICAgICAgICAgICBvdmVybGF5Q29udGFpbmVyU3R5bGUgJiYgb3ZlcmxheUNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgIF0pfVxuICAgICAgICA+XG4gICAgICAgICAgPFZpZXdcbiAgICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgICBzdHlsZXMuaWNvbkNvbnRhaW5lcixcbiAgICAgICAgICAgICAgaWNvbkNvbnRhaW5lclN0eWxlICYmIGljb25Db250YWluZXJTdHlsZSxcbiAgICAgICAgICAgIF0pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpY29uICYmIDxJY29uIHsuLi5pY29ufSAvPn1cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgPFRleHRcbiAgICAgICAgICAgIHRlc3RJRD1cImZlYXR1cmVkVGlsZVRpdGxlXCJcbiAgICAgICAgICAgIGg0XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMudGV4dCwgdGl0bGVTdHlsZSAmJiB0aXRsZVN0eWxlXSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICB7cmVuZGVyVGV4dChjYXB0aW9uLCB7IHN0eWxlOiBjYXB0aW9uU3R5bGUgfSwgc3R5bGVzLnRleHQpfVxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L0ltYWdlQ29tcG9uZW50PlxuICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgKTtcbn07XG5cbkZlYXR1cmVkVGlsZS5wcm9wVHlwZXMgPSB7XG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjYXB0aW9uOiBQcm9wVHlwZXMubm9kZSxcbiAgaW1hZ2VTcmM6IEltYWdlLnByb3BUeXBlcy5zb3VyY2UsXG4gIG9uUHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBjb250YWluZXJTdHlsZTogVmlld1Byb3BUeXBlcy5zdHlsZSxcbiAgaWNvbkNvbnRhaW5lclN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICBpbWFnZUNvbnRhaW5lclN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICBvdmVybGF5Q29udGFpbmVyU3R5bGU6IFZpZXdQcm9wVHlwZXMuc3R5bGUsXG4gIHRpdGxlU3R5bGU6IE5hdGl2ZVRleHQucHJvcFR5cGVzLnN0eWxlLFxuICBjYXB0aW9uU3R5bGU6IE5hdGl2ZVRleHQucHJvcFR5cGVzLnN0eWxlLFxuICB3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICBJbWFnZUNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICBpbWFnZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuRmVhdHVyZWRUaWxlLmRlZmF1bHRQcm9wcyA9IHtcbiAgSW1hZ2VDb21wb25lbnQ6IEJhY2tncm91bmRJbWFnZSxcbiAgaW1hZ2VQcm9wczoge30sXG59O1xuXG5leHBvcnQgeyBGZWF0dXJlZFRpbGUgfTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShGZWF0dXJlZFRpbGUsICdGZWF0dXJlZFRpbGUnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQVNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFFBQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLEtBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLEtBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUFpQyxJQUFBTyxTQUFBO0FBRWpDLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFVQSxDQUFJQyxPQUFPLEVBQUVDLFlBQVksRUFBRUMsS0FBSztFQUFBLE9BQzlDLElBQUFDLG1CQUFVLEVBQUNDLGFBQUksRUFBRUosT0FBTyxNQUFBSyxTQUFBLENBQUFDLE9BQUEsTUFDbkJMLFlBQVk7SUFDZkMsS0FBSyxFQUFFSyx1QkFBVSxDQUFDQyxPQUFPLENBQUMsQ0FBQ04sS0FBSyxFQUFFRCxZ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