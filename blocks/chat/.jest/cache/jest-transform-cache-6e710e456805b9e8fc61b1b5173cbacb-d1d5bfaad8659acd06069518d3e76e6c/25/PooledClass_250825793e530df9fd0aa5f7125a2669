4bbb8c13343bdcea94cc083648b000d0
'use strict';

var invariant = require('invariant');
var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var _instance = Klass.instancePool.pop();
    Klass.call(_instance, copyFieldsFrom);
    return _instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};
var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var _instance2 = Klass.instancePool.pop();
    Klass.call(_instance2, a1, a2);
    return _instance2;
  } else {
    return new Klass(a1, a2);
  }
};
var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var _instance3 = Klass.instancePool.pop();
    Klass.call(_instance3, a1, a2, a3);
    return _instance3;
  } else {
    return new Klass(a1, a2, a3);
  }
};
var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var _instance4 = Klass.instancePool.pop();
    Klass.call(_instance4, a1, a2, a3, a4);
    return _instance4;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};
var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};
var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;
var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};
var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};
module.exports = PooledClass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwib25lQXJndW1lbnRQb29sZXIiLCJjb3B5RmllbGRzRnJvbSIsIktsYXNzIiwiaW5zdGFuY2VQb29sIiwibGVuZ3RoIiwiaW5zdGFuY2UiLCJwb3AiLCJjYWxsIiwidHdvQXJndW1lbnRQb29sZXIiLCJhMSIsImEyIiwidGhyZWVBcmd1bWVudFBvb2xlciIsImEzIiwiZm91ckFyZ3VtZW50UG9vbGVyIiwiYTQiLCJzdGFuZGFyZFJlbGVhc2VyIiwiZGVzdHJ1Y3RvciIsInBvb2xTaXplIiwicHVzaCIsIkRFRkFVTFRfUE9PTF9TSVpFIiwiREVGQVVMVF9QT09MRVIiLCJhZGRQb29saW5nVG8iLCJDb3B5Q29uc3RydWN0b3IiLCJwb29sZXIiLCJOZXdLbGFzcyIsImdldFBvb2xlZCIsInJlbGVhc2UiLCJQb29sZWRDbGFzcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQb29sZWRDbGFzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBTdGF0aWMgcG9vbGVycy4gU2V2ZXJhbCBjdXN0b20gdmVyc2lvbnMgZm9yIGVhY2ggcG90ZW50aWFsIG51bWJlciBvZlxuICogYXJndW1lbnRzLiBBIGNvbXBsZXRlbHkgZ2VuZXJpYyBwb29sZXIgaXMgZWFzeSB0byBpbXBsZW1lbnQsIGJ1dCB3b3VsZFxuICogcmVxdWlyZSBhY2Nlc3NpbmcgdGhlIGBhcmd1bWVudHNgIG9iamVjdC4gSW4gZWFjaCBvZiB0aGVzZSwgYHRoaXNgIHJlZmVycyB0b1xuICogdGhlIENsYXNzIGl0c2VsZiwgbm90IGFuIGluc3RhbmNlLiBJZiBhbnkgb3RoZXJzIGFyZSBuZWVkZWQsIHNpbXBseSBhZGQgdGhlbVxuICogaGVyZSwgb3IgaW4gdGhlaXIgb3duIGZpbGVzLlxuICovXG5jb25zdCBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGNvcHlGaWVsZHNGcm9tKSB7XG4gIGNvbnN0IEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG5jb25zdCB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMikge1xuICBjb25zdCBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG5jb25zdCB0aHJlZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMykge1xuICBjb25zdCBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gIH1cbn07XG5cbmNvbnN0IGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0KSB7XG4gIGNvbnN0IEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG5jb25zdCBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgY29uc3QgS2xhc3MgPSB0aGlzO1xuICBpbnZhcmlhbnQoXG4gICAgaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcyxcbiAgICAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nLFxuICApO1xuICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gIH1cbn07XG5cbmNvbnN0IERFRkFVTFRfUE9PTF9TSVpFID0gMTA7XG5jb25zdCBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG50eXBlIFBvb2xlciA9IGFueTtcblxuLyoqXG4gKiBBdWdtZW50cyBgQ29weUNvbnN0cnVjdG9yYCB0byBiZSBhIHBvb2xhYmxlIGNsYXNzLCBhdWdtZW50aW5nIG9ubHkgdGhlIGNsYXNzXG4gKiBpdHNlbGYgKHN0YXRpY2FsbHkpIG5vdCBhZGRpbmcgYW55IHByb3RvdHlwaWNhbCBmaWVsZHMuIEFueSBDb3B5Q29uc3RydWN0b3JcbiAqIHlvdSBnaXZlIHRoaXMgbWF5IGhhdmUgYSBgcG9vbFNpemVgIHByb3BlcnR5LCBhbmQgd2lsbCBsb29rIGZvciBhXG4gKiBwcm90b3R5cGljYWwgYGRlc3RydWN0b3JgIG9uIGluc3RhbmNlcy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBDb3B5Q29uc3RydWN0b3IgQ29uc3RydWN0b3IgdGhhdCBjYW4gYmUgdXNlZCB0byByZXNldC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBvb2xlciBDdXN0b21pemFibGUgcG9vbGVyLlxuICovXG5jb25zdCBhZGRQb29saW5nVG8gPSBmdW5jdGlvbjxUPihcbiAgQ29weUNvbnN0cnVjdG9yOiBDbGFzczxUPixcbiAgcG9vbGVyOiBQb29sZXIsXG4pOiBDbGFzczxUPiAmIHtcbiAgZ2V0UG9vbGVkKFxuICAgIC4uLmFyZ3M6ICRSZWFkT25seUFycmF5PG1peGVkPlxuICApOiAvKiBhcmd1bWVudHMgb2YgdGhlIGNvbnN0cnVjdG9yICovIFQsXG4gIHJlbGVhc2UoaW5zdGFuY2U6IG1peGVkKTogdm9pZCxcbn0ge1xuICAvLyBDYXN0aW5nIGFzIGFueSBzbyB0aGF0IGZsb3cgaWdub3JlcyB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uIGFuZCB0cnVzdHNcbiAgLy8gaXQgdG8gbWF0Y2ggdGhlIHR5cGUgd2UgZGVjbGFyZWRcbiAgY29uc3QgTmV3S2xhc3MgPSAoQ29weUNvbnN0cnVjdG9yOiBhbnkpO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxuY29uc3QgUG9vbGVkQ2xhc3MgPSB7XG4gIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICBvbmVBcmd1bWVudFBvb2xlcjogKG9uZUFyZ3VtZW50UG9vbGVyOiBQb29sZXIpLFxuICB0d29Bcmd1bWVudFBvb2xlcjogKHR3b0FyZ3VtZW50UG9vbGVyOiBQb29sZXIpLFxuICB0aHJlZUFyZ3VtZW50UG9vbGVyOiAodGhyZWVBcmd1bWVudFBvb2xlcjogUG9vbGVyKSxcbiAgZm91ckFyZ3VtZW50UG9vbGVyOiAoZm91ckFyZ3VtZW50UG9vbGVyOiBQb29sZXIpLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFFWixJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFTdEMsSUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBWUMsY0FBYyxFQUFFO0VBQ2pELElBQU1DLEtBQUssR0FBRyxJQUFJO0VBQ2xCLElBQUlBLEtBQUssQ0FBQ0MsWUFBWSxDQUFDQyxNQUFNLEVBQUU7SUFDN0IsSUFBTUMsU0FBUSxHQUFHSCxLQUFLLENBQUNDLFlBQVksQ0FBQ0csR0FBRyxDQUFDLENBQUM7SUFDekNKLEtBQUssQ0FBQ0ssSUFBSSxDQUFDRixTQUFRLEVBQUVKLGNBQWMsQ0FBQztJQUNwQyxPQUFPSSxTQUFRO0VBQ2pCLENBQUMsTUFBTTtJQUNMLE9BQU8sSUFBSUgsS0FBSyxDQUFDRCxjQUFjLENBQUM7RUFDbEM7QUFDRixDQUFDO0FBRUQsSUFBTU8saUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBWUMsRUFBRSxFQUFFQyxFQUFFLEVBQUU7RUFDekMsSUFBTVIsS0FBSyxHQUFHLElBQUk7RUFDbEIsSUFBSUEsS0FBSyxDQUFDQyxZQUFZLENBQUNDLE1BQU0sRUFBRTtJQUM3QixJQUFNQyxVQUFRLEdBQUdILEtBQUssQ0FBQ0MsWUFBWSxDQUFDRyxHQUFHLENBQUMsQ0FBQztJQUN6Q0osS0FBSyxDQUFDSyxJQUFJLENBQUNGLFVBQVEsRUFBRUksRUFBRSxFQUFFQyxFQUFFLENBQUM7SUFDNUIsT0FBT0wsVUFBUTtFQUNqQixDQUFDLE1BQU07SUFDTCxPQUFPLElBQUlILEtBQUssQ0FBQ08sRUFBRSxFQUFFQyxFQUFFLENBQUM7RUFDMUI7QUFDRixDQUFDO0FBRUQsSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFtQkEsQ0FBWUYsRUFBRSxFQUFFQyxFQUFFLEVBQUVFLEVBQUUsRUFBRTtFQUMvQyxJQUFNVixLQUFLLEdBQUcsSUFBSTtFQUNsQixJQUFJQSxLQUFLLENBQUNDLFlBQVksQ0FBQ0MsTUFBTSxFQUFFO0lBQzdCLElBQU1DLFVBQVEsR0FBR0gsS0FBSyxDQUFDQyxZQUFZLENBQUNHLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDSixLQUFLLENBQUNLLElBQUksQ0FBQ0YsVUFBUSxFQUFFSSxFQUFFLEVBQUVDLEVBQUUsRUFBRUUsRUFBRSxDQUFDO0lBQ2hDLE9BQU9QLFVBQVE7RUFDakIsQ0FBQyxNQUFNO0lBQ0wsT0FBTyxJQUFJSCxLQUFLLENBQUNPLEVBQUUsRUFBRUMsRUFBRSxFQUFFRSxFQUFFLENBQUM7RUFDOUI7QUFDRixDQUFDO0FBRUQsSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFrQkEsQ0FBWUosRUFBRSxFQUFFQyxFQUFFLEVBQUVFLEVBQUUsRUFBRUUsRUFBRSxFQUFFO0VBQ2xELElBQU1aLEtBQUssR0FBRyxJQUFJO0VBQ2xCLElBQUlBLEtBQUssQ0FBQ0MsWUFBWSxDQUFDQyxNQUFNLEVBQUU7SUFDN0IsSUFBTUMsVUFBUSxHQUFHSCxLQUFLLENBQUNDLFlBQVksQ0FBQ0csR0FBRyxDQUFDLENBQUM7SUFDekNKLEtBQUssQ0FBQ0ssSUFBSSxDQUFDRixVQUFRLEVBQUVJLEVBQUUsRUFBRUMsRUFBRSxFQUFFRSxFQUFFLEVBQUVFLEVBQUUsQ0FBQztJQUNwQyxPQUFPVCxVQUFRO0VBQ2pCLENBQUMsTUFBTTtJQUNMLE9BQU8sSUFBSUgsS0FBSyxDQUFDTyxFQUFFLEVBQUVDLEVBQUUsRUFBRUUsRUFBRSxFQUFFRSxFQUFFLENBQUM7RUFDbEM7QUFDRixDQUFDO0FBRUQsSUFBTUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBWVYsUUFBUSxFQUFFO0VBQzFDLElBQU1ILEtBQUssR0FBRyxJQUFJO0VBQ2xCSixTQUFTLENBQ1BPLFFBQVEsWUFBWUgsS0FBSyxFQUN6QixnRUFDRixDQUFDO0VBQ0RHLFFBQVEsQ0FBQ1csVUFBVSxDQUFDLENBQUM7RUFDckIsSUFBSWQsS0FBSyxDQUFDQyxZQUFZLENBQUNDLE1BQU0sR0FBR0YsS0FBSyxDQUFDZSxRQUFRLEVBQUU7SUFDOUNmLEtBQUssQ0FBQ0MsWUFBWSxDQUFDZSxJQUFJLENBQUNiLFFBQVEsQ0FBQztFQUNuQztBQUNGLENBQUM7QUFFRCxJQUFNYyxpQkFBaUIsR0FBRyxFQUFFO0FBQzVCLElBQU1DLGNBQWMsR0FBR3BCLGlCQUFpQjtBQWF4QyxJQUFNcUIsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQ2hCQyxlQUF5QixFQUN6QkMsTUFBYyxFQU1kO0VBR0EsSUFBTUMsUUFBUSxHQUFJRixlQUFxQjtFQUN2Q0UsUUFBUSxDQUFDckIsWUFBWSxHQUFHLEVBQUU7RUFDMUJxQixRQUFRLENBQUNDLFNBQVMsR0FBR0YsTUFBTSxJQUFJSCxjQUFjO0VBQzdDLElBQUksQ0FBQ0ksUUFBUSxDQUFDUCxRQUFRLEVBQUU7SUFDdEJPLFFBQVEsQ0FBQ1AsUUFBUSxHQUFHRSxpQkFBaUI7RUFDdkM7RUFDQUssUUFBUSxDQUFDRSxPQUFPLEdBQUdYLGdCQUFnQjtFQUNuQyxPQUFPUyxRQUFRO0FBQ2pCLENBQUM7QUFFRCxJQUFNRyxXQUFXLEdBQUc7RUFDbEJOLFlBQVksRUFBRUEsWUFBWTtFQUMxQnJCLGlCQUFpQixFQUFHQSxpQkFBMEI7RUFDOUNRLGlCQUFpQixFQUFHQSxpQkFBMEI7RUFDOUNHLG1CQUFtQixFQUFHQSxtQkFBNEI7RUFDbERFLGtCQUFrQixFQUFHQTtBQUN2QixDQUFDO0FBRURlLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHRixXQUFXIn0=