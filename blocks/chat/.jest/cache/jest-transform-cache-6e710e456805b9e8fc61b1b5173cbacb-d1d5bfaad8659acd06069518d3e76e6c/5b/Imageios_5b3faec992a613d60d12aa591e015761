e002ddac6f553ccaa58769866eb8efad
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var DeprecatedImagePropType = require('../DeprecatedPropTypes/DeprecatedImagePropType');
var NativeModules = require('../BatchedBridge/NativeModules');
var React = require('react');
var ReactNative = require('../Renderer/shims/ReactNative');
var StyleSheet = require('../StyleSheet/StyleSheet');
var flattenStyle = require('../StyleSheet/flattenStyle');
var requireNativeComponent = require('../ReactNative/requireNativeComponent');
var resolveAssetSource = require('./resolveAssetSource');
var ImageViewManager = NativeModules.ImageViewManager;
var RCTImageView = requireNativeComponent('RCTImageView');
function getSize(uri, success, failure) {
  ImageViewManager.getSize(uri, success, failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}
function getSizeWithHeaders(uri, headers, success, failure) {
  return ImageViewManager.getSizeWithHeaders({
    uri: uri,
    headers: headers
  }).then(function (sizes) {
    success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}
function prefetch(url) {
  return ImageViewManager.prefetchImage(url);
}
function queryCache(urls) {
  return _regenerator.default.async(function queryCache$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _context.next = 2;
        return _regenerator.default.awrap(ImageViewManager.queryCache(urls));
      case 2:
        return _context.abrupt("return", _context.sent);
      case 3:
      case "end":
        return _context.stop();
    }
  }, null, null, null, Promise);
}
var Image = function Image(props, forwardedRef) {
  var source = resolveAssetSource(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;
  if (Array.isArray(source)) {
    style = flattenStyle([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
      _height = source.height,
      uri = source.uri;
    style = flattenStyle([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];
    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }
  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;
  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }
  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }
  return React.createElement(RCTImageView, (0, _extends2.default)({}, props, {
    ref: forwardedRef,
    style: style,
    resizeMode: resizeMode,
    tintColor: tintColor,
    source: sources
  }));
};
Image = React.forwardRef(Image);
Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.queryCache = queryCache;
Image.resolveAssetSource = resolveAssetSource;
Image.propTypes = DeprecatedImagePropType;
var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  }
});
module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,