a22fa94a157b7b827c37e9ed6c4d17ba
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _SwipeRow = _interopRequireDefault(require("./SwipeRow"));
var _excluded = ["useSectionList", "renderListView"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SwipeListView = function (_PureComponent) {
  (0, _inherits2.default)(SwipeListView, _PureComponent);
  var _super = _createSuper(SwipeListView);
  function SwipeListView(props) {
    var _this;
    (0, _classCallCheck2.default)(this, SwipeListView);
    _this = _super.call(this, props);
    _this._renderItem = function (rowData) {
      return _this.renderItem(rowData, _this._rows);
    };
    _this._onRef = function (c) {
      return _this.setRefs(c);
    };
    _this._rows = {};
    _this.openCellKey = null;
    _this.listViewProps = {};
    if (_reactNative.Platform.OS === 'ios') {
      _this.yScrollOffset = 0;
      _this.layoutHeight = 0;
      _this.listViewProps = {
        onLayout: function onLayout(e) {
          return _this.onLayout(e);
        },
        onContentSizeChange: function onContentSizeChange(w, h) {
          return _this.onContentSizeChange(w, h);
        }
      };
    }
    _this._onScroll = _this.onScroll.bind((0, _assertThisInitialized2.default)(_this));
    if (_this.props.onScroll && typeof _this.props.onScroll === 'object') {
      _this.props.onScroll.__addListener(_this._onScroll);
      _this._onScroll = _this.props.onScroll;
    }
    return _this;
  }
  (0, _createClass2.default)(SwipeListView, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.refreshing) {
        this.safeCloseOpenRow();
      }
    }
  }, {
    key: "setScrollEnabled",
    value: function setScrollEnabled(enable) {
      if (this.props.scrollEnabled === false) {
        return;
      }
      if (this._listView && this._listView.setNativeProps) {
        this._listView.setNativeProps({
          scrollEnabled: enable
        });
      } else if (this._listView && this._listView.getScrollResponder) {
        var scrollResponder = this._listView.getScrollResponder();
        scrollResponder.setNativeProps && scrollResponder.setNativeProps({
          scrollEnabled: enable
        });
      }
      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);
    }
  }, {
    key: "safeCloseOpenRow",
    value: function safeCloseOpenRow() {
      var rowRef = this._rows[this.openCellKey];
      if (rowRef && rowRef.closeRow) {
        this._rows[this.openCellKey].closeRow();
      }
    }
  }, {
    key: "rowSwipeGestureBegan",
    value: function rowSwipeGestureBegan(key) {
      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {
        this.safeCloseOpenRow();
      }
      if (this.props.swipeGestureBegan) {
        this.props.swipeGestureBegan(key);
      }
    }
  }, {
    key: "rowSwipeGestureEnded",
    value: function rowSwipeGestureEnded(key, data) {
      if (this.props.swipeGestureEnded) {
        this.props.swipeGestureEnded(key, data);
      }
    }
  }, {
    key: "onRowOpen",
    value: function onRowOpen(key, toValue) {
      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {
        this.safeCloseOpenRow();
      }
      this.openCellKey = key;
      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);
    }
  }, {
    key: "onRowPress",
    value: function onRowPress() {
      if (this.openCellKey) {
        if (this.props.closeOnRowPress) {
          this.safeCloseOpenRow();
          this.openCellKey = null;
        }
      }
    }
  }, {
    key: "onScroll",
    value: function onScroll(e) {
      if (_reactNative.Platform.OS === 'ios') {
        this.yScrollOffset = e.nativeEvent.contentOffset.y;
      }
      if (this.openCellKey) {
        if (this.props.closeOnScroll) {
          this.safeCloseOpenRow();
          this.openCellKey = null;
        }
      }
      typeof this.props.onScroll === 'function' && this.props.onScroll(e);
    }
  }, {
    key: "onLayout",
    value: function onLayout(e) {
      this.layoutHeight = e.nativeEvent.layout.height;
      this.props.onLayout && this.props.onLayout(e);
    }
  }, {
    key: "onContentSizeChange",
    value: function onContentSizeChange(w, h) {
      var height = h - this.layoutHeight;
      if (this.yScrollOffset >= height && height > 0) {
        if (this._listView instanceof _reactNative.FlatList) {
          this._listView && this._listView.scrollToEnd();
        } else if (this._listView instanceof _reactNative.SectionList) {
          this._listView.scrollToEnd && this._listView.scrollToEnd();
        } else if (this._listView instanceof _reactNative.Animated.FlatList) {
          this._listView.scrollToEnd && this._listView.scrollToEnd();
        }
      }
      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);
    }
  }, {
    key: "setRefs",
    value: function setRefs(ref) {
      this._listView = ref;
      if (typeof this.props.listViewRef === 'function') {
        this.props.listViewRef && this.props.listViewRef(ref);
      } else if (typeof this.props.listViewRef === 'object') {
        if (Object.keys(this.props.listViewRef).includes('current')) {
          this.props.listViewRef.current = ref;
        }
      }
    }
  }, {
    key: "closeAllOpenRows",
    value: function closeAllOpenRows() {
      var _this2 = this;
      Object.keys(this._rows).forEach(function (rowKey) {
        var row = _this2._rows[rowKey];
        if (row) {
          var rowTranslateX = Math.round(row.currentTranslateX || 0);
          if (row.closeRow && rowTranslateX !== 0) {
            row.closeRow();
          }
        }
      });
    }
  }, {
    key: "manuallyOpenAllRows",
    value: function manuallyOpenAllRows(toValue) {
      var _this3 = this;
      Object.keys(this._rows).forEach(function (rowKey) {
        var row = _this3._rows[rowKey];
        if (row && row.manuallySwipeRow) {
          row.manuallySwipeRow(toValue);
        }
      });
    }
  }, {
    key: "renderCell",
    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {
      var _this4 = this;
      if (!HiddenComponent) {
        return _react.default.cloneElement(VisibleComponent, (0, _extends2.default)({}, VisibleComponent.props, {
          ref: function ref(row) {
            return _this4._rows[key] = row;
          },
          onRowOpen: function onRowOpen(toValue) {
            return _this4.onRowOpen(key, toValue);
          },
          onRowDidOpen: function onRowDidOpen(toValue) {
            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);
          },
          onRowClose: function onRowClose() {
            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);
          },
          onRowDidClose: function onRowDidClose() {
            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);
          },
          onRowPress: function onRowPress() {
            return _this4.onRowPress();
          },
          setScrollEnabled: function setScrollEnabled(enable) {
            return _this4.setScrollEnabled(enable);
          },
          swipeGestureBegan: function swipeGestureBegan() {
            return _this4.rowSwipeGestureBegan(key);
          },
          swipeGestureEnded: function swipeGestureEnded(_, data) {
            return _this4.rowSwipeGestureEnded(key, data);
          }
        }));
      } else {
        return _react.default.createElement(_SwipeRow.default, {
          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {
            return _this4.props.onSwipeValueChange((0, _extends2.default)({}, data, {
              key: key
            }));
          } : null,
          ref: function ref(row) {
            return _this4._rows[key] = row;
          },
          swipeGestureBegan: function swipeGestureBegan() {
            return _this4.rowSwipeGestureBegan(key);
          },
          swipeGestureEnded: function swipeGestureEnded(_, data) {
            return _this4.rowSwipeGestureEnded(key, data);
          },
          onRowOpen: function onRowOpen(toValue) {
            return _this4.onRowOpen(key, toValue);
          },
          onRowDidOpen: function onRowDidOpen(toValue) {
            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);
          },
          onRowClose: function onRowClose() {
            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);
          },
          onRowDidClose: function onRowDidClose() {
            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);
          },
          onRowPress: function onRowPress() {
            return _this4.onRowPress(key);
          },
          leftActivationValue: item.leftActivationValue || this.props.leftActivationValue,
          rightActivationValue: item.rightActivationValue || this.props.rightActivationValue,
          leftActionValue: item.leftActionValue || this.props.leftActionValue || 0,
          rightActionValue: item.rightActionValue || this.props.rightActionValue || 0,
          initialLeftActionState: item.initialLeftActionState || this.props.initialLeftActionState,
          initialRightActionState: item.initialRightActionState || this.props.initialRightActionState,
          onLeftAction: function onLeftAction() {
            return item.onLeftAction || _this4.props.onLeftAction && _this4.props.onLeftAction(key, _this4._rows);
          },
          onRightAction: function onRightAction() {
            return item.onRightAction || _this4.props.onRightAction && _this4.props.onRightAction(key, _this4._rows);
          },
          onLeftActionStatusChange: this.props.onLeftActionStatusChange ? function (data) {
            return _this4.props.onLeftActionStatusChange((0, _extends2.default)({}, data, {
              key: key
            }));
          } : null,
          onRightActionStatusChange: this.props.onRightActionStatusChange ? function (data) {
            return _this4.props.onRightActionStatusChange((0, _extends2.default)({}, data, {
              key: key
            }));
          } : null,
          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {
            return _this4.props.shouldItemUpdate(currentItem, newItem);
          } : null,
          setScrollEnabled: function setScrollEnabled(enable) {
            return _this4.setScrollEnabled(enable);
          },
          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,
          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,
          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,
          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,
          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,
          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,
          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,
          recalculateHiddenLayout: this.props.recalculateHiddenLayout,
          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,
          style: this.props.swipeRowStyle,
          preview: shouldPreviewRow,
          previewDuration: this.props.previewDuration,
          previewOpenDelay: this.props.previewOpenDelay,
          previewOpenValue: this.props.previewOpenValue,
          previewRepeat: this.props.previewRepeat,
          previewRepeatDelay: this.props.previewRepeatDelay,
          tension: this.props.tension,
          restSpeedThreshold: this.props.restSpeedThreshold,
          restDisplacementThreshold: this.props.restDisplacementThreshold,
          friction: this.props.friction,
          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,
          swipeToOpenPercent: this.props.swipeToOpenPercent,
          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,
          swipeToClosePercent: this.props.swipeToClosePercent,
          item: item,
          useNativeDriver: this.props.useNativeDriver,
          onPreviewEnd: this.props.onPreviewEnd
        }, HiddenComponent, VisibleComponent);
      }
    }
  }, {
    key: "renderRow",
    value: function renderRow(rowData, secId, rowId, rowMap) {
      var key = "" + secId + rowId;
      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);
      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);
      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);
      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;
      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);
    }
  }, {
    key: "renderItem",
    value: function renderItem(rowData, rowMap) {
      var Component = this.props.renderItem(rowData, rowMap);
      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);
      var item = rowData.item,
        index = rowData.index;
      var key = item.key;
      if (this.props.keyExtractor) {
        key = this.props.keyExtractor(item, index);
      }
      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;
      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        useSectionList = _this$props.useSectionList,
        renderListView = _this$props.renderListView,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      if (renderListView) {
        var useRenderRow = !!this.props.renderRow;
        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));
      }
      if (useSectionList) {
        var _ListComponent = this.props.useAnimatedList ? _reactNative.Animated.SectionList : _reactNative.SectionList;
        return _react.default.createElement(_ListComponent, (0, _extends2.default)({}, props, this.listViewProps, {
          ref: this._onRef,
          onScroll: this._onScroll,
          renderItem: this._renderItem
        }));
      }
      var ListComponent = this.props.useAnimatedList ? _reactNative.Animated.FlatList : _reactNative.FlatList;
      return _react.default.createElement(ListComponent, (0, _extends2.default)({}, props, this.listViewProps, {
        ref: this._onRef,
        onScroll: this._onScroll,
        renderItem: this._renderItem
      }));
    }
  }]);
  return SwipeListView;
}(_react.PureComponent);
SwipeListView.propTypes = {
  renderListView: _propTypes.default.func,
  renderItem: _propTypes.default.func,
  renderHiddenItem: _propTypes.default.func,
  leftOpenValue: _propTypes.default.number,
  rightOpenValue: _propTypes.default.number,
  leftActivationValue: _propTypes.default.number,
  rightActivationValue: _propTypes.default.number,
  leftActionValue: _propTypes.default.number,
  rightActionValue: _propTypes.default.number,
  initialLeftActionState: _propTypes.default.bool,
  initialRightActionState: _propTypes.default.bool,
  stopLeftSwipe: _propTypes.default.number,
  stopRightSwipe: _propTypes.default.number,
  closeOnScroll: _propTypes.default.bool,
  closeOnRowPress: _propTypes.default.bool,
  closeOnRowBeginSwipe: _propTypes.default.bool,
  closeOnRowOpen: _propTypes.default.bool,
  disableLeftSwipe: _propTypes.default.bool,
  disableRightSwipe: _propTypes.default.bool,
  recalculateHiddenLayout: _propTypes.default.bool,
  disableHiddenLayoutCalculation: _propTypes.default.bool,
  swipeGestureBegan: _propTypes.default.func,
  swipeGestureEnded: _propTypes.default.func,
  onRowOpen: _propTypes.default.func,
  onRowDidOpen: _propTypes.default.func,
  onRowClose: _propTypes.default.func,
  onRowDidClose: _propTypes.default.func,
  onLeftAction: _propTypes.default.func,
  onRightAction: _propTypes.default.func,
  onLeftActionStatusChange: _propTypes.default.func,
  onRightActionStatusChange: _propTypes.default.func,
  onScrollEnabled: _propTypes.default.func,
  onScroll: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  swipeRowStyle: _propTypes.default.object,
  listViewRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  previewRowKey: _propTypes.default.string,
  previewFirstRow: _propTypes.default.bool,
  previewRowIndex: _propTypes.default.number,
  previewDuration: _propTypes.default.number,
  previewRepeat: _propTypes.default.bool,
  previewRepeatDelay: _propTypes.default.number,
  previewOpenDelay: _propTypes.default.number,
  previewOpenValue: _propTypes.default.number,
  friction: _propTypes.default.number,
  tension: _propTypes.default.number,
  restSpeedThreshold: _propTypes.default.number,
  restDisplacementThreshold: _propTypes.default.number,
  directionalDistanceChangeThreshold: _propTypes.default.number,
  swipeToOpenPercent: _propTypes.default.number,
  swipeToOpenVelocityContribution: _propTypes.default.number,
  swipeToClosePercent: _propTypes.default.number,
  shouldItemUpdate: _propTypes.default.func,
  onSwipeValueChange: _propTypes.default.func,
  useNativeDriver: _propTypes.default.bool,
  useAnimatedList: _propTypes.default.bool,
  keyExtractor: _propTypes.default.func,
  onPreviewEnd: _propTypes.default.func
};
SwipeListView.defaultProps = {
  leftOpenValue: 0,
  rightOpenValue: 0,
  closeOnRowBeginSwipe: false,
  closeOnScroll: true,
  closeOnRowPress: true,
  closeOnRowOpen: true,
  disableLeftSwipe: false,
  disableRightSwipe: false,
  recalculateHiddenLayout: false,
  disableHiddenLayoutCalculation: false,
  previewFirstRow: false,
  directionalDistanceChangeThreshold: 2,
  swipeToOpenPercent: 50,
  swipeToOpenVelocityContribution: 0,
  swipeToClosePercent: 50,
  useNativeDriver: true,
  previewRepeat: false,
  previewRepeatDelay: 1000,
  useAnimatedList: false
};
var _default = SwipeListView;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,