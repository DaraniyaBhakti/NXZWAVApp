{"version":3,"names":["_interopRequireDefault","require","_slicedToArray2","_NativeAsyncStorage","_invariant","RCTAsyncStorage","NativeAsyncStorage","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","invariant","Promise","resolve","reject","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","_ref","_ref2","default","reqLength","length","i","request","requestKeys","requestResult","_this","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","Array","isArray","e","out","Error","message","module","exports"],"sources":["AsyncStorage.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @flow-weak\n * @jsdoc\n */\n\n'use strict';\n\nimport NativeAsyncStorage from './NativeAsyncStorage';\nimport invariant from 'invariant';\n\n// Use SQLite if available, otherwise file storage.\nconst RCTAsyncStorage = NativeAsyncStorage;\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app.  It should be used instead of\n * LocalStorage.\n *\n * See http://facebook.github.io/react-native/docs/asyncstorage.html\n */\nconst AsyncStorage = {\n  _getRequests: ([]: Array<any>),\n  _getKeys: ([]: Array<string>),\n  _immediate: (null: ?number),\n\n  /**\n   * Fetches an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getitem\n   */\n  getItem: function(\n    key: string,\n    callback?: ?(error: ?Error, result: ?string) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiGet([key], function(errors, result) {\n        // Unpack result to get value from [[key,value]]\n        const value = result && result[0] && result[0][1] ? result[0][1] : null;\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0], value);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(value);\n        }\n      });\n    });\n  },\n\n  /**\n   * Sets the value for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#setitem\n   */\n  setItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Removes an item for a `key` and invokes a callback upon completion.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#removeitem\n   */\n  removeItem: function(\n    key: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove([key], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Merges an existing `key` value with an input value, assuming both values\n   * are stringified JSON.\n   *\n   * **NOTE:** This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#mergeitem\n   */\n  mergeItem: function(\n    key: string,\n    value: string,\n    callback?: ?(error: ?Error) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge([[key, value]], function(errors) {\n        const errs = convertErrors(errors);\n        callback && callback(errs && errs[0]);\n        if (errs) {\n          reject(errs[0]);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n   * don't want to call this; use `removeItem` or `multiRemove` to clear only\n   * your app's keys.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#clear\n   */\n  clear: function(callback?: ?(error: ?Error) => void): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.clear(function(error) {\n        callback && callback(convertError(error));\n        if (error && convertError(error)) {\n          reject(convertError(error));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Gets *all* keys known to your app; for all callers, libraries, etc.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#getallkeys\n   */\n  getAllKeys: function(\n    callback?: ?(error: ?Error, keys: ?Array<string>) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.getAllKeys(function(error, keys) {\n        callback && callback(convertError(error), keys);\n        if (error) {\n          reject(convertError(error));\n        } else {\n          resolve(keys);\n        }\n      });\n    });\n  },\n\n  /**\n   * The following batched functions are useful for executing a lot of\n   * operations at once, allowing for native optimizations and provide the\n   * convenience of a single callback after all operations are complete.\n   *\n   * These functions return arrays of errors, potentially one for every key.\n   * For key-specific errors, the Error object will have a key property to\n   * indicate which key caused the error.\n   */\n\n  /**\n   * Flushes any pending requests using a single batch call to get the data.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#flushgetrequests\n   * */\n  flushGetRequests: function(): void {\n    const getRequests = this._getRequests;\n    const getKeys = this._getKeys;\n\n    this._getRequests = [];\n    this._getKeys = [];\n\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    RCTAsyncStorage.multiGet(getKeys, function(errors, result) {\n      // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n      // it's much, much faster in practice for the data sets we deal with (we avoid\n      // allocating result pair arrays). This was heavily benchmarked.\n      //\n      // Is there a way to avoid using the map but fix the bug in this breaking test?\n      // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n      const map = {};\n      result &&\n        result.forEach(([key, value]) => {\n          map[key] = value;\n          return value;\n        });\n      const reqLength = getRequests.length;\n      for (let i = 0; i < reqLength; i++) {\n        const request = getRequests[i];\n        const requestKeys = request.keys;\n        const requestResult = requestKeys.map(key => [key, map[key]]);\n        request.callback && request.callback(null, requestResult);\n        request.resolve && request.resolve(requestResult);\n      }\n    });\n  },\n\n  /**\n   * This allows you to batch the fetching of items given an array of `key`\n   * inputs. Your callback will be invoked with an array of corresponding\n   * key-value pairs found.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiget\n   */\n  multiGet: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>, result: ?Array<Array<string>>) => void,\n  ): Promise {\n    if (!this._immediate) {\n      this._immediate = setImmediate(() => {\n        this._immediate = null;\n        this.flushGetRequests();\n      });\n    }\n\n    const getRequest = {\n      keys: keys,\n      callback: callback,\n      // do we need this?\n      keyIndex: this._getKeys.length,\n      resolve: null,\n      reject: null,\n    };\n\n    const promiseResult = new Promise((resolve, reject) => {\n      getRequest.resolve = resolve;\n      getRequest.reject = reject;\n    });\n\n    this._getRequests.push(getRequest);\n    // avoid fetching duplicates\n    keys.forEach(key => {\n      if (this._getKeys.indexOf(key) === -1) {\n        this._getKeys.push(key);\n      }\n    });\n\n    return promiseResult;\n  },\n\n  /**\n   * Use this as a batch operation for storing multiple key-value pairs. When\n   * the operation completes you'll get a single callback with any errors.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiset\n   */\n  multiSet: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiSet(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Call this to batch the deletion of all keys in the `keys` array.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multiremove\n   */\n  multiRemove: function(\n    keys: Array<string>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiRemove(keys, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n\n  /**\n   * Batch operation to merge in existing and new values for a given set of\n   * keys. This assumes that the values are stringified JSON.\n   *\n   * **NOTE**: This is not supported by all native implementations.\n   *\n   * See http://facebook.github.io/react-native/docs/asyncstorage.html#multimerge\n   */\n  multiMerge: function(\n    keyValuePairs: Array<Array<string>>,\n    callback?: ?(errors: ?Array<Error>) => void,\n  ): Promise {\n    invariant(RCTAsyncStorage, 'RCTAsyncStorage not available');\n    return new Promise((resolve, reject) => {\n      RCTAsyncStorage.multiMerge(keyValuePairs, function(errors) {\n        const error = convertErrors(errors);\n        callback && callback(error);\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  },\n};\n\n// Not all native implementations support merge.\nif (!RCTAsyncStorage.multiMerge) {\n  delete AsyncStorage.mergeItem;\n  delete AsyncStorage.multiMerge;\n}\n\nfunction convertErrors(errs) {\n  if (!errs) {\n    return null;\n  }\n  return (Array.isArray(errs) ? errs : [errs]).map(e => convertError(e));\n}\n\nfunction convertError(error) {\n  if (!error) {\n    return null;\n  }\n  const out = new Error(error.message);\n  out.key = error.key; // flow doesn't like this :(\n  return out;\n}\n\nmodule.exports = AsyncStorage;\n"],"mappings":"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"}