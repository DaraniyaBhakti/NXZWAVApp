c2669e854239a4c6511b93313fb96ea1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EventSubscription = require('./EventSubscription');
var EmitterSubscription = function (_EventSubscription) {
  (0, _inherits2.default)(EmitterSubscription, _EventSubscription);
  var _super = _createSuper(EmitterSubscription);
  function EmitterSubscription(emitter, subscriber, listener, context) {
    var _this;
    (0, _classCallCheck2.default)(this, EmitterSubscription);
    _this = _super.call(this, subscriber);
    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }
  (0, _createClass2.default)(EmitterSubscription, [{
    key: "remove",
    value: function remove() {
      this.emitter.removeSubscription(this);
    }
  }]);
  return EmitterSubscription;
}(EventSubscription);
module.exports = EmitterSubscription;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiZGVmYXVsdCIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiZSIsIkV2ZW50U3Vic2NyaXB0aW9uIiwiRW1pdHRlclN1YnNjcmlwdGlvbiIsIl9FdmVudFN1YnNjcmlwdGlvbiIsIl9zdXBlciIsImVtaXR0ZXIiLCJzdWJzY3JpYmVyIiwibGlzdGVuZXIiLCJjb250ZXh0IiwiX3RoaXMiLCJrZXkiLCJ2YWx1ZSIsInJlbW92ZSIsInJlbW92ZVN1YnNjcmlwdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJFbWl0dGVyU3Vic2NyaXB0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50U3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9FdmVudFN1YnNjcmlwdGlvbicpO1xuXG5pbXBvcnQgdHlwZSBFdmVudEVtaXR0ZXIgZnJvbSAnLi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGUgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IgZnJvbSAnLi9FdmVudFN1YnNjcmlwdGlvblZlbmRvcic7XG5cbi8qKlxuICogRW1pdHRlclN1YnNjcmlwdGlvbiByZXByZXNlbnRzIGEgc3Vic2NyaXB0aW9uIHdpdGggbGlzdGVuZXIgYW5kIGNvbnRleHQgZGF0YS5cbiAqL1xuY2xhc3MgRW1pdHRlclN1YnNjcmlwdGlvbiBleHRlbmRzIEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgZW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuICBsaXN0ZW5lcjogRnVuY3Rpb247XG4gIGNvbnRleHQ6ID9PYmplY3Q7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIC0gVGhlIGV2ZW50IGVtaXR0ZXIgdGhhdCByZWdpc3RlcmVkIHRoaXNcbiAgICogICBzdWJzY3JpcHRpb25cbiAgICogQHBhcmFtIHtFdmVudFN1YnNjcmlwdGlvblZlbmRvcn0gc3Vic2NyaWJlciAtIFRoZSBzdWJzY3JpYmVyIHRoYXQgY29udHJvbHNcbiAgICogICB0aGlzIHN1YnNjcmlwdGlvblxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBzcGVjaWZpZWQgZXZlbnQgaXNcbiAgICogICBlbWl0dGVkXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dCAtIE9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRvIHVzZSB3aGVuIGludm9raW5nIHRoZVxuICAgKiAgIGxpc3RlbmVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBlbWl0dGVyOiBFdmVudEVtaXR0ZXIsXG4gICAgc3Vic2NyaWJlcjogRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IsXG4gICAgbGlzdGVuZXI6IEZ1bmN0aW9uLFxuICAgIGNvbnRleHQ6ID9PYmplY3QsXG4gICkge1xuICAgIHN1cGVyKHN1YnNjcmliZXIpO1xuICAgIHRoaXMuZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGlzIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBlbWl0dGVyIHRoYXQgcmVnaXN0ZXJlZCBpdC5cbiAgICogTm90ZTogd2UncmUgb3ZlcnJpZGluZyB0aGUgYHJlbW92ZSgpYCBtZXRob2Qgb2YgRXZlbnRTdWJzY3JpcHRpb24gaGVyZVxuICAgKiBidXQgZGVsaWJlcmF0ZWx5IG5vdCBjYWxsaW5nIGBzdXBlci5yZW1vdmUoKWAgYXMgdGhlIHJlc3BvbnNpYmlsaXR5XG4gICAqIGZvciByZW1vdmluZyB0aGUgc3Vic2NyaXB0aW9uIGxpZXMgd2l0aCB0aGUgRXZlbnRFbWl0dGVyLlxuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIHRoaXMuZW1pdHRlci5yZW1vdmVTdWJzY3JpcHRpb24odGhpcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyU3Vic2NyaXB0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksMkJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLGdCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxTQUFBTSxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFOLGdCQUFBLENBQUFPLE9BQUEsRUFBQUwsT0FBQSxHQUFBTSxNQUFBLE1BQUFMLHlCQUFBLFFBQUFNLFNBQUEsT0FBQVQsZ0JBQUEsQ0FBQU8sT0FBQSxRQUFBRyxXQUFBLEVBQUFGLE1BQUEsR0FBQUcsT0FBQSxDQUFBQyxTQUFBLENBQUFOLEtBQUEsRUFBQU8sU0FBQSxFQUFBSixTQUFBLFlBQUFELE1BQUEsR0FBQUYsS0FBQSxDQUFBUSxLQUFBLE9BQUFELFNBQUEsZ0JBQUFkLDJCQUFBLENBQUFRLE9BQUEsUUFBQUMsTUFBQTtBQUFBLFNBQUFKLDBCQUFBLGVBQUFPLE9BQUEscUJBQUFBLE9BQUEsQ0FBQUMsU0FBQSxvQkFBQUQsT0FBQSxDQUFBQyxTQUFBLENBQUFHLElBQUEsMkJBQUFDLEtBQUEsb0NBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVQsT0FBQSxDQUFBQyxTQUFBLENBQUFLLE9BQUEsOENBQUFJLENBQUE7QUFFYixJQUFNQyxpQkFBaUIsR0FBRzNCLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUFDLElBUW5ENEIsbUJBQW1CLGFBQUFDLGtCQUFBO0VBQUEsSUFBQTFCLFVBQUEsQ0FBQVMsT0FBQSxFQUFBZ0IsbUJBQUEsRUFBQUMsa0JBQUE7RUFBQSxJQUFBQyxNQUFBLEdBQUF4QixZQUFBLENBQUFzQixtQkFBQTtFQWV2QixTQUFBQSxvQkFDRUcsT0FBcUIsRUFDckJDLFVBQW1DLEVBQ25DQyxRQUFrQixFQUNsQkMsT0FBZ0IsRUFDaEI7SUFBQSxJQUFBQyxLQUFBO0lBQUEsSUFBQWxDLGdCQUFBLENBQUFXLE9BQUEsUUFBQWdCLG1CQUFBO0lBQ0FPLEtBQUEsR0FBQUwsTUFBQSxDQUFBTCxJQUFBLE9BQU1PLFVBQVU7SUFDaEJHLEtBQUEsQ0FBS0osT0FBTyxHQUFHQSxPQUFPO0lBQ3RCSSxLQUFBLENBQUtGLFFBQVEsR0FBR0EsUUFBUTtJQUN4QkUsS0FBQSxDQUFLRCxPQUFPLEdBQUdBLE9BQU87SUFBQyxPQUFBQyxLQUFBO0VBQ3pCO0VBQUMsSUFBQWpDLGFBQUEsQ0FBQVUsT0FBQSxFQUFBZ0IsbUJBQUE7SUFBQVEsR0FBQTtJQUFBQyxLQUFBLEVBUUQsU0FBQUMsT0FBQSxFQUFTO01BQ1AsSUFBSSxDQUFDUCxPQUFPLENBQUNRLGtCQUFrQixDQUFDLElBQUksQ0FBQztJQUN2QztFQUFDO0VBQUEsT0FBQVgsbUJBQUE7QUFBQSxFQW5DK0JELGlCQUFpQjtBQXNDbkRhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHYixtQkFBbUIifQ==