97e348efd1ec3d61067e4a0c81107e24
"use strict";

// Do not change anything in the protected area. Doing so will be detected and your commit will be rejected.
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockComponent = void 0;
// Protected Area Start
const react_1 = require("react");
const RunEngine_1 = require("./RunEngine");
const Message_1 = require("./Message");
const MessageEnum_1 = __importStar(require("./Messages/MessageEnum"));
const react_native_1 = require("react-native");
const helper = __importStar(require("./Helpers"));
class BlockComponent extends react_1.Component {
  constructor(props) {
    super(props);
    this.isLoaded = false;
    const uuidv4 = require("uuid/v4");
    this.blockId = uuidv4();
    this.send = message => RunEngine_1.runEngine.sendMessage(this.blockId, message);
    this.subScribedMessages = [''];
    this.hideKeyboard = this.hideKeyboard.bind(this);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  receive(from, message) {}
  componentDidMount() {
    return __awaiter(this, void 0, void 0, function* () {
      this.isLoaded = true;
    });
  }
  componentWillUnmount() {
    return __awaiter(this, void 0, void 0, function* () {
      this.isLoaded = false;
      react_native_1.Keyboard.dismiss();
      RunEngine_1.runEngine.unSubscribeFromMessages(this, this.subScribedMessages);
    });
  }
  toggleState(objectID) {
    this.changeState(objectID, !Boolean(this.getState(objectID)));
  }
  changeState(objectID, value) {
    switch (objectID) {
      default:
        console.log("changeState::Not Confifured for " + objectID);
    }
  }
  getState(objectID) {
    var testString = '';
    switch (objectID) {
      case 'testBoolTrue':
        return true;
      case 'testBoolFalse':
        return false;
      case 'testString':
        return testString;
      default:
        console.log("changeState::Not Confifured for " + objectID);
        return null;
    }
  }
  processOnClickMessage(messageID, value = null) {
    switch (messageID) {
      default:
        console.log("processOnClickMessage::Not Configured for " + messageID);
    }
  }
  showAlert(title, error, btnPositiveText, btnPositiveMessage, btnNegativeText, btnNegativeMessage, btnNeutralText, btnNeutralMessage) {
    react_native_1.Keyboard.dismiss();
    if (!btnPositiveText && !btnNegativeText && !btnNeutralText) {
      btnPositiveText = 'Ok';
    }
    const alertMsg = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.AlertMessage));
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertTitleMessage), title);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertBodyMessage), error);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.NavigationPropsMessage), this.props);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.NavigationPropsMessage), this.props);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertButtonPositiveText), btnPositiveText);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertButtonNegativeText), btnNegativeText);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertButtonNeutralText), btnNeutralText);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertButtonPositiveMessage), btnPositiveMessage);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertButtonNegativeMessage), btnNegativeMessage);
    alertMsg.addData(MessageEnum_1.getName(MessageEnum_1.default.AlertButtonNeutralMessage), btnNeutralMessage);
    RunEngine_1.runEngine.sendMessage(alertMsg.id, alertMsg);
  }
  parseApiErrorResponse(responseJson) {
    if (!responseJson || !responseJson.errors) {
      return;
    }
    const errors = responseJson.errors;
    let allerrors = '';
    errors.map(object => {
      const newLocal = JSON.stringify(object);
      JSON.parse(newLocal, (key, value) => {
        if (value.length > 0) {
          if (allerrors.length <= 0) {
            allerrors = value;
          } else {
            allerrors = `${allerrors}{\n}${value}`;
          }
        }
      });
    });
    this.showAlert('Error', allerrors);
  }
  isPlatformWeb() {
    return helper.getOS() === 'web';
  }
  isPlatformiOS() {
    return helper.getOS() === 'ios';
  }
  isPlatformAndroid() {
    return helper.getOS() === 'android';
  }
  parseApiCatchErrorResponse(errorReponse) {
    if (errorReponse) {
      this.showAlert('Error', JSON.stringify(errorReponse).replace(new RegExp('"', 'g'), ''));
    }
  }
  hideKeyboard() {
    if (!this.isPlatformWeb()) {
      react_native_1.Keyboard.dismiss();
    }
  }
}
exports.BlockComponent = BlockComponent;
// Protected Area End
//# sourceMappingURL=data:application/json;charset=utf-8;base64,