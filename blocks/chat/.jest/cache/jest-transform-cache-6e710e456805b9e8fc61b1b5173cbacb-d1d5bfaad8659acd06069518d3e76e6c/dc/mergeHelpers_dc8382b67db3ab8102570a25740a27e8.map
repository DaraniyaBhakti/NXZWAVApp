{"version":3,"names":["invariant","require","MAX_MERGE_DEPTH","isTerminal","o","Date","mergeHelpers","normalizeMergeArg","arg","undefined","checkMergeArrayArgs","one","two","Array","isArray","checkMergeObjectArgs","checkMergeObjectArg","checkMergeIntoObjectArg","checkMergeLevel","level","checkArrayStrategy","strategy","ArrayStrategies","Clobber","Concat","IndexByIndex","module","exports"],"sources":["mergeHelpers.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * requiresPolyfills: Array.isArray\n *\n * @format\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nconst MAX_MERGE_DEPTH = 36;\n\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions and Dates are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nconst isTerminal = function(o) {\n  return typeof o !== 'object' || o instanceof Date || o === null;\n};\n\nconst mergeHelpers = {\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    invariant(\n      Array.isArray(one) && Array.isArray(two),\n      'Tried to merge arrays, instead got %s and %s.',\n      one,\n      two,\n    );\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    invariant(\n      !isTerminal(arg) && !Array.isArray(arg),\n      'Tried to merge an object, instead got %s.',\n      arg,\n    );\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeIntoObjectArg: function(arg) {\n    invariant(\n      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),\n      'Tried to merge into an object, instead got %s.',\n      arg,\n    );\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    invariant(\n      level < MAX_MERGE_DEPTH,\n      'Maximum deep merge depth exceeded. You may be attempting to merge ' +\n        'circular structures in an unsupported way.',\n    );\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    invariant(\n      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,\n      'You must provide an array strategy to deep merge functions to ' +\n        'instruct the deep merge how to resolve merging two arrays.',\n    );\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: {\n    Clobber: 'Clobber',\n    Concat: 'Concat',\n    IndexByIndex: 'IndexByIndex',\n  },\n};\n\nmodule.exports = mergeHelpers;\n"],"mappings":"AAYA,YAAY;;AAEZ,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AAMtC,IAAMC,eAAe,GAAG,EAAE;AAQ1B,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAYC,CAAC,EAAE;EAC7B,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,YAAYC,IAAI,IAAID,CAAC,KAAK,IAAI;AACjE,CAAC;AAED,IAAME,YAAY,GAAG;EACnBJ,eAAe,EAAEA,eAAe;EAEhCC,UAAU,EAAEA,UAAU;EAQtBI,iBAAiB,EAAE,SAAAA,kBAASC,GAAG,EAAE;IAC/B,OAAOA,GAAG,KAAKC,SAAS,IAAID,GAAG,KAAK,IAAI,GAAG,CAAC,CAAC,GAAGA,GAAG;EACrD,CAAC;EAUDE,mBAAmB,EAAE,SAAAA,oBAASC,GAAG,EAAEC,GAAG,EAAE;IACtCZ,SAAS,CACPa,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,IAAIE,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EACxC,+CAA+C,EAC/CD,GAAG,EACHC,GACF,CAAC;EACH,CAAC;EAMDG,oBAAoB,EAAE,SAAAA,qBAASJ,GAAG,EAAEC,GAAG,EAAE;IACvCN,YAAY,CAACU,mBAAmB,CAACL,GAAG,CAAC;IACrCL,YAAY,CAACU,mBAAmB,CAACJ,GAAG,CAAC;EACvC,CAAC;EAKDI,mBAAmB,EAAE,SAAAA,oBAASR,GAAG,EAAE;IACjCR,SAAS,CACP,CAACG,UAAU,CAACK,GAAG,CAAC,IAAI,CAACK,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,EACvC,2CAA2C,EAC3CA,GACF,CAAC;EACH,CAAC;EAKDS,uBAAuB,EAAE,SAAAA,wBAAST,GAAG,EAAE;IACrCR,SAAS,CACP,CAAC,CAACG,UAAU,CAACK,GAAG,CAAC,IAAI,OAAOA,GAAG,KAAK,UAAU,KAAK,CAACK,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,EACtE,gDAAgD,EAChDA,GACF,CAAC;EACH,CAAC;EAQDU,eAAe,EAAE,SAAAA,gBAASC,KAAK,EAAE;IAC/BnB,SAAS,CACPmB,KAAK,GAAGjB,eAAe,EACvB,oEAAoE,GAClE,4CACJ,CAAC;EACH,CAAC;EAODkB,kBAAkB,EAAE,SAAAA,mBAASC,QAAQ,EAAE;IACrCrB,SAAS,CACPqB,QAAQ,KAAKZ,SAAS,IAAIY,QAAQ,IAAIf,YAAY,CAACgB,eAAe,EAClE,gEAAgE,GAC9D,4DACJ,CAAC;EACH,CAAC;EASDA,eAAe,EAAE;IACfC,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE,QAAQ;IAChBC,YAAY,EAAE;EAChB;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGrB,YAAY"}