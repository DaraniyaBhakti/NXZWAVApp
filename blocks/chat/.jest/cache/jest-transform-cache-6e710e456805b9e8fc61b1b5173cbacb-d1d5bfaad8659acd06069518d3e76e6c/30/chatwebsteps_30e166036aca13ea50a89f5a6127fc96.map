{"version":3,"file":"/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/chat.web.steps.tsx","sources":["/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/chat.web.steps.tsx"],"names":[],"mappings":"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","sourcesContent":["// import { defineFeature, loadFeature } from \"jest-cucumber\";\n// import { shallow, ShallowWrapper } from \"enzyme\";\n\n// import * as helpers from \"../../../../framework/src/Helpers\";\n// import { runEngine } from \"../../../../framework/src/RunEngine\";\n// import { Message } from \"../../../../framework/src/Message\";\n\n// import MessageEnum, {\n//   getName,\n// } from \"../../../../framework/src/Messages/MessageEnum\";\n// import React from \"react\";\n// import Chat from \"../../src/Chat.web\";\n// import { IChat } from \"../../src/ChatController\";\n// const navigation = require(\"react-navigation\");\n\n// const screenProps = {\n//   navigation,\n//   id: \"Chat\",\n// };\n\n// const feature = loadFeature(\"./__tests__/features/Chat-scenario.web.feature\");\n\n// const initialState = {\n//   token: \"\",\n//   accountId: -1,\n//   chatName: \"\",\n//   chatList: [],\n//   isVisibleModal: false,\n// };\n\n// const testChatList: IChat[] = [\n//   { id: \"1\", muted: false, unreadCount: 5, lastMessage: \"\", name: \"Test\" },\n//   { id: \"2\", muted: true, unreadCount: 5, lastMessage: \"\", name: \"Test\" },\n// ];\n\n// const EXAMPLE_CHATLIST_RESPONSE = {\n//   data: [\n//     {\n//       id: \"7\",\n//       type: \"chat_my_chat\",\n//       attributes: {\n//         name: \"Name\",\n//         accounts_chats: [\n//           {\n//             id: \"12\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 1,\n//               muted: false,\n//               unread_count: 4,\n//             },\n//           },\n//           {\n//             id: \"8\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 2,\n//               muted: false,\n//               unread_count: 0,\n//             },\n//           },\n//         ],\n//         messages: {\n//           id: \"33\",\n//           type: \"chat_message\",\n//           attributes: {\n//             id: 33,\n//             message: \"Hi\",\n//             account_id: 2,\n//             chat_id: 7,\n//             created_at: \"2022-12-06T22:15:22.488Z\",\n//             updated_at: \"2022-12-06T22:15:27.465Z\",\n//             is_mark_read: true,\n//             attachments: null,\n//           },\n//         },\n//       },\n//     },\n//     {\n//       id: \"11\",\n//       type: \"chat_my_chat\",\n//       attributes: {\n//         name: \"Test 4\",\n//         accounts_chats: [\n//           {\n//             id: \"21\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 5,\n//               muted: false,\n//               unread_count: 7,\n//             },\n//           },\n//           {\n//             id: \"22\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 7,\n//               muted: false,\n//               unread_count: 7,\n//             },\n//           },\n//           {\n//             id: \"13\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 2,\n//               muted: true,\n//               unread_count: 0,\n//             },\n//           },\n//         ],\n//         messages: {\n//           id: \"34\",\n//           type: \"chat_message\",\n//           attributes: {\n//             id: 34,\n//             message: \"hi\",\n//             account_id: 2,\n//             chat_id: 11,\n//             created_at: \"2022-12-07T16:20:33.804Z\",\n//             updated_at: \"2022-12-07T16:20:42.485Z\",\n//             is_mark_read: true,\n//             attachments: null,\n//           },\n//         },\n//       },\n//     },\n\n//     {\n//       id: \"15\",\n//       type: \"chat_my_chat\",\n//       attributes: {\n//         name: \"Builder\",\n//         accounts_chats: [\n//           {\n//             id: \"17\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 2,\n//               muted: false,\n//               unread_count: 0,\n//             },\n//           },\n//         ],\n//         messages: {\n//           id: \"29\",\n//           type: \"chat_message\",\n//           attributes: {\n//             id: 29,\n//             message: \"Hello\",\n//             account_id: 2,\n//             chat_id: 15,\n//             created_at: \"2022-12-06T04:01:17.789Z\",\n//             updated_at: \"2022-12-06T04:01:20.383Z\",\n//             is_mark_read: true,\n//             attachments: null,\n//           },\n//         },\n//       },\n//     },\n//     {\n//       id: \"16\",\n//       type: \"chat_my_chat\",\n//       attributes: {\n//         name: \"Duis est moll\",\n//         accounts_chats: [\n//           {\n//             id: \"18\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 2,\n//               muted: true,\n//               unread_count: 1,\n//             },\n//           },\n//         ],\n//         messages: {\n//           id: \"26\",\n//           type: \"chat_message\",\n//           attributes: {\n//             id: 26,\n//             message: \"is this. a read message\",\n//             account_id: 2,\n//             chat_id: 16,\n//             created_at: \"2022-12-06T03:48:55.707Z\",\n//             updated_at: \"2022-12-06T03:48:55.707Z\",\n//             is_mark_read: false,\n//             attachments: null,\n//           },\n//         },\n//       },\n//     },\n//     {\n//       id: \"17\",\n//       type: \"chat_my_chat\",\n//       attributes: {\n//         name: \"Duis est moll\",\n//         accounts_chats: [\n//           {\n//             id: \"19\",\n//             type: \"accounts_chats\",\n//             attributes: {\n//               account_id: 2,\n//               muted: true,\n//               unread_count: 0,\n//             },\n//           },\n//         ],\n//         messages: null,\n//       },\n//     },\n//   ],\n// };\n\n// defineFeature(feature, (test) => {\n//   beforeEach(() => {\n//     jest.resetModules();\n//     jest.clearAllMocks();\n//     jest.doMock(\"react-native\", () => ({ Platform: { OS: \"web\" } }));\n//     jest.spyOn(helpers, \"getOS\").mockImplementation(() => \"web\");\n//     jest.spyOn(runEngine, \"sendMessage\");\n//   });\n\n//   test(\"User navigates to Chat\", ({ given, when, then }) => {\n//     let chatWrapper: ShallowWrapper;\n//     let instance: Chat;\n\n//     given(\"I am a User loading Chat\", () => {\n//       chatWrapper = shallow(<Chat {...screenProps} />);\n//     });\n\n//     when(\"I navigate to Chat\", () => {\n//       instance = chatWrapper.instance() as Chat;\n//       jest.spyOn(instance, \"send\");\n//       const msgToken = new Message(getName(MessageEnum.SessionResponseMessage));\n//       msgToken.addData(getName(MessageEnum.SessionResponseToken), \"TOKEN\");\n//       runEngine.sendMessage(\"Unit Test\", msgToken);\n\n//       const msgValidationAPI = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n//       msgValidationAPI.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         msgValidationAPI.messageId\n//       );\n\n//       msgValidationAPI.addData(\n//         getName(MessageEnum.RestAPIResponceSuccessMessage),\n//         {\n//           data: EXAMPLE_CHATLIST_RESPONSE,\n//           meta: {\n//             message: \"Chat data\",\n//           },\n//         }\n//       );\n\n//       instance.getChatListApiCallId = msgValidationAPI.messageId;\n//       instance.createChatRoomApiCallId = msgValidationAPI.messageId;\n//       runEngine.sendMessage(\"Unit Test\", msgValidationAPI);\n//     });\n\n//     then(\"Chat will load\", () => {\n//       instance.getChatList(\"TOKEN\");\n//       expect(chatWrapper).toBeTruthy();\n//       expect(chatWrapper.state()).toEqual(initialState);\n//     });\n\n//     then(\"a call to retrieve the chatlist will be made\", () => {\n//       expect(runEngine.sendMessage).toBeCalledWith(\n//         \"RestAPIRequestMessage\",\n//         expect.objectContaining({\n//           id: \"RestAPIRequestMessage\",\n//           initializeFromObject: expect.any(Function),\n//           messageId: expect.any(String),\n//           properties: {\n//             RestAPIRequestMethodMessage: \"GET\",\n//             RestAPIResponceEndPointMessage: \"chat/chats/mychats\",\n//             RestAPIRequestHeaderMessage: JSON.stringify({\n//               \"Content-Type\": \"application/json\",\n//               token: \"TOKEN\",\n//             }),\n//           },\n//         })\n//       );\n//     });\n\n//     then(\"I will see a list of chatrooms I am a part of\", () => {\n//       const chatApiMessage = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n\n//       chatApiMessage.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         chatApiMessage.messageId\n//       );\n\n//       chatApiMessage.addData(\n//         getName(MessageEnum.RestAPIResponceSuccessMessage),\n//         EXAMPLE_CHATLIST_RESPONSE\n//       );\n\n//       instance.getChatListApiCallId = chatApiMessage.messageId;\n//       runEngine.sendMessage(\"Unit Test\", chatApiMessage);\n\n//       expect(instance.state.chatList.length).toBe(5);\n//     });\n\n//     when(\"I click on the createChatRoom button\", () => {\n//       const buttonComponent = chatWrapper.findWhere(\n//         (node) => node.prop(\"data-test-id\") === \"createChatRoomBtn\"\n//       );\n//       buttonComponent.simulate(\"click\");\n//     });\n\n//     when(\"I click on the cancel button\", () => {\n//       const buttonComponent = chatWrapper.findWhere(\n//         (node) => node.prop(\"data-test-id\") === \"btnCloseModal\"\n//       );\n//       buttonComponent.simulate(\"click\");\n//     });\n\n//     when(\"I click on the createChatRoom button\", () => {\n//       const buttonComponent = chatWrapper.findWhere(\n//         (node) => node.prop(\"data-test-id\") === \"createChatRoomBtn\"\n//       );\n//       buttonComponent.simulate(\"click\");\n//     });\n\n//     then(\"I can enter the chat room name\", () => {\n//       const inputRoomName = chatWrapper.findWhere(\n//         (node) => node.prop(\"data-test-id\") === \"inputRoomName\"\n//       );\n//       inputRoomName.simulate(\"change\", \"Chat Room\");\n//       expect(instance.state.chatName).toEqual(\"Chat Room\")\n//     });\n\n//     when(\"I click on the createChatRoom button\", () => {\n//       const createChatRoomButton = chatWrapper.findWhere(\n//         (node) => node.prop(\"data-test-id\") === \"createChatSubmitBtn\"\n//       );\n//       createChatRoomButton.simulate(\"click\");\n//     });\n\n//     then(\"a call to create the chat room will be made\", () => {\n//       expect(runEngine.sendMessage).toBeCalledWith(\n//         \"RestAPIRequestMessage\",\n//         expect.objectContaining({\n//           id: \"RestAPIRequestMessage\",\n//           initializeFromObject: expect.any(Function),\n//           messageId: expect.any(String),\n//           properties: {\n//             RestAPIRequestMethodMessage: \"POST\",\n//             RestAPIResponceEndPointMessage: \"chat/chats\",\n//             RestAPIRequestHeaderMessage: JSON.stringify({\n//               \"Content-Type\": \"application/json\",\n//               token: \"\",\n//               \"Access-Control-Allow-Origin\": \"*\",\n//             }),\n//             RestAPIRequestBodyMessage: JSON.stringify({\n//               name: \"Chat Room\",\n//             }),\n//           },\n//         })\n//       );\n//     });\n\n//     then(\"The network will respond with a success\", () => {\n//       const createChatRoomApiMessage = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n\n//       createChatRoomApiMessage.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         createChatRoomApiMessage.messageId\n//       );\n\n//       instance.createChatRoomApiCallId = createChatRoomApiMessage.messageId;\n//       runEngine.sendMessage(\"Unit Test\", createChatRoomApiMessage);\n//     });\n\n//     then(\"a call to retrieve the chatlist will be made\", () => {\n//       expect(runEngine.sendMessage).toBeCalledWith(\n//         \"RestAPIRequestMessage\",\n//         expect.objectContaining({\n//           id: \"RestAPIRequestMessage\",\n//           initializeFromObject: expect.any(Function),\n//           messageId: expect.any(String),\n//           properties: {\n//             RestAPIRequestMethodMessage: \"GET\",\n//             RestAPIResponceEndPointMessage: \"chat/chats/mychats\",\n//             RestAPIRequestHeaderMessage: JSON.stringify({\n//               \"Content-Type\": \"application/json\",\n//               token: \"TOKEN\",\n//             }),\n//           },\n//         })\n//       );\n//     });\n\n//     then(\"I will see a list of chatrooms I am a part of\", () => {\n//       const chatApiMessage = new Message(\n//         getName(MessageEnum.RestAPIResponceMessage)\n//       );\n\n//       chatApiMessage.addData(\n//         getName(MessageEnum.RestAPIResponceDataMessage),\n//         chatApiMessage.messageId\n//       );\n\n//       chatApiMessage.addData(\n//         getName(MessageEnum.RestAPIResponceSuccessMessage),\n//         EXAMPLE_CHATLIST_RESPONSE\n//       );\n\n//       instance.getChatListApiCallId = chatApiMessage.messageId;\n//       runEngine.sendMessage(\"Unit Test\", chatApiMessage);\n//     });\n\n//     when(\"I click on a chat room\", () => {\n//       const buttonComponent = chatWrapper.findWhere(\n//         (node) => node.prop(\"data-test-id\") === \"btnShowChat0\"\n//       );\n//       buttonComponent.simulate(\"click\");\n//     });\n\n//     then(\"I will navigate to that chat room\", () => {\n//       // const navigationRaiseMessage: Message = new Message(\n//       //   \"NavigationPayLoadMessage\"\n//       // );\n//       // navigationRaiseMessage.messageId = expect.any(String);\n//       // navigationRaiseMessage.addData(\"SessionResponseData\", { chatId: \"7\" });\n//       // const runEngineResult:Message = new Message(\"NavigationMessage\");\n//       // runEngineResult.messageId = expect.any(String);\n//       // const navigationPropsMessage = {\n//       //   id: \"Chat\",\n//       //   navigation: {\n//       //     navigate: jest.fn(),\n//       //   },\n//       // };\n//       // runEngineResult.addData(\"NavigationPropsMessage\", navigationPropsMessage);\n//       // runEngineResult.addData(\"NavigationRaiseMessage\", navigationRaiseMessage);\n//       // runEngineResult.addData(\"NavigationTargetMessage\", \"ChatView\");\n//       // expect(runEngine.sendMessage).toBeCalledWith(\n//       //   expect.any(String),\n//       //   runEngineResult\n//       // );\n//     });\n\n//     then(\"I can leave the screen\", () => {\n//       instance.componentWillUnmount();\n//       expect(chatWrapper).toBeTruthy();\n//     });\n//   });\n// });\n"]}