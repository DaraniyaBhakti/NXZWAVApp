7fd61c3282ac2acc9f3e0b7cb979ea1e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncStorageKey = exports.FONTS = exports.COLORS = exports.dimension = void 0;
const react_native_elements_1 = require("react-native-elements");
// import { StatusBarHeight } from "./AppHelper/BlockHelper";
const react_native_1 = require("react-native");
let StatusBarHeight = 30;
exports.dimension = {
  commentUsername: 13,
  commentText: 13,
  bulletText: 8,
  defaultText: 13,
  defaultTitleText: 15,
  chatSearchUserImage: 35
};
exports.COLORS = {
  TRANSPARENT: 'transparent',
  windowBackground: 'black',
  lightBlack: '#141414',
  black: '#000000',
  redActive: '#FF0010',
  grey: '#212121',
  white: '#ffffff',
  offWhite: '#8F92A0',
  blue: '#3959F9',
  lightGrey: '#979797',
  smokyBlack: '#0f0f0f',
  lightSilver: "#D8D8D8",
  textColor: '#F0F0F5',
  textColorBlue: '#3959F9',
  textColorOffWhite: '#8F92A0',
  textColorTab: '#F0F0F5',
  textColorTabRed: 'red',
  loadingIndicator: '#000000',
  tabDefault: "#e4e6e7",
  tabActive: '#3959F9',
  tabBackground: '#101010',
  //Login
  loginBoxBackground: 'black',
  boxBorderColor: '#FFFFFF',
  boxBackground: '#000000',
  boxDot: '#e4e6e7',
  boxDotActive: '#3959F9'
};
exports.FONTS = {
  regular: 'Inter-Regular',
  semiBold: 'Inter-SemiBold',
  bold: 'Inter-Bold',
  medium: 'Inter-Medium'
};
exports.AsyncStorageKey = {
  isUserLogin: 'isUserLogin',
  userId: 'userId',
  appLoginUserID: 'appLoginUserID',
  identityToken: 'identityToken',
  headerToken: 'headerToken',
  userPoints: 'userPoints',
  userLevel: 'userLevel',
  profileUserID: 'profileUserID',
  LoginUserProfilePic: 'LoginUserProfilePic',
  LoginUserName: 'LoginUserName',
  chatTypeDm: 'chatTypeDm',
  chatUser: 'chatUser'
};
const globalStyles = react_native_1.StyleSheet.create({
  defaultButtonView: {
    backgroundColor: exports.COLORS.grey,
    height: react_native_elements_1.normalize(50),
    marginTop: react_native_elements_1.normalize(25),
    marginLeft: "10%",
    marginRight: "10%",
    borderRadius: react_native_elements_1.normalize(30),
    flexDirection: "row",
    alignContent: "center",
    alignItems: "center",
    justifyContent: "center"
  },
  defaultButtonViewRed: {
    backgroundColor: exports.COLORS.redActive
  },
  defaultButtonViewBlue: {
    backgroundColor: exports.COLORS.blue
  },
  buttonViewRed: {
    backgroundColor: exports.COLORS.redActive,
    width: "40%",
    marginLeft: "5%",
    marginRight: "4%"
  },
  buttonViewGrey: {
    backgroundColor: exports.COLORS.grey,
    width: "40%",
    marginLeft: "4%",
    marginRight: "8%"
  },
  buttonText: {
    fontSize: react_native_elements_1.normalize(exports.dimension.defaultTitleText),
    color: exports.COLORS.textColor,
    textAlign: "center",
    fontFamily: exports.FONTS.bold
  },
  flex1: {
    flex: 1
  },
  flexDirectionColumn: {
    flexDirection: "column"
  },
  flexDirectionRow: {
    flexDirection: 'row'
  },
  flexGrow1: {
    flexGrow: 1
  },
  labelText: {
    fontSize: react_native_elements_1.normalize(13),
    color: exports.COLORS.textColorOffWhite,
    textAlign: "center",
    fontFamily: exports.FONTS.bold
  },
  labelTextBlue: {
    color: exports.COLORS.textColorBlue
  },
  labelTextOffWhite: {
    color: exports.COLORS.textColorOffWhite
  },
  labelTextWhite: {
    color: exports.COLORS.textColor
  },
  labelTextMedium: {
    fontSize: react_native_elements_1.normalize(12),
    color: exports.COLORS.textColor,
    textAlign: "center",
    fontFamily: exports.FONTS.semiBold
  },
  labelTextSmall: {
    fontSize: react_native_elements_1.normalize(10),
    color: exports.COLORS.textColor,
    textAlign: "center",
    fontFamily: exports.FONTS.semiBold
  },
  viewWindow: {
    width: '100%',
    height: react_native_1.Dimensions.get('window').height,
    flex: 1,
    paddingTop: StatusBarHeight,
    paddingBottom: react_native_elements_1.normalize(25),
    paddingLeft: react_native_elements_1.normalize(10),
    paddingRight: react_native_elements_1.normalize(10)
  },
  viewWindowNoHeight: {
    width: "100%",
    flex: 1,
    paddingTop: StatusBarHeight
  },
  headerRow: {
    height: StatusBarHeight,
    marginTop: react_native_elements_1.normalize(15)
  },
  headerTextView: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    paddingRight: react_native_elements_1.normalize(40),
    paddingLeft: react_native_elements_1.normalize(5)
  },
  headerText: {
    justifyContent: 'center',
    textAlign: 'center',
    fontSize: react_native_elements_1.normalize(13),
    color: exports.COLORS.textColor,
    fontFamily: exports.FONTS.bold
  },
  headerImage: {
    width: react_native_elements_1.normalize(30),
    height: react_native_elements_1.normalize(30),
    padding: react_native_elements_1.normalize(8)
  },
  apiMessage: {
    marginTop: react_native_elements_1.normalize(20),
    marginBottom: react_native_elements_1.normalize(10),
    fontSize: react_native_elements_1.normalize(16),
    textAlign: 'center',
    marginVertical: 8,
    color: exports.COLORS.textColorOffWhite,
    fontFamily: exports.FONTS.medium
  },
  containerFlex: {
    flex: 1,
    width: react_native_1.Platform.OS === "web" ? "75%" : "100%",
    backgroundColor: exports.COLORS.windowBackground
  },
  searchImageView: {
    flexDirection: "row",
    padding: react_native_elements_1.normalize(15),
    backgroundColor: exports.COLORS.grey,
    marginTop: react_native_elements_1.normalize(20),
    borderRadius: 30
  },
  imageSearch: {
    width: react_native_elements_1.normalize(22),
    height: react_native_elements_1.normalize(22),
    padding: react_native_elements_1.normalize(4),
    alignSelf: "center"
  }
});
exports.default = globalStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,