{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_extends2","_NativeStatusBarManager","_NativeStatusBarManag","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","Platform","React","processColor","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_React$Component","_super","_this","_len","length","args","Array","_key","concat","_stackEntry","key","componentDidMount","pushStackEntry","componentWillUnmount","popStackEntry","componentDidUpdate","replaceStackEntry","render","setHidden","animation","_defaultProps","OS","NativeStatusBarManager","setBarStyle","style","setStyle","setNetworkActivityIndicatorVisible","visible","console","warn","setBackgroundColor","color","processedColor","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","Component","select","android","getConstants","DEFAULT_BACKGROUND_COLOR","ios","_updateImmediate","_currentValues","currentHeight","HEIGHT","defaultProps","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"sources":["StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\nconst processColor = require('../../StyleSheet/processColor');\n\nimport NativeStatusBarManager from './NativeStatusBarManager';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?string,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: Platform.select({\n      android:\n        NativeStatusBarManager.getConstants().DEFAULT_BACKGROUND_COLOR ??\n        'black',\n      ios: 'black',\n    }),\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: number = NativeStatusBarManager.getConstants().HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n\n    NativeStatusBarManager.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManager.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  static defaultProps: $TEMPORARY$object<{|\n    animated: boolean,\n    showHideTransition: $TEMPORARY$string<'fade'>,\n  |}> = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          const processedColor = processColor(\n            mergedProps.backgroundColor.value,\n          );\n          if (processedColor == null) {\n            console.warn(\n              `\\`StatusBar._updatePropsStack\\`: Color ${\n                mergedProps.backgroundColor.value\n              } parsed to null or undefined`,\n            );\n          } else {\n            NativeStatusBarManager.setColor(\n              processedColor,\n              mergedProps.backgroundColor.animated,\n            );\n          }\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          NativeStatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAA,IAAAG,UAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAAA,IAAAI,2BAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAA,IAAAK,gBAAA,GAAAN,sBAAA,CAAAC,OAAA;AAAA,IAAAM,SAAA,GAAAP,sBAAA,CAAAC,OAAA;AAOb,IAAAO,uBAAA,GAAAR,sBAAA,CAAAC,OAAA;AAA8D,IAAAQ,qBAAA;AAAA,SAAAC,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAT,gBAAA,CAAAU,OAAA,EAAAL,OAAA,GAAAM,MAAA,MAAAL,yBAAA,QAAAM,SAAA,OAAAZ,gBAAA,CAAAU,OAAA,QAAAG,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAN,KAAA,EAAAO,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAF,KAAA,CAAAQ,KAAA,OAAAD,SAAA,gBAAAjB,2BAAA,CAAAW,OAAA,QAAAC,MAAA;AAAA,SAAAJ,0BAAA,eAAAO,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAG,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAT,OAAA,CAAAC,SAAA,CAAAK,OAAA,8CAAAI,CAAA;AAL9D,IAAMC,QAAQ,GAAG9B,OAAO,CAAC,0BAA0B,CAAC;AACpD,IAAM+B,KAAK,GAAG/B,OAAO,CAAC,OAAO,CAAC;AAE9B,IAAMgC,YAAY,GAAGhC,OAAO,CAAC,+BAA+B,CAAC;AA6F7D,SAASiC,eAAeA,CACtBC,UAAyB,EACzBC,aAAqB,EACb;EACR,OAAOD,UAAU,CAACE,MAAM,CAAC,UAACC,IAAI,EAAEC,GAAG,EAAK;IACtC,KAAK,IAAMC,IAAI,IAAID,GAAG,EAAE;MACtB,IAAIA,GAAG,CAACC,IAAI,CAAC,IAAI,IAAI,EAAE;QACrBF,IAAI,CAACE,IAAI,CAAC,GAAGD,GAAG,CAACC,IAAI,CAAC;MACxB;IACF;IACA,OAAOF,IAAI;EACb,CAAC,EAAE,IAAA/B,SAAA,CAAAS,OAAA,EAAc,CAAC,CAAC,EAAEoB,aAAa,CAAC,CAAC;AACtC;AAMA,SAASK,gBAAgBA,CAACC,KAAU,EAAO;EACzC,OAAO;IACLC,eAAe,EACbD,KAAK,CAACC,eAAe,IAAI,IAAI,GACzB;MACEC,KAAK,EAAEF,KAAK,CAACC,eAAe;MAC5BE,QAAQ,EAAEH,KAAK,CAACG;IAClB,CAAC,GACD,IAAI;IACVC,QAAQ,EACNJ,KAAK,CAACI,QAAQ,IAAI,IAAI,GAClB;MACEF,KAAK,EAAEF,KAAK,CAACI,QAAQ;MACrBD,QAAQ,EAAEH,KAAK,CAACG;IAClB,CAAC,GACD,IAAI;IACVE,WAAW,EAAEL,KAAK,CAACK,WAAW;IAC9BC,MAAM,EACJN,KAAK,CAACM,MAAM,IAAI,IAAI,GAChB;MACEJ,KAAK,EAAEF,KAAK,CAACM,MAAM;MACnBH,QAAQ,EAAEH,KAAK,CAACG,QAAQ;MACxBI,UAAU,EAAEP,KAAK,CAACQ;IACpB,CAAC,GACD,IAAI;IACVC,+BAA+B,EAAET,KAAK,CAACS;EACzC,CAAC;AACH;AAAC,IAgEKC,SAAS,aAAAC,gBAAA;EAAA,IAAAjD,UAAA,CAAAY,OAAA,EAAAoC,SAAA,EAAAC,gBAAA;EAAA,IAAAC,MAAA,GAAA5C,YAAA,CAAA0C,SAAA;EAAA,SAAAA,UAAA;IAAA,IAAAG,KAAA;IAAA,IAAArD,gBAAA,CAAAc,OAAA,QAAAoC,SAAA;IAAA,SAAAI,IAAA,GAAAlC,SAAA,CAAAmC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAtC,SAAA,CAAAsC,IAAA;IAAA;IAAAL,KAAA,GAAAD,MAAA,CAAAzB,IAAA,CAAAN,KAAA,CAAA+B,MAAA,SAAAO,MAAA,CAAAH,IAAA;IAAAH,KAAA,CAyKbO,WAAW,GAAG,IAAI;IAAA,OAAAP,KAAA;EAAA;EAAA,IAAApD,aAAA,CAAAa,OAAA,EAAAoC,SAAA;IAAAW,GAAA;IAAAnB,KAAA,EAElB,SAAAoB,kBAAA,EAAoB;MAKlB,IAAI,CAACF,WAAW,GAAGV,SAAS,CAACa,cAAc,CAAC,IAAI,CAACvB,KAAK,CAAC;IACzD;EAAC;IAAAqB,GAAA;IAAAnB,KAAA,EAED,SAAAsB,qBAAA,EAAuB;MAGrBd,SAAS,CAACe,aAAa,CAAC,IAAI,CAACL,WAAW,CAAC;IAC3C;EAAC;IAAAC,GAAA;IAAAnB,KAAA,EAED,SAAAwB,mBAAA,EAAqB;MACnB,IAAI,CAACN,WAAW,GAAGV,SAAS,CAACiB,iBAAiB,CAC5C,IAAI,CAACP,WAAW,EAChB,IAAI,CAACpB,KACP,CAAC;IACH;EAAC;IAAAqB,GAAA;IAAAnB,KAAA,EAmFD,SAAA0B,OAAA,EAAqB;MACnB,OAAO,IAAI;IACb;EAAC;IAAAP,GAAA;IAAAnB,KAAA,EAzOD,SAAA2B,UAAiBvB,MAAe,EAAEwB,SAA8B,EAAE;MAChEA,SAAS,GAAGA,SAAS,IAAI,MAAM;MAC/BpB,SAAS,CAACqB,aAAa,CAACzB,MAAM,CAACJ,KAAK,GAAGI,MAAM;MAC7C,IAAIjB,QAAQ,CAAC2C,EAAE,KAAK,KAAK,EAAE;QACzBC,+BAAsB,CAACJ,SAAS,CAACvB,MAAM,EAAEwB,SAAS,CAAC;MACrD,CAAC,MAAM,IAAIzC,QAAQ,CAAC2C,EAAE,KAAK,SAAS,EAAE;QACpCC,+BAAsB,CAACJ,SAAS,CAACvB,MAAM,CAAC;MAC1C;IACF;EAAC;IAAAe,GAAA;IAAAnB,KAAA,EAOD,SAAAgC,YAAmBC,KAAqB,EAAEhC,QAAkB,EAAE;MAC5DA,QAAQ,GAAGA,QAAQ,IAAI,KAAK;MAC5BO,SAAS,CAACqB,aAAa,CAAC3B,QAAQ,CAACF,KAAK,GAAGiC,KAAK;MAC9C,IAAI9C,QAAQ,CAAC2C,EAAE,KAAK,KAAK,EAAE;QACzBC,+BAAsB,CAACG,QAAQ,CAACD,KAAK,EAAEhC,QAAQ,CAAC;MAClD,CAAC,MAAM,IAAId,QAAQ,CAAC2C,EAAE,KAAK,SAAS,EAAE;QACpCC,+BAAsB,CAACG,QAAQ,CAACD,KAAK,CAAC;MACxC;IACF;EAAC;IAAAd,GAAA;IAAAnB,KAAA,EAMD,SAAAmC,mCAA0CC,OAAgB,EAAE;MAC1D,IAAIjD,QAAQ,CAAC2C,EAAE,KAAK,KAAK,EAAE;QACzBO,OAAO,CAACC,IAAI,CACV,+DACF,CAAC;QACD;MACF;MACA9B,SAAS,CAACqB,aAAa,CAACtB,+BAA+B,GAAG6B,OAAO;MACjEL,+BAAsB,CAACI,kCAAkC,CAACC,OAAO,CAAC;IACpE;EAAC;IAAAjB,GAAA;IAAAnB,KAAA,EAOD,SAAAuC,mBAA0BC,KAAa,EAAEvC,QAAkB,EAAE;MAC3D,IAAId,QAAQ,CAAC2C,EAAE,KAAK,SAAS,EAAE;QAC7BO,OAAO,CAACC,IAAI,CAAC,mDAAmD,CAAC;QACjE;MACF;MACArC,QAAQ,GAAGA,QAAQ,IAAI,KAAK;MAC5BO,SAAS,CAACqB,aAAa,CAAC9B,eAAe,CAACC,KAAK,GAAGwC,KAAK;MAErD,IAAMC,cAAc,GAAGpD,YAAY,CAACmD,KAAK,CAAC;MAC1C,IAAIC,cAAc,IAAI,IAAI,EAAE;QAC1BJ,OAAO,CAACC,IAAI,4CACiCE,KAAK,iCAClD,CAAC;QACD;MACF;MAEAT,+BAAsB,CAACW,QAAQ,CAACD,cAAc,EAAExC,QAAQ,CAAC;IAC3D;EAAC;IAAAkB,GAAA;IAAAnB,KAAA,EAMD,SAAA2C,eAAsBxC,WAAoB,EAAE;MAC1C,IAAIhB,QAAQ,CAAC2C,EAAE,KAAK,SAAS,EAAE;QAC7BO,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;QAC7D;MACF;MACA9B,SAAS,CAACqB,aAAa,CAAC1B,WAAW,GAAGA,WAAW;MACjD4B,+BAAsB,CAACY,cAAc,CAACxC,WAAW,CAAC;IACpD;EAAC;IAAAgB,GAAA;IAAAnB,KAAA,EAQD,SAAAqB,eAAsBvB,KAAU,EAAO;MACrC,IAAM8C,KAAK,GAAG/C,gBAAgB,CAACC,KAAK,CAAC;MACrCU,SAAS,CAACqC,WAAW,CAACC,IAAI,CAACF,KAAK,CAAC;MACjCpC,SAAS,CAACuC,iBAAiB,CAAC,CAAC;MAC7B,OAAOH,KAAK;IACd;EAAC;IAAAzB,GAAA;IAAAnB,KAAA,EAOD,SAAAuB,cAAqBqB,KAAU,EAAE;MAC/B,IAAMI,KAAK,GAAGxC,SAAS,CAACqC,WAAW,CAACI,OAAO,CAACL,KAAK,CAAC;MAClD,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBxC,SAAS,CAACqC,WAAW,CAACK,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACxC;MACAxC,SAAS,CAACuC,iBAAiB,CAAC,CAAC;IAC/B;EAAC;IAAA5B,GAAA;IAAAnB,KAAA,EAQD,SAAAyB,kBAAyBmB,KAAU,EAAE9C,KAAU,EAAO;MACpD,IAAMqD,QAAQ,GAAGtD,gBAAgB,CAACC,KAAK,CAAC;MACxC,IAAMkD,KAAK,GAAGxC,SAAS,CAACqC,WAAW,CAACI,OAAO,CAACL,KAAK,CAAC;MAClD,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBxC,SAAS,CAACqC,WAAW,CAACG,KAAK,CAAC,GAAGG,QAAQ;MACzC;MACA3C,SAAS,CAACuC,iBAAiB,CAAC,CAAC;MAC7B,OAAOI,QAAQ;IACjB;EAAC;EAAA,OAAA3C,SAAA;AAAA,EA/JqBpB,KAAK,CAACgE,SAAS;AAAjC5C,SAAS,CACNqC,WAAW,GAAG,EAAE;AADnBrC,SAAS,CAGNqB,aAAa,GAAGhC,gBAAgB,CAAC;EACtCI,QAAQ,EAAE,KAAK;EACfK,kBAAkB,EAAE,MAAM;EAC1BP,eAAe,EAAEZ,QAAQ,CAACkE,MAAM,CAAC;IAC/BC,OAAO,GAAAzF,qBAAA,GACLkE,+BAAsB,CAACwB,YAAY,CAAC,CAAC,CAACC,wBAAwB,YAAA3F,qBAAA,GAC9D,OAAO;IACT4F,GAAG,EAAE;EACP,CAAC,CAAC;EACFvD,QAAQ,EAAE,SAAS;EACnBC,WAAW,EAAE,KAAK;EAClBC,MAAM,EAAE,KAAK;EACbG,+BAA+B,EAAE;AACnC,CAAC,CAAC;AAhBEC,SAAS,CAmBNkD,gBAAgB,GAAG,IAAI;AAnB1BlD,SAAS,CAsBNmD,cAAc,GAAG,IAAI;AAtBxBnD,SAAS,CA+BNoD,aAAa,GAAW7B,+BAAsB,CAACwB,YAAY,CAAC,CAAC,CAACM,MAAM;AA/BvErD,SAAS,CAiKNsD,YAAY,GAGb;EACJ7D,QAAQ,EAAE,KAAK;EACfK,kBAAkB,EAAE;AACtB,CAAC;AAvKGE,SAAS,CAmMNuC,iBAAiB,GAAG,YAAM;EAE/BgB,cAAc,CAACvD,SAAS,CAACkD,gBAAgB,CAAC;EAC1ClD,SAAS,CAACkD,gBAAgB,GAAGM,YAAY,CAAC,YAAM;IAC9C,IAAMC,QAAQ,GAAGzD,SAAS,CAACmD,cAAc;IACzC,IAAMO,WAAW,GAAG5E,eAAe,CACjCkB,SAAS,CAACqC,WAAW,EACrBrC,SAAS,CAACqB,aACZ,CAAC;IAGD,IAAI1C,QAAQ,CAAC2C,EAAE,KAAK,KAAK,EAAE;MACzB,IACE,CAACmC,QAAQ,IACTA,QAAQ,CAAC/D,QAAQ,CAACF,KAAK,KAAKkE,WAAW,CAAChE,QAAQ,CAACF,KAAK,EACtD;QACA+B,+BAAsB,CAACG,QAAQ,CAC7BgC,WAAW,CAAChE,QAAQ,CAACF,KAAK,EAC1BkE,WAAW,CAAChE,QAAQ,CAACD,QAAQ,IAAI,KACnC,CAAC;MACH;MACA,IAAI,CAACgE,QAAQ,IAAIA,QAAQ,CAAC7D,MAAM,CAACJ,KAAK,KAAKkE,WAAW,CAAC9D,MAAM,CAACJ,KAAK,EAAE;QACnE+B,+BAAsB,CAACJ,SAAS,CAC9BuC,WAAW,CAAC9D,MAAM,CAACJ,KAAK,EACxBkE,WAAW,CAAC9D,MAAM,CAACH,QAAQ,GACvBiE,WAAW,CAAC9D,MAAM,CAACC,UAAU,GAC7B,MACN,CAAC;MACH;MAEA,IACE,CAAC4D,QAAQ,IACTA,QAAQ,CAAC1D,+BAA+B,KACtC2D,WAAW,CAAC3D,+BAA+B,EAC7C;QACAwB,+BAAsB,CAACI,kCAAkC,CACvD+B,WAAW,CAAC3D,+BACd,CAAC;MACH;IACF,CAAC,MAAM,IAAIpB,QAAQ,CAAC2C,EAAE,KAAK,SAAS,EAAE;MACpC,IACE,CAACmC,QAAQ,IACTA,QAAQ,CAAC/D,QAAQ,CAACF,KAAK,KAAKkE,WAAW,CAAChE,QAAQ,CAACF,KAAK,EACtD;QACA+B,+BAAsB,CAACG,QAAQ,CAACgC,WAAW,CAAChE,QAAQ,CAACF,KAAK,CAAC;MAC7D;MACA,IACE,CAACiE,QAAQ,IACTA,QAAQ,CAAClE,eAAe,CAACC,KAAK,KAAKkE,WAAW,CAACnE,eAAe,CAACC,KAAK,EACpE;QACA,IAAMyC,cAAc,GAAGpD,YAAY,CACjC6E,WAAW,CAACnE,eAAe,CAACC,KAC9B,CAAC;QACD,IAAIyC,cAAc,IAAI,IAAI,EAAE;UAC1BJ,OAAO,CAACC,IAAI,2CAER4B,WAAW,CAACnE,eAAe,CAACC,KAAK,iCAErC,CAAC;QACH,CAAC,MAAM;UACL+B,+BAAsB,CAACW,QAAQ,CAC7BD,cAAc,EACdyB,WAAW,CAACnE,eAAe,CAACE,QAC9B,CAAC;QACH;MACF;MACA,IAAI,CAACgE,QAAQ,IAAIA,QAAQ,CAAC7D,MAAM,CAACJ,KAAK,KAAKkE,WAAW,CAAC9D,MAAM,CAACJ,KAAK,EAAE;QACnE+B,+BAAsB,CAACJ,SAAS,CAACuC,WAAW,CAAC9D,MAAM,CAACJ,KAAK,CAAC;MAC5D;MACA,IAAI,CAACiE,QAAQ,IAAIA,QAAQ,CAAC9D,WAAW,KAAK+D,WAAW,CAAC/D,WAAW,EAAE;QACjE4B,+BAAsB,CAACY,cAAc,CAACuB,WAAW,CAAC/D,WAAW,CAAC;MAChE;IACF;IAEAK,SAAS,CAACmD,cAAc,GAAGO,WAAW;EACxC,CAAC,CAAC;AACJ,CAAC;AAOHC,MAAM,CAACC,OAAO,GAAG5D,SAAS"}