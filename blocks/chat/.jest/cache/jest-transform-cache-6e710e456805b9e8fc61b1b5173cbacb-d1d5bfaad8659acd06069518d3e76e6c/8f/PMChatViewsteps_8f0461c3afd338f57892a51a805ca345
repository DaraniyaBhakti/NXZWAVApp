a32adb887d931a485873df536dbcb07d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_cucumber_1 = require("jest-cucumber");
const enzyme_1 = require("enzyme");
const helpers = __importStar(require("../../../../framework/src/Helpers"));
const react_1 = __importDefault(require("react"));
const PmChatView_1 = __importDefault(require("../../src/PmChatView"));
const MessageEnum_1 = __importStar(require("../../../../framework/src/Messages/MessageEnum"));
const Message_1 = require("../../../../framework/src/Message");
const RunEngine_1 = require("../../../../framework/src/RunEngine");
const navigation = require("react-navigation");
const screenProps = {
    navigation: {
        addListener: jest.fn().mockImplementation((event, callback) => {
            callback();
        }),
        navigate: jest.fn(),
        state: { params: { receiverUser: {}, conversationID: 0 } },
    },
    id: "PMChatView"
};
const feature = jest_cucumber_1.loadFeature("./__tests__/features/PMChatView-scenario.feature");
jest_cucumber_1.defineFeature(feature, (test) => {
    beforeEach(() => {
        jest.resetModules();
        jest.doMock("react-native", () => ({ Platform: { OS: "ios" } }));
        jest.spyOn(helpers, "getOS").mockImplementation(() => "ios");
    });
    test("User navigates to PMChatView", ({ given, when, then }) => {
        let pmChatViewWrapper;
        let instance;
        given("I am a User loading PMChatView", () => {
            pmChatViewWrapper = enzyme_1.shallow(react_1.default.createElement(PmChatView_1.default, Object.assign({}, screenProps)));
        });
        when("I navigate to PMChatView", () => {
            instance = pmChatViewWrapper.instance();
        });
        then('PMChatView will load with out errors', () => {
            expect(pmChatViewWrapper).toBeTruthy();
        });
        then('I can enter text with out errors', () => {
            let textInputComponent = pmChatViewWrapper.findWhere((node) => node.prop('testID') === 'inputMessage');
            textInputComponent.simulate('changeText', 'hello@aol.com');
        });
        then('I can select the button with with out errors', () => {
            let backBtn = pmChatViewWrapper.findWhere((node) => node.prop("testID") === "backBtn");
            backBtn.simulate("press");
            expect(backBtn).toHaveLength(1);
            let editBtn = pmChatViewWrapper.findWhere((node) => node.prop("testID") === "editBtn");
            editBtn.simulate("press");
            expect(editBtn).toHaveLength(1);
            let btnSendMessage = pmChatViewWrapper.findWhere((node) => node.prop("testID") === "btnSendMessage");
            btnSendMessage.simulate("press");
            expect(btnSendMessage).toHaveLength(1);
        });
        then("Get Chat List API load with out errors", () => {
            const getChatListApiCallId = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            getChatListApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), getChatListApiCallId.messageId);
            getChatListApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), JSON.parse(JSON.stringify({
                "data": [{
                        "id": "244", "type": "pm_chat", "attributes": {
                            "id": 244, "points": 0, "is_locked": false, "user_profile_info_id": 9,
                            "image": null, "message": { "message": "heloo mitang rana", "created_at": "2023-07-03T10:39:37.430Z" }, "profile": null
                        }
                    },
                    {
                        "id": "211", "type": "pm_chat", "attributes": {
                            "id": 211, "points": 50, "is_locked": true, "user_profile_info_id": 9, "image": "https://nxzwav-294793-ruby.b294793.dev.eastus.az.svc.builder.cafe/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBWjA9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--03191c01d82d9bdf7fc902680f66f67720c653f6/IMG_0010.JPG", "message": { "message": "Fgh", "created_at": "2023-06-23T07:39:23.981Z" }, "profile": null
                        }
                    }]
            })));
            getChatListApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceErrorMessage), JSON.parse(JSON.stringify({ Error: "error message" })));
            instance.getChatListApiCallId = getChatListApiCallId.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", getChatListApiCallId);
            expect(pmChatViewWrapper).toBeTruthy();
        });
        then("Unlock Message API load with out errors", () => {
            const unlockMessageApiCallId = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            unlockMessageApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), unlockMessageApiCallId.messageId);
            unlockMessageApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), JSON.parse(JSON.stringify({
                "data": {
                    "id": "231",
                    "type": "pm_chat", "attributes": {
                        "id": 231,
                        "points": 0,
                        "is_locked": false,
                        "user_profile_info_id": 3,
                        "image": "https://nxzwav-294793-ruby.b294793.dev.eastus.az.svc.builder.cafe/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBYUU9IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--f8276fa3961fbf5b31a48aa240f40505df068b7c/image-3.png", "message": { "message": "monday 2/7", "created_at": "2023-07-03T08:24:52.236Z" },
                        "profile": {
                            "profile_pic": null,
                            "user_name": "Bhakti_Daraniya",
                            "user_role": null
                        }
                    }
                }
            })));
            unlockMessageApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceErrorMessage), JSON.parse(JSON.stringify({ Error: "error message" })));
            instance.unlockMessageApiCallId = unlockMessageApiCallId.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", unlockMessageApiCallId);
            expect(pmChatViewWrapper).toBeTruthy();
        });
        then("Read Message API load with out errors", () => {
            const putReadMessageApiCallId = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            putReadMessageApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), putReadMessageApiCallId.messageId);
            putReadMessageApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), JSON.parse(JSON.stringify({ "message": "Message Readed" })));
            putReadMessageApiCallId.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceErrorMessage), JSON.parse(JSON.stringify({ Error: "error message" })));
            instance.putReadMessageApiCallId = putReadMessageApiCallId.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", putReadMessageApiCallId);
            expect(pmChatViewWrapper).toBeTruthy();
        });
        then('I can leave the screen with out errors', () => {
            instance.componentWillUnmount();
            expect(pmChatViewWrapper).toBeTruthy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,