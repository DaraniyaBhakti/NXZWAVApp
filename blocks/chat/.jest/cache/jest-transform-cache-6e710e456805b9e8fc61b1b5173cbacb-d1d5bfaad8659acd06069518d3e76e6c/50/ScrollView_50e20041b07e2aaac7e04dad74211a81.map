{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_assertThisInitialized2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_extends2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","AnimatedImplementation","Platform","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","View","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","requireNativeComponent","resolveAssetSource","splitLayoutProps","AndroidScrollView","AndroidHorizontalScrollContentView","AndroidHorizontalScrollView","RCTScrollView","RCTScrollContentView","OS","createScrollResponder","node","scrollResponder","Mixin","key","bind","Context","createContext","standardHorizontalContext","Object","freeze","horizontal","standardVerticalContext","ScrollView","_React$Component","_super","props","_this","_scrollResponder","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","state","layoutHeight","scrollResponderMixinGetInitialState","_handleScroll","__DEV__","onScroll","scrollEventThrottle","console","log","keyboardDismissMode","isTouching","scrollResponderHandleScroll","_handleLayout","invertStickyHeaders","setState","nativeEvent","layout","height","onLayout","_handleContentOnLayout","_e$nativeEvent$layout","width","onContentSizeChange","_scrollViewRef","_setScrollViewRef","ref","_innerViewRef","_setInnerViewRef","startsWith","keys","filter","forEach","value","UNSAFE_componentWillMount","contentOffset","y","setOffset","contentInset","top","UNSAFE_componentWillReceiveProps","nextProps","currentContentInsetTop","nextContentInsetTop","componentDidMount","_updateAnimatedNodeAttachment","componentDidUpdate","componentWillUnmount","detach","setNativeProps","getScrollResponder","getScrollableNode","findNodeHandle","getInnerViewNode","getNativeScrollRef","scrollTo","options","deprecatedX","deprecatedAnimated","x","animated","warn","scrollResponderScrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollWithoutAnimationTo","length","undefined","flashScrollIndicators","scrollResponderFlashScrollIndicators","_getKeyForIndex","index","childArray","child","stickyHeaderIndices","attachNativeEvent","_setStickyHeaderRef","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","render","_this2","ScrollViewClass","ScrollContentContainerViewClass","contentContainerStyle","styles","contentContainerHorizontal","style","childLayoutProps","prop","JSON","stringify","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","createElement","nextHeaderLayoutY","scrollAnimatedValue","inverted","scrollViewHeight","Provider","hasStickyHeaders","Array","isArray","contentContainer","removeClippedSubviews","collapsable","alwaysBounceHorizontal","alwaysBounceVertical","DEPRECATED_sendUpdatedChildFrames","baseStyle","baseHorizontal","baseVertical","onMomentumScrollBegin","scrollResponderHandleMomentumScrollBegin","onMomentumScrollEnd","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","onScrollBeginDrag","scrollResponderHandleScrollBeginDrag","onScrollEndDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","onTouchCancel","scrollResponderHandleTouchCancel","scrollBarThumbImage","sendMomentumEvents","snapToStart","snapToEnd","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","refreshControl","isTV","_splitLayoutProps","outer","inner","cloneElement","Component","create","flexGrow","flexShrink","flexDirection","overflow","module","exports"],"sources":["ScrollView.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst AnimatedImplementation = require('../../Animated/src/AnimatedImplementation');\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\nconst ScrollResponder = require('../ScrollResponder');\nconst ScrollViewStickyHeader = require('./ScrollViewStickyHeader');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst View = require('../View/View');\n\nconst dismissKeyboard = require('../../Utilities/dismissKeyboard');\nconst flattenStyle = require('../../StyleSheet/flattenStyle');\nconst invariant = require('invariant');\nconst processDecelerationRate = require('./processDecelerationRate');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\nconst resolveAssetSource = require('../../Image/resolveAssetSource');\nconst splitLayoutProps = require('../../StyleSheet/splitLayoutProps');\n\nimport type {NativeMethodsMixinType} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PointProp} from '../../StyleSheet/PointPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {\n  PressEvent,\n  ScrollEvent,\n  LayoutEvent,\n} from '../../Types/CoreEventTypes';\nimport type {State as ScrollResponderState} from '../ScrollResponder';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\n\nlet AndroidScrollView;\nlet AndroidHorizontalScrollContentView;\nlet AndroidHorizontalScrollView;\nlet RCTScrollView;\nlet RCTScrollContentView;\n\nif (Platform.OS === 'android') {\n  AndroidScrollView = requireNativeComponent('RCTScrollView');\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n  );\n  AndroidHorizontalScrollContentView = requireNativeComponent(\n    'AndroidHorizontalScrollContentView',\n  );\n} else if (Platform.OS === 'ios') {\n  RCTScrollView = requireNativeComponent('RCTScrollView');\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');\n} else {\n  RCTScrollView = requireNativeComponent('RCTScrollView');\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView');\n}\n\nexport type ScrollResponderType = {\n  ...ScrollView,\n  ...typeof ScrollResponder.Mixin,\n};\n\ntype TouchableProps = $ReadOnly<{|\n  onTouchStart?: (event: PressEvent) => void,\n  onTouchMove?: (event: PressEvent) => void,\n  onTouchEnd?: (event: PressEvent) => void,\n  onTouchCancel?: (event: PressEvent) => void,\n  onTouchEndCapture?: (event: PressEvent) => void,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   * @platform ios\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * By default, ScrollView has an active pan responder that hijacks panresponders\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\n   */\n  disableScrollViewPanResponder?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * currently visible and at or beyond `minIndexForVisible` will not change position. This is\n   * useful for lists that are loading content in both directions, e.g. a chat thread, where new\n   * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\n   * but other values such as 1 can be used to skip loading spinners or other content that should\n   * not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   * @platform ios\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * This controls how often the scroll event will be fired while scrolling\n   * (as a time interval in ms). A lower number yields better accuracy for code\n   * that is tracking the scroll position, but can lead to scroll performance\n   * problems due to the volume of information being send over the bridge.\n   *\n   * Values between 0 and 17ms indicate 60fps updates are needed and throttling\n   * will be disabled.\n   *\n   * If you do not need precise scroll position tracking, set this value higher\n   * to limit the information being sent across the bridge.\n   *\n   * The default value is zero, which results in the scroll event being sent only\n   * once each time the view is scrolled.\n   *\n   * @platform ios\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view can be programmatically scrolled beyond its\n   * content size. The default value is false.\n   * @platform ios\n   */\n  scrollToOverflowEnabled?: ?boolean,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\n   * @platform ios\n   */\n  onScrollToTop?: (event: ScrollEvent) => void,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   *\n   * @platform ios\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n  /**\n   * When true, ScrollView will emit updateChildFrames data in scroll events,\n   * otherwise will not compute or emit child frame data.  This only exists\n   * to support legacy issues, `onLayout` should be used instead to retrieve\n   * frame data.\n   * The default value is false.\n   * @platform ios\n   */\n  DEPRECATED_sendUpdatedChildFrames?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n  /**\n   * Causes the scrollbars not to turn transparent when they are not in use.\n   * The default value is false.\n   *\n   * @platform android\n   */\n  persistentScrollbar?: ?boolean,\n|}>;\n\ntype VRProps = $ReadOnly<{|\n  /**\n   * Optionally an image can be used for the scroll bar thumb. This will\n   * override the color. While the image is loading or the image fails to\n   * load the color will be used instead. Use an alpha of 0 in the color\n   * to avoid seeing it while the image is loading.\n   *\n   * - `uri` - a string representing the resource identifier for the image, which\n   * should be either a local file path or the name of a static image resource\n   * - `number` - Opaque type returned by something like\n   * `import IMAGE from './image.jpg'`.\n   * @platform vr\n   */\n  scrollBarThumbImage?: ?($ReadOnly<{||}> | number), // Opaque type returned by import IMAGE from './image.jpg'\n|}>;\n\ntype StickyHeaderComponentType = React.ComponentType<ScrollViewStickyHeaderProps> & {\n  setNextHeaderY: number => void,\n};\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...TouchableProps,\n  ...IOSProps,\n  ...AndroidProps,\n  ...VRProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * When true, the scroll view stops on the next index (in relation to scroll\n   * position at release) regardless of how fast the gesture is. This can be\n   * used for horizontal pagination when the page is less than the width of\n   * the ScrollView. The default value is false.\n   */\n  disableIntervalMomentum?: ?boolean,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?('fast' | 'normal' | number),\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?(\n    | 'none' // default\n    | 'on-drag' // cross-platform\n    | 'interactive'\n  ), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: (event: ScrollEvent) => void,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: (event: ScrollEvent) => void,\n\n  /**\n   * Fires at most once per frame during scrolling. The frequency of the\n   * events can be controlled using the `scrollEventThrottle` prop.\n   */\n  onScroll?: (event: ScrollEvent) => void,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: (event: ScrollEvent) => void,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: (event: ScrollEvent) => void,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\n  onKeyboardDidShow?: (event: PressEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   *\n   * Note: Vertical pagination is not supported on Android.\n   */\n  pagingEnabled?: ?boolean,\n\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * A React Component that will be used to render sticky headers.\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\n   * for example when you want your list to have an animated hidable header.\n   */\n  StickyHeaderComponent?: StickyHeaderComponentType,\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\n   * this behavior and allow the list to scroll freely between its start and\n   * the first `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToStart?: ?boolean,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the end\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\n   * this behavior and allow the list to scroll freely between its end and\n   * the last `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToEnd?: ?boolean,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  // $FlowFixMe - how to handle generic type without existential operator?\n  refreshControl?: ?React.Element<any>,\n  children?: React.Node,\n|}>;\n\ntype State = {|\n  layoutHeight: ?number,\n  ...ScrollResponderState,\n|};\n\nfunction createScrollResponder(\n  node: React.ElementRef<typeof ScrollView>,\n): typeof ScrollResponder.Mixin {\n  const scrollResponder = {...ScrollResponder.Mixin};\n\n  for (const key in scrollResponder) {\n    if (typeof scrollResponder[key] === 'function') {\n      scrollResponder[key] = scrollResponder[key].bind(node);\n    }\n  }\n\n  return scrollResponder;\n}\n\ntype ContextType = {|horizontal: boolean|} | null;\nconst Context = React.createContext<ContextType>(null);\nconst standardHorizontalContext: ContextType = Object.freeze({\n  horizontal: true,\n});\nconst standardVerticalContext: ContextType = Object.freeze({horizontal: false});\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nclass ScrollView extends React.Component<Props, State> {\n  static Context: React$Context<ContextType> = Context;\n  /**\n   * Part 1: Removing ScrollResponder.Mixin:\n   *\n   * 1. Mixin methods should be flow typed. That's why we create a\n   *    copy of ScrollResponder.Mixin and attach it to this._scrollResponder.\n   *    Otherwise, we'd have to manually declare each method on the component\n   *    class and assign it a flow type.\n   * 2. Mixin methods can call component methods, and access the component's\n   *    props and state. So, we need to bind all mixin methods to the\n   *    component instance.\n   * 3. Continued...\n   */\n  _scrollResponder: typeof ScrollResponder.Mixin = createScrollResponder(this);\n\n  constructor(props: Props) {\n    super(props);\n\n    /**\n     * Part 2: Removing ScrollResponder.Mixin\n     *\n     * 3. Mixin methods access other mixin methods via dynamic dispatch using\n     *    this. Since mixin methods are bound to the component instance, we need\n     *    to copy all mixin methods to the component instance. This is also\n     *    necessary because getScrollResponder() is a public method that returns\n     *    an object that can be used to execute all scrollResponder methods.\n     *    Since the object returned from that method is the ScrollView instance,\n     *    we need to bind all mixin methods to the ScrollView instance.\n     */\n    for (const key in ScrollResponder.Mixin) {\n      if (\n        typeof ScrollResponder.Mixin[key] === 'function' &&\n        key.startsWith('scrollResponder')\n      ) {\n        // $FlowFixMe - dynamically adding properties to a class\n        (this: any)[key] = ScrollResponder.Mixin[key].bind(this);\n      }\n    }\n\n    /**\n     * Part 3: Removing ScrollResponder.Mixin\n     *\n     * 4. Mixins can initialize properties and use properties on the component\n     *    instance.\n     */\n    Object.keys(ScrollResponder.Mixin)\n      .filter(key => typeof ScrollResponder.Mixin[key] !== 'function')\n      .forEach(key => {\n        // $FlowFixMe - dynamically adding properties to a class\n        (this: any)[key] = ScrollResponder.Mixin[key];\n      });\n  }\n\n  _scrollAnimatedValue: AnimatedImplementation.Value = new AnimatedImplementation.Value(\n    0,\n  );\n  _scrollAnimatedValueAttachment: ?{detach: () => void} = null;\n  _stickyHeaderRefs: Map<string, StickyHeaderComponentType> = new Map();\n  _headerLayoutYs: Map<string, number> = new Map();\n\n  state: State = {\n    layoutHeight: null,\n    ...ScrollResponder.Mixin.scrollResponderMixinGetInitialState(),\n  };\n\n  UNSAFE_componentWillMount() {\n    this._scrollResponder.UNSAFE_componentWillMount();\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset ? this.props.contentOffset.y : 0,\n    );\n    this._scrollAnimatedValue.setOffset(\n      this.props.contentInset ? this.props.contentInset.top || 0 : 0,\n    );\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const currentContentInsetTop = this.props.contentInset\n      ? this.props.contentInset.top\n      : 0;\n    const nextContentInsetTop = nextProps.contentInset\n      ? nextProps.contentInset.top\n      : 0;\n    if (currentContentInsetTop !== nextContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(nextContentInsetTop || 0);\n    }\n  }\n\n  componentDidMount() {\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentDidUpdate() {\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentWillUnmount() {\n    this._scrollResponder.componentWillUnmount();\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  }\n\n  setNativeProps(props: {[key: string]: mixed}) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  }\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder(): ScrollResponderType {\n    // $FlowFixMe - overriding type to include ScrollResponder.Mixin\n    return ((this: any): ScrollResponderType);\n  }\n\n  getScrollableNode(): ?number {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  }\n\n  getInnerViewNode(): ?number {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  }\n\n  getNativeScrollRef(): ?ScrollView {\n    return this._scrollViewRef;\n  }\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo(\n    options?: {x?: number, y?: number, animated?: boolean} | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) {\n    let x, y, animated;\n    if (typeof options === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n      y = options;\n      x = deprecatedX;\n      animated = deprecatedAnimated;\n    } else if (options) {\n      y = options.y;\n      x = options.x;\n      animated = options.animated;\n    }\n    this._scrollResponder.scrollResponderScrollTo({\n      x: x || 0,\n      y: y || 0,\n      animated: animated !== false,\n    });\n  }\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd(options?: ?{animated?: boolean}) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this._scrollResponder.scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  }\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo(y: number = 0, x: number = 0) {\n    console.warn(\n      '`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead',\n    );\n    this.scrollTo({x, y, animated: false});\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    this._scrollResponder.scrollResponderFlashScrollIndicators();\n  }\n\n  _getKeyForIndex(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  }\n\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(\n        this._scrollViewRef,\n        'onScroll',\n        [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n      );\n    }\n  }\n\n  _setStickyHeaderRef(key: string, ref: ?StickyHeaderComponentType) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n\n  _onStickyHeaderLayout(index, event, key) {\n    const {stickyHeaderIndices} = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader &&\n        previousHeader.setNextHeaderY &&\n        previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n\n  _handleScroll = (e: ScrollEvent) => {\n    if (__DEV__) {\n      if (\n        this.props.onScroll &&\n        this.props.scrollEventThrottle == null &&\n        Platform.OS === 'ios'\n      ) {\n        console.log(\n          'You specified `onScroll` on a <ScrollView> but not ' +\n            '`scrollEventThrottle`. You will only receive one event. ' +\n            'Using `16` you get all the events but be aware that it may ' +\n            \"cause frame drops, use a bigger number if you don't need as \" +\n            'much precision.',\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (\n        this.props.keyboardDismissMode === 'on-drag' &&\n        this.state.isTouching\n      ) {\n        dismissKeyboard();\n      }\n    }\n    this._scrollResponder.scrollResponderHandleScroll(e);\n  };\n\n  _handleLayout = (e: LayoutEvent) => {\n    if (this.props.invertStickyHeaders === true) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  };\n\n  _handleContentOnLayout = (e: LayoutEvent) => {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  };\n\n  _scrollViewRef: ?ScrollView = null;\n  _setScrollViewRef = (ref: ?ScrollView) => {\n    this._scrollViewRef = ref;\n  };\n\n  _innerViewRef: ?NativeMethodsMixinType = null;\n  _setInnerViewRef = (ref: ?NativeMethodsMixinType) => {\n    this._innerViewRef = ref;\n  };\n\n  render(): React.Node | React.Element<string> {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'android') {\n      if (this.props.horizontal === true) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n        ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n        ScrollContentContainerViewClass = View;\n      }\n    } else {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined',\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined',\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal === true && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style !== undefined) {\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    let children = this.props.children;\n\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      const childArray = React.Children.toArray(this.props.children);\n\n      children = childArray.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent =\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return (\n            <StickyHeaderComponent\n              key={key}\n              // $FlowFixMe - inexact mixed is incompatible with exact React.Element\n              ref={ref => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={this._headerLayoutYs.get(\n                this._getKeyForIndex(nextIndex, childArray),\n              )}\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </StickyHeaderComponent>\n          );\n        } else {\n          return child;\n        }\n      });\n    }\n    children = (\n      <Context.Provider\n        value={\n          this.props.horizontal === true\n            ? standardHorizontalContext\n            : standardVerticalContext\n        }>\n        {children}\n      </Context.Provider>\n    );\n\n    const hasStickyHeaders =\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n\n    const contentContainer = (\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        // $FlowFixMe Invalid prop usage\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const DEPRECATED_sendUpdatedChildFrames = !!this.props\n      .DEPRECATED_sendUpdatedChildFrames;\n\n    const baseStyle =\n      this.props.horizontal === true\n        ? styles.baseHorizontal\n        : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: [baseStyle, this.props.style],\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._scrollResponder\n        .scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this._scrollResponder\n        .scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this._scrollResponder\n        .scrollResponderHandleResponderGrant,\n      onResponderReject: this._scrollResponder\n        .scrollResponderHandleResponderReject,\n      onResponderRelease: this._scrollResponder\n        .scrollResponderHandleResponderRelease,\n      // $FlowFixMe\n      onResponderTerminate: this._scrollResponder\n        .scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this._scrollResponder\n        .scrollResponderHandleTerminationRequest,\n      onScrollBeginDrag: this._scrollResponder\n        .scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this._scrollResponder.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this._scrollResponder\n        .scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._scrollResponder\n        .scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this._scrollResponder\n        .scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this._scrollResponder.scrollResponderHandleTouchEnd,\n      onTouchMove: this._scrollResponder.scrollResponderHandleTouchMove,\n      onTouchStart: this._scrollResponder.scrollResponderHandleTouchStart,\n      onTouchCancel: this._scrollResponder.scrollResponderHandleTouchCancel,\n      onScroll: this._handleScroll,\n      scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      DEPRECATED_sendUpdatedChildFrames,\n      // default to true\n      snapToStart: this.props.snapToStart !== false,\n      // default to true\n      snapToEnd: this.props.snapToEnd !== false,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled === true &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled === true ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          // $FlowFixMe\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTV ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should split props.style on the inner and outer props\n        // however, the ScrollView still needs the baseStyle to be scrollable\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(\n          refreshControl,\n          {style: [baseStyle, outer]},\n          <ScrollViewClass\n            {...props}\n            style={[baseStyle, inner]}\n            // $FlowFixMe\n            ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>,\n        );\n      }\n    }\n    return (\n      // $FlowFixMe\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nmodule.exports = ScrollView;\n"],"mappings":"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"}