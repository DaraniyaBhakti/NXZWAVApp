963646b2a3b87db9ec7871d5ec1a623e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickDirectory = pickDirectory;
exports.pickMultiple = pickMultiple;
exports.pickSingle = pickSingle;
exports.pick = pick;
exports.releaseSecureAccess = releaseSecureAccess;
exports.isCancel = isCancel;
exports.isInProgress = isInProgress;
exports.default = exports.types = void 0;
var _reactNative = require("react-native");
var _invariant = _interopRequireDefault(require("invariant"));
var _fileTypes = require("./fileTypes");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var types = _fileTypes.perPlatformTypes[_reactNative.Platform.OS];
exports.types = types;
var RNDocumentPicker = _reactNative.NativeModules.RNDocumentPicker;
function pickDirectory(params) {
  var result;
  return _regenerator.default.async(function pickDirectory$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        if (!(_reactNative.Platform.OS === 'ios')) {
          _context.next = 7;
          break;
        }
        _context.next = 3;
        return _regenerator.default.awrap(pick((0, _extends2.default)({}, params, {
          mode: 'open',
          allowMultiSelection: false,
          type: ['public.folder']
        })));
      case 3:
        result = _context.sent;
        return _context.abrupt("return", {
          uri: result[0].uri
        });
      case 7:
        return _context.abrupt("return", RNDocumentPicker.pickDirectory());
      case 8:
      case "end":
        return _context.stop();
    }
  }, null, null, null, Promise);
}
function pickMultiple(opts) {
  var options = (0, _extends2.default)({}, opts, {
    allowMultiSelection: true
  });
  return pick(options);
}
function pickSingle(opts) {
  var options = (0, _extends2.default)({}, opts, {
    allowMultiSelection: false
  });
  return pick(options).then(function (results) {
    return results[0];
  });
}
function pick(opts) {
  var options = (0, _extends2.default)({
    allowMultiSelection: false,
    type: [types.allFiles]
  }, opts);
  var newOpts = (0, _extends2.default)({
    presentationStyle: 'formSheet'
  }, options, {
    type: Array.isArray(options.type) ? options.type : [options.type]
  });
  return doPick(newOpts);
}
function doPick(options) {
  var _options$mode, _options$copyTo;
  (0, _invariant.default)(!('filetype' in options), 'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');
  (0, _invariant.default)(!('types' in options), 'A `types` option was passed to DocumentPicker.pick, the correct option is `type`');
  (0, _invariant.default)(options.type.every(function (type) {
    return typeof type === 'string';
  }), "Unexpected type option in " + options.type + ", did you try using a DocumentPicker.types.* that does not exist?");
  (0, _invariant.default)(options.type.length > 0, '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');
  (0, _invariant.default)(!options.type.includes('folder'), 'RN document picker: "folder" option was removed, use "pickDirectory()"');
  if ('mode' in options && !['import', 'open'].includes((_options$mode = options.mode) !== null && _options$mode !== void 0 ? _options$mode : '')) {
    throw new TypeError('Invalid mode option: ' + options.mode);
  }
  if ('copyTo' in options && !['cachesDirectory', 'documentDirectory'].includes((_options$copyTo = options.copyTo) !== null && _options$copyTo !== void 0 ? _options$copyTo : '')) {
    throw new TypeError('Invalid copyTo option: ' + options.copyTo);
  }
  return RNDocumentPicker.pick(options);
}
function releaseSecureAccess(uris) {
  if (_reactNative.Platform.OS !== 'ios') {
    return Promise.resolve();
  }
  (0, _invariant.default)(Array.isArray(uris) && uris.every(function (uri) {
    return typeof uri === 'string';
  }), "\"uris\" should be an array of strings, was " + uris);
  return RNDocumentPicker.releaseSecureAccess(uris);
}
var E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';
var E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS';
function isCancel(err) {
  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED);
}
function isInProgress(err) {
  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS);
}
function isErrorWithCode(err, errorCode) {
  if (err instanceof Error && 'code' in err) {
    var nativeModuleErrorInstance = err;
    return (nativeModuleErrorInstance === null || nativeModuleErrorInstance === void 0 ? void 0 : nativeModuleErrorInstance.code) === errorCode;
  }
  return false;
}
var _default = {
  isCancel: isCancel,
  releaseSecureAccess: releaseSecureAccess,
  pickDirectory: pickDirectory,
  pick: pick,
  pickMultiple: pickMultiple,
  pickSingle: pickSingle,
  types: types,
  perPlatformTypes: _fileTypes.perPlatformTypes
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2ludmFyaWFudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZmlsZVR5cGVzIiwidHlwZXMiLCJwZXJQbGF0Zm9ybVR5cGVzIiwiUGxhdGZvcm0iLCJPUyIsIlJORG9jdW1lbnRQaWNrZXIiLCJOYXRpdmVNb2R1bGVzIiwicGlja0RpcmVjdG9yeSIsInBhcmFtcyIsInJlc3VsdCIsIl9yZWdlbmVyYXRvciIsImRlZmF1bHQiLCJhc3luYyIsInBpY2tEaXJlY3RvcnkkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImF3cmFwIiwicGljayIsIl9leHRlbmRzMiIsIm1vZGUiLCJhbGxvd011bHRpU2VsZWN0aW9uIiwidHlwZSIsInNlbnQiLCJhYnJ1cHQiLCJ1cmkiLCJzdG9wIiwiUHJvbWlzZSIsInBpY2tNdWx0aXBsZSIsIm9wdHMiLCJvcHRpb25zIiwicGlja1NpbmdsZSIsInRoZW4iLCJyZXN1bHRzIiwiYWxsRmlsZXMiLCJuZXdPcHRzIiwicHJlc2VudGF0aW9uU3R5bGUiLCJBcnJheSIsImlzQXJyYXkiLCJkb1BpY2siLCJfb3B0aW9ucyRtb2RlIiwiX29wdGlvbnMkY29weVRvIiwiZXZlcnkiLCJsZW5ndGgiLCJpbmNsdWRlcyIsIlR5cGVFcnJvciIsImNvcHlUbyIsInJlbGVhc2VTZWN1cmVBY2Nlc3MiLCJ1cmlzIiwicmVzb2x2ZSIsIkVfRE9DVU1FTlRfUElDS0VSX0NBTkNFTEVEIiwiRV9ET0NVTUVOVF9QSUNLRVJfSU5fUFJPR1JFU1MiLCJpc0NhbmNlbCIsImVyciIsImlzRXJyb3JXaXRoQ29kZSIsImlzSW5Qcm9ncmVzcyIsImVycm9yQ29kZSIsIkVycm9yIiwibmF0aXZlTW9kdWxlRXJyb3JJbnN0YW5jZSIsImNvZGUiXSwic291cmNlcyI6WyJpbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGxhdGZvcm0sIE5hdGl2ZU1vZHVsZXMsIE1vZGFsUHJvcHNJT1MgfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCdcbmltcG9ydCB0eXBlIHsgUGxhdGZvcm1UeXBlcywgU3VwcG9ydGVkUGxhdGZvcm1zIH0gZnJvbSAnLi9maWxlVHlwZXMnXG5pbXBvcnQgeyBwZXJQbGF0Zm9ybVR5cGVzIH0gZnJvbSAnLi9maWxlVHlwZXMnXG5cbmV4cG9ydCB0eXBlIERvY3VtZW50UGlja2VyUmVzcG9uc2UgPSB7XG4gIHVyaTogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBjb3B5RXJyb3I/OiBzdHJpbmdcbiAgZmlsZUNvcHlVcmk6IHN0cmluZyB8IG51bGxcbiAgdHlwZTogc3RyaW5nIHwgbnVsbFxuICBzaXplOiBudW1iZXIgfCBudWxsXG59XG5cbmV4cG9ydCBjb25zdCB0eXBlcyA9IHBlclBsYXRmb3JtVHlwZXNbUGxhdGZvcm0uT1NdXG5cbmV4cG9ydCB0eXBlIERpcmVjdG9yeVBpY2tlclJlc3BvbnNlID0ge1xuICB1cmk6IHN0cmluZ1xufVxuXG50eXBlIERvY3VtZW50UGlja2VyVHlwZSA9IHtcbiAgcGljayhvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogUHJvbWlzZTxEb2N1bWVudFBpY2tlclJlc3BvbnNlW10+XG4gIHJlbGVhc2VTZWN1cmVBY2Nlc3ModXJpczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+XG4gIHBpY2tEaXJlY3RvcnkoKTogUHJvbWlzZTxEaXJlY3RvcnlQaWNrZXJSZXNwb25zZT5cbn1cblxuY29uc3QgUk5Eb2N1bWVudFBpY2tlcjogRG9jdW1lbnRQaWNrZXJUeXBlID0gTmF0aXZlTW9kdWxlcy5STkRvY3VtZW50UGlja2VyXG5cbmV4cG9ydCB0eXBlIERvY3VtZW50UGlja2VyT3B0aW9uczxPUyBleHRlbmRzIFN1cHBvcnRlZFBsYXRmb3Jtcz4gPSB7XG4gIHR5cGU/OlxuICAgIHwgc3RyaW5nXG4gICAgfCBQbGF0Zm9ybVR5cGVzW09TXVtrZXlvZiBQbGF0Zm9ybVR5cGVzW09TXV1cbiAgICB8IEFycmF5PFBsYXRmb3JtVHlwZXNbT1NdW2tleW9mIFBsYXRmb3JtVHlwZXNbT1NdXSB8IHN0cmluZz5cbiAgbW9kZT86ICdpbXBvcnQnIHwgJ29wZW4nXG4gIGNvcHlUbz86ICdjYWNoZXNEaXJlY3RvcnknIHwgJ2RvY3VtZW50RGlyZWN0b3J5J1xuICBhbGxvd011bHRpU2VsZWN0aW9uPzogYm9vbGVhblxufSAmIFBpY2s8TW9kYWxQcm9wc0lPUywgJ3ByZXNlbnRhdGlvblN0eWxlJz5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBpY2tEaXJlY3Rvcnk8T1MgZXh0ZW5kcyBTdXBwb3J0ZWRQbGF0Zm9ybXM+KFxuICBwYXJhbXM/OiBQaWNrPERvY3VtZW50UGlja2VyT3B0aW9uczxPUz4sICdwcmVzZW50YXRpb25TdHlsZSc+LFxuKTogUHJvbWlzZTxEaXJlY3RvcnlQaWNrZXJSZXNwb25zZSB8IG51bGw+IHtcbiAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBpY2soe1xuICAgICAgLi4ucGFyYW1zLFxuICAgICAgbW9kZTogJ29wZW4nLFxuICAgICAgYWxsb3dNdWx0aVNlbGVjdGlvbjogZmFsc2UsXG4gICAgICB0eXBlOiBbJ3B1YmxpYy5mb2xkZXInXSxcbiAgICB9KVxuICAgIHJldHVybiB7IHVyaTogcmVzdWx0WzBdLnVyaSB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFJORG9jdW1lbnRQaWNrZXIucGlja0RpcmVjdG9yeSgpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBpY2tNdWx0aXBsZTxPUyBleHRlbmRzIFN1cHBvcnRlZFBsYXRmb3Jtcz4oXG4gIG9wdHM/OiBEb2N1bWVudFBpY2tlck9wdGlvbnM8T1M+LFxuKTogUHJvbWlzZTxEb2N1bWVudFBpY2tlclJlc3BvbnNlW10+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5vcHRzLFxuICAgIGFsbG93TXVsdGlTZWxlY3Rpb246IHRydWUsXG4gIH1cbiAgcmV0dXJuIHBpY2sob3B0aW9ucylcbn1cbmV4cG9ydCBmdW5jdGlvbiBwaWNrU2luZ2xlPE9TIGV4dGVuZHMgU3VwcG9ydGVkUGxhdGZvcm1zPihcbiAgb3B0cz86IERvY3VtZW50UGlja2VyT3B0aW9uczxPUz4sXG4pOiBQcm9taXNlPERvY3VtZW50UGlja2VyUmVzcG9uc2U+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5vcHRzLFxuICAgIGFsbG93TXVsdGlTZWxlY3Rpb246IGZhbHNlLFxuICB9XG4gIHJldHVybiBwaWNrKG9wdGlvbnMpLnRoZW4oKHJlc3VsdHMpID0+IHJlc3VsdHNbMF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwaWNrPE9TIGV4dGVuZHMgU3VwcG9ydGVkUGxhdGZvcm1zPihcbiAgb3B0cz86IERvY3VtZW50UGlja2VyT3B0aW9uczxPUz4sXG4pOiBQcm9taXNlPERvY3VtZW50UGlja2VyUmVzcG9uc2VbXT4ge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIC8vIG11c3QgYmUgZmFsc2UgdG8gbWFpbnRhaW4gb2xkICh2NSkgYmVoYXZpb3JcbiAgICBhbGxvd011bHRpU2VsZWN0aW9uOiBmYWxzZSxcbiAgICB0eXBlOiBbdHlwZXMuYWxsRmlsZXNdLFxuICAgIC4uLm9wdHMsXG4gIH1cblxuICBjb25zdCBuZXdPcHRzOiBEb1BpY2tQYXJhbXM8T1M+ID0ge1xuICAgIHByZXNlbnRhdGlvblN0eWxlOiAnZm9ybVNoZWV0JyxcbiAgICAuLi5vcHRpb25zLFxuICAgIHR5cGU6IEFycmF5LmlzQXJyYXkob3B0aW9ucy50eXBlKSA/IG9wdGlvbnMudHlwZSA6IFtvcHRpb25zLnR5cGVdLFxuICB9XG5cbiAgcmV0dXJuIGRvUGljayhuZXdPcHRzKVxufVxuXG50eXBlIERvUGlja1BhcmFtczxPUyBleHRlbmRzIFN1cHBvcnRlZFBsYXRmb3Jtcz4gPSBEb2N1bWVudFBpY2tlck9wdGlvbnM8T1M+ICYge1xuICB0eXBlOiBBcnJheTxQbGF0Zm9ybVR5cGVzW09TXVtrZXlvZiBQbGF0Zm9ybVR5cGVzW09TXV0gfCBzdHJpbmc+XG4gIGFsbG93TXVsdGlTZWxlY3Rpb246IGJvb2xlYW5cbiAgcHJlc2VudGF0aW9uU3R5bGU6IE5vbk51bGxhYmxlPE1vZGFsUHJvcHNJT1NbJ3ByZXNlbnRhdGlvblN0eWxlJ10+XG59XG5cbmZ1bmN0aW9uIGRvUGljazxPUyBleHRlbmRzIFN1cHBvcnRlZFBsYXRmb3Jtcz4oXG4gIG9wdGlvbnM6IERvUGlja1BhcmFtczxPUz4sXG4pOiBQcm9taXNlPERvY3VtZW50UGlja2VyUmVzcG9uc2VbXT4ge1xuICBpbnZhcmlhbnQoXG4gICAgISgnZmlsZXR5cGUnIGluIG9wdGlvbnMpLFxuICAgICdBIGBmaWxldHlwZWAgb3B0aW9uIHdhcyBwYXNzZWQgdG8gRG9jdW1lbnRQaWNrZXIucGljaywgdGhlIGNvcnJlY3Qgb3B0aW9uIGlzIGB0eXBlYCcsXG4gIClcbiAgaW52YXJpYW50KFxuICAgICEoJ3R5cGVzJyBpbiBvcHRpb25zKSxcbiAgICAnQSBgdHlwZXNgIG9wdGlvbiB3YXMgcGFzc2VkIHRvIERvY3VtZW50UGlja2VyLnBpY2ssIHRoZSBjb3JyZWN0IG9wdGlvbiBpcyBgdHlwZWAnLFxuICApXG5cbiAgaW52YXJpYW50KFxuICAgIG9wdGlvbnMudHlwZS5ldmVyeSgodHlwZTogdW5rbm93bikgPT4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSxcbiAgICBgVW5leHBlY3RlZCB0eXBlIG9wdGlvbiBpbiAke29wdGlvbnMudHlwZX0sIGRpZCB5b3UgdHJ5IHVzaW5nIGEgRG9jdW1lbnRQaWNrZXIudHlwZXMuKiB0aGF0IGRvZXMgbm90IGV4aXN0P2AsXG4gIClcbiAgaW52YXJpYW50KFxuICAgIG9wdGlvbnMudHlwZS5sZW5ndGggPiAwLFxuICAgICdgdHlwZWAgb3B0aW9uIHNob3VsZCBub3QgYmUgYW4gZW1wdHkgYXJyYXksIGF0IGxlYXN0IG9uZSB0eXBlIG11c3QgYmUgcGFzc2VkIGlmIHRoZSBgdHlwZWAgb3B0aW9uIGlzIG5vdCBvbWl0dGVkJyxcbiAgKVxuXG4gIGludmFyaWFudChcbiAgICAvLyBAdHMtaWdub3JlIFRTMjM0NTogQXJndW1lbnQgb2YgdHlwZSAnc3RyaW5nJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnUGxhdGZvcm1UeXBlc1tPU11ba2V5b2YgUGxhdGZvcm1UeXBlc1tPU11dJy5cbiAgICAhb3B0aW9ucy50eXBlLmluY2x1ZGVzKCdmb2xkZXInKSxcbiAgICAnUk4gZG9jdW1lbnQgcGlja2VyOiBcImZvbGRlclwiIG9wdGlvbiB3YXMgcmVtb3ZlZCwgdXNlIFwicGlja0RpcmVjdG9yeSgpXCInLFxuICApXG5cbiAgaWYgKCdtb2RlJyBpbiBvcHRpb25zICYmICFbJ2ltcG9ydCcsICdvcGVuJ10uaW5jbHVkZXMob3B0aW9ucy5tb2RlID8/ICcnKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbW9kZSBvcHRpb246ICcgKyBvcHRpb25zLm1vZGUpXG4gIH1cblxuICBpZiAoXG4gICAgJ2NvcHlUbycgaW4gb3B0aW9ucyAmJlxuICAgICFbJ2NhY2hlc0RpcmVjdG9yeScsICdkb2N1bWVudERpcmVjdG9yeSddLmluY2x1ZGVzKG9wdGlvbnMuY29weVRvID8/ICcnKVxuICApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNvcHlUbyBvcHRpb246ICcgKyBvcHRpb25zLmNvcHlUbylcbiAgfVxuXG4gIHJldHVybiBSTkRvY3VtZW50UGlja2VyLnBpY2sob3B0aW9ucylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbGVhc2VTZWN1cmVBY2Nlc3ModXJpczogQXJyYXk8c3RyaW5nPik6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoUGxhdGZvcm0uT1MgIT09ICdpb3MnKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gIH1cblxuICBpbnZhcmlhbnQoXG4gICAgQXJyYXkuaXNBcnJheSh1cmlzKSAmJiB1cmlzLmV2ZXJ5KCh1cmkpID0+IHR5cGVvZiB1cmkgPT09ICdzdHJpbmcnKSxcbiAgICBgXCJ1cmlzXCIgc2hvdWxkIGJlIGFuIGFycmF5IG9mIHN0cmluZ3MsIHdhcyAke3VyaXN9YCxcbiAgKVxuXG4gIHJldHVybiBSTkRvY3VtZW50UGlja2VyLnJlbGVhc2VTZWN1cmVBY2Nlc3ModXJpcylcbn1cblxuY29uc3QgRV9ET0NVTUVOVF9QSUNLRVJfQ0FOQ0VMRUQgPSAnRE9DVU1FTlRfUElDS0VSX0NBTkNFTEVEJ1xuY29uc3QgRV9ET0NVTUVOVF9QSUNLRVJfSU5fUFJPR1JFU1MgPSAnQVNZTkNfT1BfSU5fUFJPR1JFU1MnXG5cbmV4cG9ydCB0eXBlIE5hdGl2ZU1vZHVsZUVycm9yU2hhcGUgPSBFcnJvciAmIHsgY29kZT86IHN0cmluZyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbChlcnI6IHVua25vd24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzRXJyb3JXaXRoQ29kZShlcnIsIEVfRE9DVU1FTlRfUElDS0VSX0NBTkNFTEVEKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJblByb2dyZXNzKGVycjogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNFcnJvcldpdGhDb2RlKGVyciwgRV9ET0NVTUVOVF9QSUNLRVJfSU5fUFJPR1JFU1MpXG59XG5cbmZ1bmN0aW9uIGlzRXJyb3JXaXRoQ29kZShlcnI6IHVua25vd24sIGVycm9yQ29kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gZXJyKSB7XG4gICAgY29uc3QgbmF0aXZlTW9kdWxlRXJyb3JJbnN0YW5jZSA9IGVyciBhcyBOYXRpdmVNb2R1bGVFcnJvclNoYXBlXG4gICAgcmV0dXJuIG5hdGl2ZU1vZHVsZUVycm9ySW5zdGFuY2U/LmNvZGUgPT09IGVycm9yQ29kZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQ2FuY2VsLFxuICByZWxlYXNlU2VjdXJlQWNjZXNzLFxuICBwaWNrRGlyZWN0b3J5LFxuICBwaWNrLFxuICBwaWNrTXVsdGlwbGUsXG4gIHBpY2tTaW5nbGUsXG4gIHR5cGVzLFxuICBwZXJQbGF0Zm9ybVR5cGVzLFxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsVUFBQSxHQUFBSCxPQUFBOzs7Ozs7QUFXTyxJQUFNSSxLQUFLLEdBQUdELFVBQUEsQ0FBQUUsZ0JBQUEsQ0FBaUJOLFlBQUEsQ0FBQU8sUUFBQSxDQUFTQyxFQUExQixDQUFkOztBQVlQLElBQU1DLGdCQUFvQyxHQUFHVCxZQUFBLENBQUFVLGFBQUEsQ0FBY0QsZ0JBQTNEO0FBWU8sU0FBZUUsYUFBZkEsQ0FDTEMsTUFESztFQUFBLElBQUFDLE1BQUE7RUFBQSxPQUFBQyxZQUFBLENBQUFDLE9BQUEsQ0FBQUMsS0FBQSxVQUFBQyxlQUFBQyxRQUFBO0lBQUEsa0JBQUFBLFFBQUEsQ0FBQUMsSUFBQSxHQUFBRCxRQUFBLENBQUFFLElBQUE7TUFBQTtRQUFBLE1BR0RwQixZQUFBLENBQUFPLFFBQUEsQ0FBU0MsRUFBVCxLQUFnQixLQUFwQjtVQUFBVSxRQUFBLENBQUFFLElBQUE7VUFBQTtRQUFBO1FBQUFGLFFBQUEsQ0FBQUUsSUFBQTtRQUFBLE9BQUFOLFlBQUEsQ0FBQUMsT0FBQSxDQUFBTSxLQUFBLENBQ3VCQyxJQUFJLEtBQUFDLFNBQUEsQ0FBQVIsT0FBQSxNQUNwQkgsTUFEcUI7VUFFeEJZLElBQUksRUFBRSxNQUZrQjtVQUd4QkMsbUJBQW1CLEVBQUUsS0FIRztVQUl4QkMsSUFBSSxFQUFFLENBQUMsZUFBRDtRQUFBLEVBSmlCLENBQXpCO01BQUE7UUFBTWIsTUFBTSxHQUFBSyxRQUFBLENBQUFTLElBQUE7UUFBQSxPQUFBVCxRQUFBLENBQUFVLE1BQUEsV0FNTDtVQUFFQyxHQUFHLEVBQUVoQixNQUFNLENBQUMsQ0FBRCxD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