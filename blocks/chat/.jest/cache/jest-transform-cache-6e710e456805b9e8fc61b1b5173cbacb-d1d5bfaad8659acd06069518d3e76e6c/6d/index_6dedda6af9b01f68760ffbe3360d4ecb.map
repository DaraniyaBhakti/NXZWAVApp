{"version":3,"names":["_reactNative","require","_invariant","_interopRequireDefault","_fileTypes","types","perPlatformTypes","Platform","OS","RNDocumentPicker","NativeModules","pickDirectory","params","result","_regenerator","default","async","pickDirectory$","_context","prev","next","awrap","pick","_extends2","mode","allowMultiSelection","type","sent","abrupt","uri","stop","Promise","pickMultiple","opts","options","pickSingle","then","results","allFiles","newOpts","presentationStyle","Array","isArray","doPick","_options$mode","_options$copyTo","every","length","includes","TypeError","copyTo","releaseSecureAccess","uris","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","Error","nativeModuleErrorInstance","code"],"sources":["index.tsx"],"sourcesContent":["import { Platform, NativeModules, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return RNDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err instanceof Error && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"],"mappings":"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"}