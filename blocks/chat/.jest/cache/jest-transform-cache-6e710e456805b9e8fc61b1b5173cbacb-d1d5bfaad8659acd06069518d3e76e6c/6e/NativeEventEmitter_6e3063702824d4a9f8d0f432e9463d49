acc752accb3b0942064137ffd905cdae
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EventEmitter = require('../vendor/emitter/EventEmitter');
var Platform = require('../Utilities/Platform');
var RCTDeviceEventEmitter = require('./RCTDeviceEventEmitter');
var invariant = require('invariant');
var NativeEventEmitter = function (_EventEmitter) {
  (0, _inherits2.default)(NativeEventEmitter, _EventEmitter);
  var _super = _createSuper(NativeEventEmitter);
  function NativeEventEmitter(nativeModule) {
    var _this;
    (0, _classCallCheck2.default)(this, NativeEventEmitter);
    _this = _super.call(this, RCTDeviceEventEmitter.sharedSubscriber);
    if (Platform.OS === 'ios') {
      invariant(nativeModule, 'Native module cannot be null.');
      _this._nativeModule = nativeModule;
    }
    return _this;
  }
  (0, _createClass2.default)(NativeEventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      if (this._nativeModule != null) {
        this._nativeModule.addListener(eventType);
      }
      return (0, _get2.default)((0, _getPrototypeOf2.default)(NativeEventEmitter.prototype), "addListener", this).call(this, eventType, listener, context);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      invariant(eventType, 'eventType argument is required.');
      var count = this.listeners(eventType).length;
      if (this._nativeModule != null) {
        this._nativeModule.removeListeners(count);
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeEventEmitter.prototype), "removeAllListeners", this).call(this, eventType);
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      if (this._nativeModule != null) {
        this._nativeModule.removeListeners(1);
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(NativeEventEmitter.prototype), "removeSubscription", this).call(this, subscription);
    }
  }]);
  return NativeEventEmitter;
}(EventEmitter);
module.exports = NativeEventEmitter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiRXZlbnRFbWl0dGVyIiwiUGxhdGZvcm0iLCJSQ1REZXZpY2VFdmVudEVtaXR0ZXIiLCJpbnZhcmlhbnQiLCJOYXRpdmVFdmVudEVtaXR0ZXIiLCJfRXZlbnRFbWl0dGVyIiwiX3N1cGVyIiwibmF0aXZlTW9kdWxlIiwiX3RoaXMiLCJzaGFyZWRTdWJzY3JpYmVyIiwiT1MiLCJfbmF0aXZlTW9kdWxlIiwia2V5IiwidmFsdWUiLCJhZGRMaXN0ZW5lciIsImV2ZW50VHlwZSIsImxpc3RlbmVyIiwiY29udGV4dCIsInJlbW92ZUFsbExpc3RlbmVycyIsImNvdW50IiwibGlzdGVuZXJzIiwibGVuZ3RoIiwicmVtb3ZlTGlzdGVuZXJzIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIk5hdGl2ZUV2ZW50RW1pdHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JDVERldmljZUV2ZW50RW1pdHRlcicpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuaW1wb3J0IHR5cGUgRW1pdHRlclN1YnNjcmlwdGlvbiBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FbWl0dGVyU3Vic2NyaXB0aW9uJztcblxudHlwZSBOYXRpdmVNb2R1bGUgPSB7XG4gICthZGRMaXN0ZW5lcjogKGV2ZW50VHlwZTogc3RyaW5nKSA9PiB2b2lkLFxuICArcmVtb3ZlTGlzdGVuZXJzOiAoY291bnQ6IG51bWJlcikgPT4gdm9pZCxcbn07XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgaW1wbGVtZW50aW5nIGV2ZW50LWVtaXR0aW5nIG1vZHVsZXMuIFRoaXMgaW1wbGVtZW50c1xuICogYSBzdWJzZXQgb2YgdGhlIHN0YW5kYXJkIEV2ZW50RW1pdHRlciBub2RlIG1vZHVsZSBBUEkuXG4gKi9cbmNsYXNzIE5hdGl2ZUV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIF9uYXRpdmVNb2R1bGU6ID9OYXRpdmVNb2R1bGU7XG5cbiAgY29uc3RydWN0b3IobmF0aXZlTW9kdWxlOiA/TmF0aXZlTW9kdWxlKSB7XG4gICAgc3VwZXIoUkNURGV2aWNlRXZlbnRFbWl0dGVyLnNoYXJlZFN1YnNjcmliZXIpO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIGludmFyaWFudChuYXRpdmVNb2R1bGUsICdOYXRpdmUgbW9kdWxlIGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgdGhpcy5fbmF0aXZlTW9kdWxlID0gbmF0aXZlTW9kdWxlO1xuICAgIH1cbiAgfVxuXG4gIGFkZExpc3RlbmVyKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyOiBGdW5jdGlvbixcbiAgICBjb250ZXh0OiA/T2JqZWN0LFxuICApOiBFbWl0dGVyU3Vic2NyaXB0aW9uIHtcbiAgICBpZiAodGhpcy5fbmF0aXZlTW9kdWxlICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX25hdGl2ZU1vZHVsZS5hZGRMaXN0ZW5lcihldmVudFR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkTGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgY29udGV4dCk7XG4gIH1cblxuICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlOiBzdHJpbmcpIHtcbiAgICBpbnZhcmlhbnQoZXZlbnRUeXBlLCAnZXZlbnRUeXBlIGFyZ3VtZW50IGlzIHJlcXVpcmVkLicpO1xuICAgIGNvbnN0IGNvdW50ID0gdGhpcy5saXN0ZW5lcnMoZXZlbnRUeXBlKS5sZW5ndGg7XG4gICAgaWYgKHRoaXMuX25hdGl2ZU1vZHVsZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUucmVtb3ZlTGlzdGVuZXJzKGNvdW50KTtcbiAgICB9XG4gICAgc3VwZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50VHlwZSk7XG4gIH1cblxuICByZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uOiBFbWl0dGVyU3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHRoaXMuX25hdGl2ZU1vZHVsZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUucmVtb3ZlTGlzdGVuZXJzKDEpO1xuICAgIH1cbiAgICBzdXBlci5yZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdGl2ZUV2ZW50RW1pdHRlcjtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLFVBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLDJCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQU8sYUFBQUMsT0FBQSxRQUFBQyx5QkFBQSxHQUFBQyx5QkFBQSxvQkFBQUMscUJBQUEsUUFBQUMsS0FBQSxPQUFBTixnQkFBQSxDQUFBTyxPQUFBLEVBQUFMLE9BQUEsR0FBQU0sTUFBQSxNQUFBTCx5QkFBQSxRQUFBTSxTQUFBLE9BQUFULGdCQUFBLENBQUFPLE9BQUEsUUFBQUcsV0FBQSxFQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTixLQUFBLEVBQUFPLFNBQUEsRUFBQUosU0FBQSxZQUFBRCxNQUFBLEdBQUFGLEtBQUEsQ0FBQVEsS0FBQSxPQUFBRCxTQUFBLGdCQUFBZCwyQkFBQSxDQUFBUSxPQUFBLFFBQUFDLE1BQUE7QUFBQSxTQUFBSiwwQkFBQSxlQUFBTyxPQUFBLHFCQUFBQSxPQUFBLENBQUFDLFNBQUEsb0JBQUFELE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxJQUFBLDJCQUFBQyxLQUFBLG9DQUFBQyxPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBQyxJQUFBLENBQUFULE9BQUEsQ0FBQUMsU0FBQSxDQUFBSyxPQUFBLDhDQUFBSSxDQUFBO0FBRWIsSUFBTUMsWUFBWSxHQUFHNUIsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0FBQzlELElBQU02QixRQUFRLEdBQUc3QixPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFDakQsSUFBTThCLHFCQUFxQixHQUFHOUIsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0FBRWhFLElBQU0rQixTQUFTLEdBQUcvQixPQUFPLENBQUMsV0FBVyxDQUFDO0FBQUMsSUFhakNnQyxrQkFBa0IsYUFBQUMsYUFBQTtFQUFBLElBQUE3QixVQUFBLENBQUFTLE9BQUEsRUFBQW1CLGtCQUFBLEVBQUFDLGFBQUE7RUFBQSxJQUFBQyxNQUFBLEdBQUEzQixZQUFBLENBQUF5QixrQkFBQTtFQUd0QixTQUFBQSxtQkFBWUcsWUFBMkIsRUFBRTtJQUFBLElBQUFDLEtBQUE7SUFBQSxJQUFBbkMsZ0JBQUEsQ0FBQVksT0FBQSxRQUFBbUIsa0JBQUE7SUFDdkNJLEtBQUEsR0FBQUYsTUFBQSxDQUFBUixJQUFBLE9BQU1JLHFCQUFxQixDQUFDTyxnQkFBZ0I7SUFDNUMsSUFBSVIsUUFBUSxDQUFDUyxFQUFFLEtBQUssS0FBSyxFQUFFO01BQ3pCUCxTQUFTLENBQUNJLFlBQVksRUFBRSwrQkFBK0IsQ0FBQztNQUN4REMsS0FBQSxDQUFLRyxhQUFhLEdBQUdKLFlBQVk7SUFDbkM7SUFBQyxPQUFBQyxLQUFBO0VBQ0g7RUFBQyxJQUFBbEMsYUFBQSxDQUFBVyxPQUFBLEVBQUFtQixrQkFBQTtJQUFBUSxHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBQyxZQUNFQyxTQUFpQixFQUNqQkMsUUFBa0IsRUFDbEJDLE9BQWdCLEVBQ0s7TUFDckIsSUFBSSxJQUFJLENBQUNOLGFBQWEsSUFBSSxJQUFJLEVBQUU7UUFDOUIsSUFBSSxDQUFDQSxhQUFhLENBQUNHLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDO01BQzNDO01BQ0EsV0FBQXhDLEtBQUEsQ0FBQVUsT0FBQSxNQUFBUCxnQkFBQSxDQUFBTyxPQUFBLEVBQUFtQixrQkFBQSxDQUFBUixTQUFBLHdCQUFBRSxJQUFBLE9BQXlCaUIsU0FBUyxFQUFFQyxRQUFRLEVBQUVDLE9BQU87SUFDdkQ7RUFBQztJQUFBTCxHQUFBO0lBQUFDLEtBQUEsRUFFRCxTQUFBSyxtQkFBbUJILFNBQWlCLEVBQUU7TUFDcENaLFNBQVMsQ0FBQ1ksU0FBUyxFQUFFLGlDQUFpQyxDQUFDO01BQ3ZELElBQU1JLEtBQUssR0FBRyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0wsU0FBUyxDQUFDLENBQUNNLE1BQU07TUFDOUMsSUFBSSxJQUFJLENBQUNWLGFBQWEsSUFBSSxJQUFJLEVBQUU7UUFDOUIsSUFBSSxDQUFDQSxhQUFhLENBQUNXLGVBQWUsQ0FBQ0gsS0FBSyxDQUFDO01BQzNDO01BQ0EsSUFBQTVDLEtBQUEsQ0FBQVUsT0FBQSxNQUFBUCxnQkFBQSxDQUFBTyxPQUFBLEVBQUFtQixrQkFBQSxDQUFBUixTQUFBLCtCQUFBRSxJQUFBLE9BQXlCaUIsU0FBUztJQUNwQztFQUFDO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQUVELFNBQUFVLG1CQUFtQkMsWUFBaUMsRUFBRTtNQUNwRCxJQUFJLElBQUksQ0FBQ2IsYUFBYSxJQUFJLElBQUksRUFBRTtRQUM5QixJQUFJLENBQUNBLGFBQWEsQ0FBQ1csZUFBZSxDQUFDLENBQUMsQ0FBQztNQUN2QztNQUNBLElBQUEvQyxLQUFBLENBQUFVLE9BQUEsTUFBQVAsZ0JBQUEsQ0FBQU8sT0FBQSxFQUFBbUIsa0JBQUEsQ0FBQVIsU0FBQSwrQkFBQUUsSUFBQSxPQUF5QjBCLFlBQVk7SUFDdkM7RUFBQztFQUFBLE9BQUFwQixrQkFBQTtBQUFBLEVBcEM4QkosWUFBWTtBQXVDN0N5QixNQUFNLENBQUNDLE9BQU8sR0FBR3RCLGtCQUFrQiJ9