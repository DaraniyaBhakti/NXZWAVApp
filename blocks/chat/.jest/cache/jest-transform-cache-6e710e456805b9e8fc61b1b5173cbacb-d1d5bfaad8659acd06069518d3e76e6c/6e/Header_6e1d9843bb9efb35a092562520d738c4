9cda047c5b4a2f17baa39c29ce825b75
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Header = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _excluded = ["statusBarProps", "leftComponent", "centerComponent", "rightComponent", "leftContainerStyle", "centerContainerStyle", "rightContainerStyle", "backgroundColor", "backgroundImage", "backgroundImageStyle", "containerStyle", "placement", "barStyle", "children", "linearGradientProps", "ViewComponent", "theme"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ALIGN_STYLE = {
  left: 'flex-start',
  right: 'flex-end',
  center: 'center'
};
var Children = function Children(_ref) {
  var style = _ref.style,
    placement = _ref.placement,
    children = _ref.children;
  return _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([{
      alignItems: ALIGN_STYLE[placement]
    }, style])
  }, children == null || children === false ? null : children.text ? (0, _helpers.renderNode)(_Text.default, children.text, (0, _extends2.default)({
    numberOfLines: 1
  }, children)) : children.icon ? (0, _helpers.renderNode)(_Icon.default, (0, _extends2.default)({}, children, {
    name: children.icon,
    containerStyle: _reactNative.StyleSheet.flatten([{
      alignItems: ALIGN_STYLE[placement]
    }, children.containerStyle])
  })) : (0, _helpers.renderNode)(_Text.default, children));
};
Children.propTypes = {
  placement: _propTypes.default.oneOf(['left', 'center', 'right']),
  style: _config.ViewPropTypes.style,
  children: _propTypes.default.oneOfType([_helpers.nodeType, _propTypes.default.node])
};
var Header = function (_Component) {
  (0, _inherits2.default)(Header, _Component);
  var _super = _createSuper(Header);
  function Header() {
    (0, _classCallCheck2.default)(this, Header);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Header, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
        linearGradientProps = _this$props.linearGradientProps,
        ViewComponent = _this$props.ViewComponent;
      if (linearGradientProps && !global.Expo && !ViewComponent) {
        console.error("You need to pass a ViewComponent to use linearGradientProps !\nExample: ViewComponent={require('react-native-linear-gradient')}");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        statusBarProps = _this$props2.statusBarProps,
        leftComponent = _this$props2.leftComponent,
        centerComponent = _this$props2.centerComponent,
        rightComponent = _this$props2.rightComponent,
        leftContainerStyle = _this$props2.leftContainerStyle,
        centerContainerStyle = _this$props2.centerContainerStyle,
        rightContainerStyle = _this$props2.rightContainerStyle,
        backgroundColor = _this$props2.backgroundColor,
        backgroundImage = _this$props2.backgroundImage,
        backgroundImageStyle = _this$props2.backgroundImageStyle,
        containerStyle = _this$props2.containerStyle,
        placement = _this$props2.placement,
        barStyle = _this$props2.barStyle,
        children = _this$props2.children,
        linearGradientProps = _this$props2.linearGradientProps,
        _this$props2$ViewComp = _this$props2.ViewComponent,
        ViewComponent = _this$props2$ViewComp === void 0 ? linearGradientProps && global.Expo ? global.Expo.LinearGradient : _reactNative.ImageBackground : _this$props2$ViewComp,
        theme = _this$props2.theme,
        attributes = (0, _objectWithoutProperties2.default)(_this$props2, _excluded);
      return _react.default.createElement(ViewComponent, (0, _extends2.default)({
        testID: "headerContainer"
      }, attributes, {
        style: _reactNative.StyleSheet.flatten([styles.container(theme), backgroundColor && {
          backgroundColor: backgroundColor
        }, containerStyle]),
        source: backgroundImage,
        imageStyle: backgroundImageStyle
      }, linearGradientProps), _react.default.createElement(_reactNative.StatusBar, (0, _extends2.default)({
        barStyle: barStyle
      }, statusBarProps)), _react.default.createElement(Children, {
        style: _reactNative.StyleSheet.flatten([placement === 'center' && styles.rightLeftContainer, leftContainerStyle]),
        placement: "left"
      }, _react.default.isValidElement(children) && children || children[0] || leftComponent), _react.default.createElement(Children, {
        style: _reactNative.StyleSheet.flatten([styles.centerContainer, placement !== 'center' && {
          paddingHorizontal: _reactNative.Platform.select({
            android: 16,
            default: 15
          })
        }, centerContainerStyle]),
        placement: placement
      }, children[1] || centerComponent), _react.default.createElement(Children, {
        style: _reactNative.StyleSheet.flatten([placement === 'center' && styles.rightLeftContainer, rightContainerStyle]),
        placement: "right"
      }, children[2] || rightComponent));
    }
  }]);
  return Header;
}(_react.Component);
exports.Header = Header;
Header.propTypes = {
  placement: _propTypes.default.oneOf(['left', 'center', 'right']),
  leftComponent: _helpers.nodeType,
  centerComponent: _helpers.nodeType,
  rightComponent: _helpers.nodeType,
  leftContainerStyle: _config.ViewPropTypes.style,
  centerContainerStyle: _config.ViewPropTypes.style,
  rightContainerStyle: _config.ViewPropTypes.style,
  backgroundColor: _propTypes.default.string,
  backgroundImage: _reactNative.Image.propTypes.source,
  backgroundImageStyle: _reactNative.Image.propTypes.style,
  containerStyle: _config.ViewPropTypes.style,
  statusBarProps: _propTypes.default.object,
  barStyle: _propTypes.default.oneOf(['default', 'light-content', 'dark-content']),
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),
  theme: _propTypes.default.object,
  linearGradientProps: _propTypes.default.object,
  ViewComponent: _propTypes.default.elementType
};
Header.defaultProps = {
  placement: 'center',
  children: []
};
var styles = {
  container: function container(theme) {
    return {
      borderBottomColor: '#f2f2f2',
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      paddingHorizontal: 10,
      backgroundColor: theme.colors.primary,
      paddingTop: (0, _config.getStatusBarHeight)(),
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      height: _reactNative.Platform.select({
        android: 56,
        default: 44
      }) + (0, _config.getStatusBarHeight)()
    };
  },
  centerContainer: {
    flex: 3
  },
  rightLeftContainer: {
    flex: 1
  }
};
var _default = (0, _config.withTheme)(Header, 'Header');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,