efd54e04387fd3feb4151ff6c8541444
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBoolean = exports.getTimeFromDateString = exports.StatusBarHeight = exports.isIPhoneX = exports.getStaggerGridStyle = exports.isNonNullAndEmpty = exports.isStringNullOrBlank = exports.showAlertView = void 0;
const react_native_1 = require("react-native");
const moment_1 = __importDefault(require("moment"));
const SCREEN_WIDTH = react_native_1.Dimensions.get('window').width;
const X_WIDTH = 375;
const X_HEIGHT = 812;
const XSMAX_WIDTH = 414;
const XSMAX_HEIGHT = 896;
const {
  height,
  width
} = react_native_1.Dimensions.get('window');
function showAlertView(title, mesage) {
  react_native_1.Keyboard.dismiss();
  react_native_1.Alert.alert(title, mesage, [{
    text: 'Okay',
    onPress: () => {}
  }]);
}
exports.showAlertView = showAlertView;
function isStringNullOrBlank(string) {
  return string === undefined || string === 'undefined' || string === null || string.length === 0;
}
exports.isStringNullOrBlank = isStringNullOrBlank;
function isNonNullAndEmpty(value) {
  return value !== undefined && value !== 'undefined' && value !== null && value !== 'null' && value.trim().length > 0;
}
exports.isNonNullAndEmpty = isNonNullAndEmpty;
exports.getStaggerGridStyle = () => {
  return {
    width: (SCREEN_WIDTH - 18) / 3,
    height: Number(Math.random() * 20 + 10) * 9,
    backgroundColor: 'gray',
    margin: 4,
    borderRadius: 18
  };
};
exports.isIPhoneX = () => react_native_1.Platform.OS === 'ios' && !react_native_1.Platform.isPad && !react_native_1.Platform.isTVOS ? width === X_WIDTH && height === X_HEIGHT || width === XSMAX_WIDTH && height === XSMAX_HEIGHT : false;
exports.StatusBarHeight = react_native_1.Platform.select({
  ios: exports.isIPhoneX() ? 44 : 20,
  android: react_native_1.StatusBar.currentHeight,
  default: 0
});
exports.getTimeFromDateString = createdAt => {
  let time = createdAt ? moment_1.default.utc(createdAt).startOf('seconds').fromNow(true) : "";
  time = time.replace("ago", "").replace("a few seconds", "now").replace("a ", "1 ").replace("an ", "1 ").replace("minutes", "m").replace("minute", "m").replace("hours", "H").replace("hour", "H").replace("days", "D").replace("day", "D").replace("months", "M").replace("month", "M").replace("weeks", "W").replace("week", "W").replace("years", "Y").replace("year", "Y");
  return time;
};
exports.toBoolean = value => [true, 'true', 'True', 'TRUE', '1', 1].includes(value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJtb21lbnRfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlNDUkVFTl9XSURUSCIsIkRpbWVuc2lvbnMiLCJnZXQiLCJ3aWR0aCIsIlhfV0lEVEgiLCJYX0hFSUdIVCIsIlhTTUFYX1dJRFRIIiwiWFNNQVhfSEVJR0hUIiwiaGVpZ2h0Iiwic2hvd0FsZXJ0VmlldyIsInRpdGxlIiwibWVzYWdlIiwiS2V5Ym9hcmQiLCJkaXNtaXNzIiwiQWxlcnQiLCJhbGVydCIsInRleHQiLCJvblByZXNzIiwiZXhwb3J0cyIsImlzU3RyaW5nTnVsbE9yQmxhbmsiLCJzdHJpbmciLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJpc05vbk51bGxBbmRFbXB0eSIsInZhbHVlIiwidHJpbSIsImdldFN0YWdnZXJHcmlkU3R5bGUiLCJOdW1iZXIiLCJNYXRoIiwicmFuZG9tIiwiYmFja2dyb3VuZENvbG9yIiwibWFyZ2luIiwiYm9yZGVyUmFkaXVzIiwiaXNJUGhvbmVYIiwiUGxhdGZvcm0iLCJPUyIsImlzUGFkIiwiaXNUVk9TIiwiU3RhdHVzQmFySGVpZ2h0Iiwic2VsZWN0IiwiaW9zIiwiYW5kcm9pZCIsIlN0YXR1c0JhciIsImN1cnJlbnRIZWlnaHQiLCJkZWZhdWx0IiwiZ2V0VGltZUZyb21EYXRlU3RyaW5nIiwiY3JlYXRlZEF0IiwidGltZSIsInV0YyIsInN0YXJ0T2YiLCJmcm9tTm93IiwicmVwbGFjZSIsInRvQm9vbGVhbiIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL21hY20xNC9Eb2N1bWVudHMvTlhaV0FXL254endhdi0yOTQ3OTMtcmVhY3QtbmF0aXZlL3NyYy9wYWNrYWdlcy9mcmFtZXdvcmsvc3JjL0Jsb2NrSGVscGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFsZXJ0LCBEaW1lbnNpb25zLCBLZXlib2FyZCwgUGxhdGZvcm0sIFN0YXR1c0JhciB9IGZyb20gXCJyZWFjdC1uYXRpdmVcIjtcbmltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xuY29uc3QgU0NSRUVOX1dJRFRIID0gRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpLndpZHRoO1xuY29uc3QgWF9XSURUSCA9IDM3NTtcbmNvbnN0IFhfSEVJR0hUID0gODEyO1xuXG5jb25zdCBYU01BWF9XSURUSCA9IDQxNDtcbmNvbnN0IFhTTUFYX0hFSUdIVCA9IDg5NjtcblxuY29uc3QgeyBoZWlnaHQsIHdpZHRoIH0gPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93QWxlcnRWaWV3KHRpdGxlOiBzdHJpbmcsIG1lc2FnZTogc3RyaW5nKSB7XG4gICAgS2V5Ym9hcmQuZGlzbWlzcygpO1xuICAgIEFsZXJ0LmFsZXJ0KHRpdGxlLCBtZXNhZ2UsIFt7IHRleHQ6ICdPa2F5Jywgb25QcmVzczogKCkgPT4ge30gfV0pO1xuICB9XG4gIFxuICBleHBvcnQgZnVuY3Rpb24gaXNTdHJpbmdOdWxsT3JCbGFuayhzdHJpbmc6IHN0cmluZykge1xuICAgIHJldHVybiAoXG4gICAgICBzdHJpbmcgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgc3RyaW5nID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgc3RyaW5nID09PSBudWxsIHx8XG4gICAgICBzdHJpbmcubGVuZ3RoID09PSAwXG4gICAgKTtcbiAgfVxuICBcbiAgZXhwb3J0IGZ1bmN0aW9uIGlzTm9uTnVsbEFuZEVtcHR5KHZhbHVlOiBTdHJpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB2YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgdmFsdWUgIT09ICdudWxsJyAmJlxuICAgICAgdmFsdWUudHJpbSgpLmxlbmd0aCA+IDBcbiAgICApO1xuICB9XG5cbiAgZXhwb3J0IGNvbnN0IGdldFN0YWdnZXJHcmlkU3R5bGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiAoU0NSRUVOX1dJRFRIIC0gMTgpIC8gMyxcbiAgICAgIGhlaWdodDogTnVtYmVyKE1hdGgucmFuZG9tKCkgKiAyMCArIDEwKSAqIDksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdncmF5JyxcbiAgICAgIG1hcmdpbjogNCxcbiAgICAgIGJvcmRlclJhZGl1czogMTgsXG4gICAgfTtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IGlzSVBob25lWCA9ICgpID0+IFBsYXRmb3JtLk9TID09PSAnaW9zJyAmJiAhUGxhdGZvcm0uaXNQYWQgJiYgIVBsYXRmb3JtLmlzVFZPU1xuICAgID8gd2lkdGggPT09IFhfV0lEVEggJiYgaGVpZ2h0ID09PSBYX0hFSUdIVCB8fCB3aWR0aCA9PT0gWFNNQVhfV0lEVEggJiYgaGVpZ2h0ID09PSBYU01BWF9IRUlHSFRcbiAgICA6IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgU3RhdHVzQmFySGVpZ2h0ID0gUGxhdGZvcm0uc2VsZWN0KHtcbiAgICBpb3M6IGlzSVBob25lWCgpID8gNDQgOiAyMCxcbiAgICBhbmRyb2lkOiBTdGF0dXNCYXIuY3VycmVudEhlaWdodCxcbiAgICBkZWZhdWx0OiAwXG59KVxuXG5leHBvcnQgY29uc3QgZ2V0VGltZUZyb21EYXRlU3RyaW5nID0gKGNyZWF0ZWRBdDpzdHJpbmcpID0+e1xuICBsZXQgdGltZSA9IGNyZWF0ZWRBdCA/IG1vbWVudC51dGMoY3JlYXRlZEF0KS5zdGFydE9mKCdzZWNvbmRzJykuZnJvbU5vdyh0cnVlKTogXCJcIlxuICB0aW1lID0gdGltZS5yZXBsYWNlKFwiYWdvXCIsXCJcIilcbiAgLnJlcGxhY2UoXCJhIGZldyBzZWNvbmRzXCIsXCJub3dcIilcbiAgLnJlcGxhY2UoXCJhIFwiLFwiMSBcIikucmVwbGFjZShcImFuIFwiLFwiMSBcIilcbiAgLnJlcGxhY2UoXCJtaW51dGVzXCIsXCJtXCIpLnJlcGxhY2UoXCJtaW51dGVcIixcIm1cIilcbiAgLnJlcGxhY2UoXCJob3Vyc1wiLFwiSFwiKS5yZXBsYWNlKFwiaG91clwiLFwiSFwiKVxuICAucmVwbGFjZShcImRheXNcIixcIkRcIikucmVwbGFjZShcImRheVwiLFwiRFwiKVxuICAucmVwbGFjZShcIm1vbnRoc1wiLFwiTVwiKS5yZXBsYWNlKFwibW9udGhcIixcIk1cIilcbiAgLnJlcGxhY2UoXCJ3ZWVrc1wiLCBcIldcIikucmVwbGFjZShcIndlZWtcIiwgXCJXXCIpXG4gIC5yZXBsYWNlKFwieWVhcnNcIiwgXCJZXCIpLnJlcGxhY2UoXCJ5ZWFyXCIsIFwiWVwiKVxuICByZXR1cm4gdGltZVxufVxuXG5leHBvcnQgY29uc3QgdG9Cb29sZWFuID0gKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuKTogYm9vbGVhbiA9PiBcbiAgICBbdHJ1ZSwgJ3RydWUnLCAnVHJ1ZScsICdUUlVFJywgJzEnLCAxXS5pbmNsdWRlcyh2YWx1ZSk7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQUFBLGNBQUEsR0FBQUMsT0FBQTtBQUNBLE1BQUFDLFFBQUEsR0FBQUMsZUFBQSxDQUFBRixPQUFBO0FBQ0EsTUFBTUcsWUFBWSxHQUFHSixjQUFBLENBQUFLLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDQyxLQUFLO0FBQ25ELE1BQU1DLE9BQU8sR0FBRyxHQUFHO0FBQ25CLE1BQU1DLFFBQVEsR0FBRyxHQUFHO0FBRXBCLE1BQU1DLFdBQVcsR0FBRyxHQUFHO0FBQ3ZCLE1BQU1DLFlBQVksR0FBRyxHQUFHO0FBRXhCLE1BQU07RUFBRUMsTUFBTTtFQUFFTDtBQUFLLENBQUUsR0FBR1AsY0FBQSxDQUFBSyxVQUFVLENBQUNDLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFFbEQsU0FBZ0JPLGFBQWFBLENBQUNDLEtBQWEsRUFBRUMsTUFBYztFQUN2RGYsY0FBQSxDQUFBZ0IsUUFBUSxDQUFDQyxPQUFPLEVBQUU7RUFDbEJqQixjQUFBLENBQUFrQixLQUFLLENBQUNDLEtBQUssQ0FBQ0wsS0FBSyxFQUFFQyxNQUFNLEVBQUUsQ0FB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