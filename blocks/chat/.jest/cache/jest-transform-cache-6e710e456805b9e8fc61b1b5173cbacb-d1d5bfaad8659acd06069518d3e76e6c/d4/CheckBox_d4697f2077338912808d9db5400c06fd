071ca893d19bdb29d3c24f95396eec10
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CheckBox = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _Text = _interopRequireDefault(require("../text/Text"));
var _CheckBoxIcon = _interopRequireDefault(require("./CheckBoxIcon"));
var _config = require("../config");
var _excluded = ["theme"],
  _excluded2 = ["Component", "checked", "iconRight", "title", "titleProps", "center", "right", "containerStyle", "textStyle", "wrapperStyle", "onPress", "onLongPress", "checkedTitle", "fontFamily", "checkedColor"];
var CheckBox = function CheckBox(props) {
  var theme = props.theme,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var Component = rest.Component,
    checked = rest.checked,
    iconRight = rest.iconRight,
    title = rest.title,
    titleProps = rest.titleProps,
    center = rest.center,
    right = rest.right,
    containerStyle = rest.containerStyle,
    textStyle = rest.textStyle,
    wrapperStyle = rest.wrapperStyle,
    onPress = rest.onPress,
    onLongPress = rest.onLongPress,
    checkedTitle = rest.checkedTitle,
    fontFamily = rest.fontFamily,
    _rest$checkedColor = rest.checkedColor,
    checkedColor = _rest$checkedColor === void 0 ? theme.colors.primary : _rest$checkedColor,
    attributes = (0, _objectWithoutProperties2.default)(rest, _excluded2);
  return _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    testID: "checkbox",
    onLongPress: onLongPress,
    onPress: onPress,
    style: _reactNative.StyleSheet.flatten([styles.container, title && styles.containerHasTitle, containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, right && {
      justifyContent: 'flex-end'
    }, center && {
      justifyContent: 'center'
    }, wrapperStyle && wrapperStyle])
  }, !iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {
    checkedColor: checkedColor
  })), _react.default.isValidElement(title) ? title : title && _react.default.createElement(_Text.default, (0, _extends2.default)({
    testID: "checkboxTitle",
    style: _reactNative.StyleSheet.flatten([styles.text(theme), textStyle && textStyle, fontFamily && {
      fontFamily: fontFamily
    }])
  }, titleProps), checked ? checkedTitle || title : title), iconRight && _react.default.createElement(_CheckBoxIcon.default, (0, _extends2.default)({}, props, {
    checkedColor: checkedColor
  }))));
};
exports.CheckBox = CheckBox;
CheckBox.propTypes = (0, _extends2.default)({}, _CheckBoxIcon.default.propTypes, {
  Component: _propTypes.default.elementType,
  iconRight: _propTypes.default.bool,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  titleProps: _propTypes.default.object,
  center: _propTypes.default.bool,
  right: _propTypes.default.bool,
  containerStyle: _config.ViewPropTypes.style,
  wrapperStyle: _config.ViewPropTypes.style,
  textStyle: _reactNative.Text.propTypes.style,
  onPress: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  checkedTitle: _propTypes.default.string,
  fontFamily: _propTypes.default.string
});
CheckBox.defaultProps = {
  checked: false,
  iconRight: false,
  right: false,
  center: false,
  uncheckedColor: '#bfbfbf',
  checkedIcon: 'check-square-o',
  uncheckedIcon: 'square-o',
  size: 24,
  Component: _reactNative.TouchableOpacity,
  titleProps: {}
};
var styles = {
  wrapper: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  container: {
    margin: 5,
    marginLeft: 10,
    marginRight: 10,
    padding: 10
  },
  containerHasTitle: {
    borderWidth: 1,
    borderRadius: 3,
    backgroundColor: '#fafafa',
    borderColor: '#ededed'
  },
  text: function text(theme) {
    return (0, _extends2.default)({
      marginLeft: 10,
      marginRight: 10,
      color: theme.colors.grey1
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.bold),
      default: {
        fontWeight: 'bold'
      }
    }));
  }
};
var _default = (0, _config.withTheme)(CheckBox, 'CheckBox');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,