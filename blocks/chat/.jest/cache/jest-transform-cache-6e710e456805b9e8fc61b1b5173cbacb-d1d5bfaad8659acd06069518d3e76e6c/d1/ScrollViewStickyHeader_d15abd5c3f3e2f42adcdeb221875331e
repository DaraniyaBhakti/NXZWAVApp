fa7db33f3aef98aa2cf5453174d70c29
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedImplementation = require('../../Animated/src/AnimatedImplementation');
var React = require('react');
var StyleSheet = require('../../StyleSheet/StyleSheet');
var View = require('../View/View');
var AnimatedView = AnimatedImplementation.createAnimatedComponent(View);
var ScrollViewStickyHeader = function (_React$Component) {
  (0, _inherits2.default)(ScrollViewStickyHeader, _React$Component);
  var _super = _createSuper(ScrollViewStickyHeader);
  function ScrollViewStickyHeader() {
    var _this;
    (0, _classCallCheck2.default)(this, ScrollViewStickyHeader);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      measured: false,
      layoutY: 0,
      layoutHeight: 0,
      nextHeaderLayoutY: _this.props.nextHeaderLayoutY
    };
    _this._onLayout = function (event) {
      _this.setState({
        measured: true,
        layoutY: event.nativeEvent.layout.y,
        layoutHeight: event.nativeEvent.layout.height
      });
      _this.props.onLayout(event);
      var child = React.Children.only(_this.props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    };
    return _this;
  }
  (0, _createClass2.default)(ScrollViewStickyHeader, [{
    key: "setNextHeaderY",
    value: function setNextHeaderY(y) {
      this.setState({
        nextHeaderLayoutY: y
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        inverted = _this$props.inverted,
        scrollViewHeight = _this$props.scrollViewHeight;
      var _this$state = this.state,
        measured = _this$state.measured,
        layoutHeight = _this$state.layoutHeight,
        layoutY = _this$state.layoutY,
        nextHeaderLayoutY = _this$state.nextHeaderLayoutY;
      var inputRange = [-1, 0];
      var outputRange = [0, 0];
      if (measured) {
        if (inverted) {
          if (scrollViewHeight != null) {
            var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
            if (stickStartPoint > 0) {
              inputRange.push(stickStartPoint);
              outputRange.push(0);
              inputRange.push(stickStartPoint + 1);
              outputRange.push(1);
              var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
              if (collisionPoint > stickStartPoint) {
                inputRange.push(collisionPoint, collisionPoint + 1);
                outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
              }
            }
          }
        } else {
          inputRange.push(layoutY);
          outputRange.push(0);
          var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
          if (_collisionPoint >= layoutY) {
            inputRange.push(_collisionPoint, _collisionPoint + 1);
            outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
          } else {
            inputRange.push(layoutY + 1);
            outputRange.push(1);
          }
        }
      }
      var translateY = this.props.scrollAnimatedValue.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });
      var child = React.Children.only(this.props.children);
      return React.createElement(AnimatedView, {
        collapsable: false,
        onLayout: this._onLayout,
        style: [child.props.style, styles.header, {
          transform: [{
            translateY: translateY
          }]
        }]
      }, React.cloneElement(child, {
        style: styles.fill,
        onLayout: undefined
      }));
    }
  }]);
  return ScrollViewStickyHeader;
}(React.Component);
var styles = StyleSheet.create({
  header: {
    zIndex: 10
  },
  fill: {
    flex: 1
  }
});
module.exports = ScrollViewStickyHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,