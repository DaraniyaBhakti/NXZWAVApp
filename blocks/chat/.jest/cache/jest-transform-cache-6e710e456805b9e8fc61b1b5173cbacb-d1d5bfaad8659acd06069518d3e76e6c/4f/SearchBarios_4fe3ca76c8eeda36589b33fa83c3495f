062c6a766037968418a9615b977103c3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ViewPropTypes = _interopRequireDefault(require("../config/ViewPropTypes"));
var _Input = _interopRequireDefault(require("../input/Input"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _helpers = require("../helpers");
var _excluded = ["cancelButtonProps", "cancelButtonTitle", "clearIcon", "containerStyle", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "placeholderTextColor", "showLoading", "loadingProps", "searchIcon", "showCancel"],
  _excluded2 = ["style"],
  _excluded3 = ["buttonStyle", "buttonTextStyle", "color", "disabled", "buttonDisabledStyle", "buttonDisabledTextStyle"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var IOS_GRAY = '#7d7d7d';
var defaultSearchIcon = {
  type: 'ionicon',
  size: 20,
  name: 'ios-search',
  color: IOS_GRAY
};
var defaultClearIcon = {
  type: 'ionicon',
  name: 'ios-close-circle',
  size: 20,
  color: IOS_GRAY
};
var SearchBar = function (_Component) {
  (0, _inherits2.default)(SearchBar, _Component);
  var _super = _createSuper(SearchBar);
  function SearchBar(props) {
    var _this;
    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);
    _this.focus = function () {
      _this.input.focus();
    };
    _this.blur = function () {
      _this.input.blur();
    };
    _this.clear = function () {
      _this.input.clear();
      _this.onChangeText('');
      _this.props.onClear();
    };
    _this.cancel = function () {
      _this.onChangeText('');
      if (_this.props.showCancel) {
        _reactNative.UIManager.configureNextLayoutAnimation && _reactNative.LayoutAnimation.easeInEaseOut();
        _this.setState({
          hasFocus: false
        });
      }
      setTimeout(function () {
        _this.blur();
        _this.props.onCancel();
      }, 0);
    };
    _this.onFocus = function () {
      _this.props.onFocus();
      _reactNative.UIManager.configureNextLayoutAnimation && _reactNative.LayoutAnimation.easeInEaseOut();
      _this.setState({
        hasFocus: true,
        isEmpty: _this.props.value === ''
      });
    };
    _this.onBlur = function () {
      _this.props.onBlur();
      _reactNative.UIManager.configureNextLayoutAnimation && _reactNative.LayoutAnimation.easeInEaseOut();
      if (!_this.props.showCancel) {
        _this.setState({
          hasFocus: false
        });
      }
    };
    _this.onChangeText = function (text) {
      _this.props.onChangeText(text);
      _this.setState({
        isEmpty: text === ''
      });
    };
    var value = props.value;
    _this.state = {
      hasFocus: false,
      isEmpty: value ? value === '' : true,
      cancelButtonWidth: null
    };
    return _this;
  }
  (0, _createClass2.default)(SearchBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        cancelButtonProps = _this$props.cancelButtonProps,
        cancelButtonTitle = _this$props.cancelButtonTitle,
        clearIcon = _this$props.clearIcon,
        containerStyle = _this$props.containerStyle,
        leftIconContainerStyle = _this$props.leftIconContainerStyle,
        rightIconContainerStyle = _this$props.rightIconContainerStyle,
        inputContainerStyle = _this$props.inputContainerStyle,
        inputStyle = _this$props.inputStyle,
        placeholderTextColor = _this$props.placeholderTextColor,
        showLoading = _this$props.showLoading,
        loadingProps = _this$props.loadingProps,
        searchIcon = _this$props.searchIcon,
        showCancel = _this$props.showCancel,
        attributes = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var _this$state = this.state,
        hasFocus = _this$state.hasFocus,
        isEmpty = _this$state.isEmpty;
      var loadingStyle = loadingProps.style,
        otherLoadingProps = (0, _objectWithoutProperties2.default)(loadingProps, _excluded2);
      var buttonStyle = cancelButtonProps.buttonStyle,
        buttonTextStyle = cancelButtonProps.buttonTextStyle,
        buttonColor = cancelButtonProps.color,
        buttonDisabled = cancelButtonProps.disabled,
        buttonDisabledStyle = cancelButtonProps.buttonDisabledStyle,
        buttonDisabledTextStyle = cancelButtonProps.buttonDisabledTextStyle,
        otherCancelButtonProps = (0, _objectWithoutProperties2.default)(cancelButtonProps, _excluded3);
      return _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.container, containerStyle])
      }, _react.default.createElement(_Input.default, (0, _extends2.default)({
        testID: "searchInput"
      }, attributes, {
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onChangeText: this.onChangeText,
        ref: function ref(input) {
          _this2.input = input;
        },
        inputStyle: _reactNative.StyleSheet.flatten([styles.input, inputStyle]),
        containerStyle: {
          paddingHorizontal: 0
        },
        inputContainerStyle: _reactNative.StyleSheet.flatten([styles.inputContainer, hasFocus && {
          marginRight: this.state.cancelButtonWidth
        }, inputContainerStyle]),
        leftIcon: (0, _helpers.renderNode)(_Icon.default, searchIcon, defaultSearchIcon),
        leftIconContainerStyle: _reactNative.StyleSheet.flatten([styles.leftIconContainerStyle, leftIconContainerStyle]),
        placeholderTextColor: placeholderTextColor,
        rightIcon: _react.default.createElement(_reactNative.View, {
          style: {
            flexDirection: 'row'
          }
        }, showLoading && _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({
          key: "loading",
          style: _reactNative.StyleSheet.flatten([{
            marginRight: 5
          }, loadingStyle])
        }, otherLoadingProps)), !isEmpty && (0, _helpers.renderNode)(_Icon.default, clearIcon, (0, _extends2.default)({}, defaultClearIcon, {
          key: 'cancel',
          onPress: this.clear
        }))),
        rightIconContainerStyle: _reactNative.StyleSheet.flatten([styles.rightIconContainerStyle, rightIconContainerStyle])
      })), _react.default.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.flatten([styles.cancelButtonContainer, {
          opacity: this.state.cancelButtonWidth === null ? 0 : 1,
          right: hasFocus ? 0 : -this.state.cancelButtonWidth
        }]),
        onLayout: function onLayout(event) {
          return _this2.setState({
            cancelButtonWidth: event.nativeEvent.layout.width
          });
        }
      }, _react.default.createElement(_reactNative.TouchableOpacity, (0, _extends2.default)({
        accessibilityRole: "button",
        onPress: this.cancel,
        disabled: buttonDisabled
      }, otherCancelButtonProps), _react.default.createElement(_reactNative.View, {
        style: [buttonStyle, buttonDisabled && buttonDisabledStyle]
      }, _react.default.createElement(_reactNative.Text, {
        style: [styles.buttonTextStyle, buttonColor && {
          color: buttonColor
        }, buttonTextStyle, buttonDisabled && (buttonDisabledTextStyle || styles.buttonTextDisabled)],
        disabled: buttonDisabled
      }, cancelButtonTitle)))));
    }
  }]);
  return SearchBar;
}(_react.Component);
SearchBar.propTypes = {
  value: _propTypes.default.string,
  cancelButtonProps: _propTypes.default.object,
  cancelButtonTitle: _propTypes.default.string,
  clearIcon: _helpers.nodeType,
  searchIcon: _helpers.nodeType,
  loadingProps: _propTypes.default.object,
  showLoading: _propTypes.default.bool,
  onClear: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onChangeText: _propTypes.default.func,
  containerStyle: _ViewPropTypes.default.style,
  leftIconContainerStyle: _ViewPropTypes.default.style,
  rightIconContainerStyle: _ViewPropTypes.default.style,
  inputContainerStyle: _ViewPropTypes.default.style,
  inputStyle: _reactNative.Text.propTypes.style,
  placeholderTextColor: _propTypes.default.string,
  showCancel: _propTypes.default.bool
};
SearchBar.defaultProps = {
  value: '',
  cancelButtonTitle: 'Cancel',
  loadingProps: {},
  cancelButtonProps: {},
  showLoading: false,
  onClear: function onClear() {
    return null;
  },
  onCancel: function onCancel() {
    return null;
  },
  onFocus: function onFocus() {
    return null;
  },
  onBlur: function onBlur() {
    return null;
  },
  onChangeText: function onChangeText() {
    return null;
  },
  placeholderTextColor: IOS_GRAY,
  searchIcon: defaultSearchIcon,
  clearIcon: defaultClearIcon,
  showCancel: false
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#f5f5f5',
    paddingBottom: 13,
    paddingTop: 13,
    flexDirection: 'row',
    overflow: 'hidden',
    alignItems: 'center'
  },
  input: {
    marginLeft: 6,
    overflow: 'hidden'
  },
  inputContainer: {
    borderBottomWidth: 0,
    backgroundColor: '#dcdce1',
    borderRadius: 9,
    minHeight: 36,
    marginLeft: 8,
    marginRight: 8
  },
  rightIconContainerStyle: {
    marginRight: 8
  },
  leftIconContainerStyle: {
    marginLeft: 8
  },
  buttonTextStyle: {
    color: '#007aff',
    textAlign: 'center',
    padding: 8,
    fontSize: 18
  },
  buttonTextDisabled: {
    color: '#cdcdcd'
  },
  cancelButtonContainer: {
    position: 'absolute'
  }
});
var _default = SearchBar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,