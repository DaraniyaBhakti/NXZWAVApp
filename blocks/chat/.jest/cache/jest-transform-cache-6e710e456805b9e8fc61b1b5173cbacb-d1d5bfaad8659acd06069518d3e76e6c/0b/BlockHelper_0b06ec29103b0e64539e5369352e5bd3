4ff5e43d2e6fcf73e47844f9393aee55
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBoolean = exports.getTimeFromDateString = exports.StatusBarHeight = exports.isIPhoneX = exports.getStaggerGridStyle = exports.isNonNullAndEmpty = exports.isStringNullOrBlank = exports.showAlertView = void 0;
const react_native_1 = require("react-native");
const moment_1 = __importDefault(require("moment"));
const SCREEN_WIDTH = react_native_1.Dimensions.get('window').width;
const X_WIDTH = 375;
const X_HEIGHT = 812;
const XSMAX_WIDTH = 414;
const XSMAX_HEIGHT = 896;
const {
  height,
  width
} = react_native_1.Dimensions.get('window');
function showAlertView(title, mesage) {
  react_native_1.Keyboard.dismiss();
  react_native_1.Alert.alert(title, mesage, [{
    text: 'Okay',
    onPress: () => {}
  }]);
}
exports.showAlertView = showAlertView;
function isStringNullOrBlank(string) {
  return string === undefined || string === 'undefined' || string === null || string.length === 0;
}
exports.isStringNullOrBlank = isStringNullOrBlank;
function isNonNullAndEmpty(value) {
  return value !== undefined && value !== 'undefined' && value !== null && value !== 'null' && value.trim().length > 0;
}
exports.isNonNullAndEmpty = isNonNullAndEmpty;
exports.getStaggerGridStyle = () => {
  return {
    width: (SCREEN_WIDTH - 18) / 3,
    height: Number(Math.random() * 20 + 10) * 9,
    backgroundColor: 'gray',
    margin: 4,
    borderRadius: 18
  };
};
exports.isIPhoneX = () => react_native_1.Platform.OS === 'ios' && !react_native_1.Platform.isPad && !react_native_1.Platform.isTVOS ? width === X_WIDTH && height === X_HEIGHT || width === XSMAX_WIDTH && height === XSMAX_HEIGHT : false;
exports.StatusBarHeight = react_native_1.Platform.select({
  ios: exports.isIPhoneX() ? 44 : 20,
  android: react_native_1.StatusBar.currentHeight,
  default: 0
});
exports.getTimeFromDateString = createdAt => {
  let time = createdAt ? moment_1.default.utc(createdAt).startOf('seconds').fromNow(true) : "";
  time = time.replace("ago", "").replace("a few seconds", "now").replace("a ", "1 ").replace("an ", "1 ").replace("minutes", "m").replace("minute", "m").replace("hours", "H").replace("hour", "H").replace("days", "D").replace("day", "D").replace("months", "M").replace("month", "M").replace("weeks", "W").replace("week", "W").replace("years", "Y").replace("year", "Y");
  return time;
};
exports.toBoolean = value => [true, 'true', 'True', 'TRUE', '1', 1].includes(value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJtb21lbnRfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlNDUkVFTl9XSURUSCIsIkRpbWVuc2lvbnMiLCJnZXQiLCJ3aWR0aCIsIlhfV0lEVEgiLCJYX0hFSUdIVCIsIlhTTUFYX1dJRFRIIiwiWFNNQVhfSEVJR0hUIiwiaGVpZ2h0Iiwic2hvd0FsZXJ0VmlldyIsInRpdGxlIiwibWVzYWdlIiwiS2V5Ym9hcmQiLCJkaXNtaXNzIiwiQWxlcnQiLCJhbGVydCIsInRleHQiLCJvblByZXNzIiwiZXhwb3J0cyIsImlzU3RyaW5nTnVsbE9yQmxhbmsiLCJzdHJpbmciLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJpc05vbk51bGxBbmRFbXB0eSIsInZhbHVlIiwidHJpbSIsImdldFN0YWdnZXJHcmlkU3R5bGUiLCJOdW1iZXIiLCJNYXRoIiwicmFuZG9tIiwiYmFja2dyb3VuZENvbG9yIiwibWFyZ2luIiwiYm9yZGVyUmFkaXVzIiwiaXNJUGhvbmVYIiwiUGxhdGZvcm0iLCJPUyIsImlzUGFkIiwiaXNUVk9TIiwiU3RhdHVzQmFySGVpZ2h0Iiwic2VsZWN0IiwiaW9zIiwiYW5kcm9pZCIsIlN0YXR1c0JhciIsImN1cnJlbnRIZWlnaHQiLCJkZWZhdWx0IiwiZ2V0VGltZUZyb21EYXRlU3RyaW5nIiwiY3JlYXRlZEF0IiwidGltZSIsInV0YyIsInN0YXJ0T2YiLCJmcm9tTm93IiwicmVwbGFjZSIsInRvQm9vbGVhbiIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL21hY20xNC9Eb2N1bWVudHMvTlhaV0FXL254endhdi0yOTQ3OTMtcmVhY3QtbmF0aXZlL3NyYy9wYWNrYWdlcy9jb21wb25lbnRzL3NyYy9BcHBIZWxwZXIvQmxvY2tIZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWxlcnQsIERpbWVuc2lvbnMsIEtleWJvYXJkLCBQbGF0Zm9ybSwgU3RhdHVzQmFyIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5jb25zdCBTQ1JFRU5fV0lEVEggPSBEaW1lbnNpb25zLmdldCgnd2luZG93Jykud2lkdGg7XG5jb25zdCBYX1dJRFRIID0gMzc1O1xuY29uc3QgWF9IRUlHSFQgPSA4MTI7XG5cbmNvbnN0IFhTTUFYX1dJRFRIID0gNDE0O1xuY29uc3QgWFNNQVhfSEVJR0hUID0gODk2O1xuXG5jb25zdCB7IGhlaWdodCwgd2lkdGggfSA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dBbGVydFZpZXcodGl0bGU6IHN0cmluZywgbWVzYWdlOiBzdHJpbmcpIHtcbiAgICBLZXlib2FyZC5kaXNtaXNzKCk7XG4gICAgQWxlcnQuYWxlcnQodGl0bGUsIG1lc2FnZSwgW3sgdGV4dDogJ09rYXknLCBvblByZXNzOiAoKSA9PiB7fSB9XSk7XG4gIH1cbiAgXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZ051bGxPckJsYW5rKHN0cmluZzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0cmluZyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBzdHJpbmcgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICBzdHJpbmcgPT09IG51bGwgfHxcbiAgICAgIHN0cmluZy5sZW5ndGggPT09IDBcbiAgICApO1xuICB9XG4gIFxuICBleHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsQW5kRW1wdHkodmFsdWU6IFN0cmluZykge1xuICAgIHJldHVybiAoXG4gICAgICB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHZhbHVlICE9PSBudWxsICYmXG4gICAgICB2YWx1ZSAhPT0gJ251bGwnICYmXG4gICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID4gMFxuICAgICk7XG4gIH1cblxuICBleHBvcnQgY29uc3QgZ2V0U3RhZ2dlckdyaWRTdHlsZSA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IChTQ1JFRU5fV0lEVEggLSAxOCkgLyAzLFxuICAgICAgaGVpZ2h0OiBOdW1iZXIoTWF0aC5yYW5kb20oKSAqIDIwICsgMTApICogOSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2dyYXknLFxuICAgICAgbWFyZ2luOiA0LFxuICAgICAgYm9yZGVyUmFkaXVzOiAxOCxcbiAgICB9O1xuICB9O1xuXG5leHBvcnQgY29uc3QgaXNJUGhvbmVYID0gKCkgPT4gUGxhdGZvcm0uT1MgPT09ICdpb3MnICYmICFQbGF0Zm9ybS5pc1BhZCAmJiAhUGxhdGZvcm0uaXNUVk9TXG4gICAgPyB3aWR0aCA9PT0gWF9XSURUSCAmJiBoZWlnaHQgPT09IFhfSEVJR0hUIHx8IHdpZHRoID09PSBYU01BWF9XSURUSCAmJiBoZWlnaHQgPT09IFhTTUFYX0hFSUdIVFxuICAgIDogZmFsc2U7XG5cbmV4cG9ydCBjb25zdCBTdGF0dXNCYXJIZWlnaHQgPSBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgIGlvczogaXNJUGhvbmVYKCkgPyA0NCA6IDIwLFxuICAgIGFuZHJvaWQ6IFN0YXR1c0Jhci5jdXJyZW50SGVpZ2h0LFxuICAgIGRlZmF1bHQ6IDBcbn0pXG5cbmV4cG9ydCBjb25zdCBnZXRUaW1lRnJvbURhdGVTdHJpbmcgPSAoY3JlYXRlZEF0OnN0cmluZykgPT57XG4gIGxldCB0aW1lID0gY3JlYXRlZEF0ID8gbW9tZW50LnV0YyhjcmVhdGVkQXQpLnN0YXJ0T2YoJ3NlY29uZHMnKS5mcm9tTm93KHRydWUpOiBcIlwiXG4gIHRpbWUgPSB0aW1lLnJlcGxhY2UoXCJhZ29cIixcIlwiKVxuICAucmVwbGFjZShcImEgZmV3IHNlY29uZHNcIixcIm5vd1wiKVxuICAucmVwbGFjZShcImEgXCIsXCIxIFwiKS5yZXBsYWNlKFwiYW4gXCIsXCIxIFwiKVxuICAucmVwbGFjZShcIm1pbnV0ZXNcIixcIm1cIikucmVwbGFjZShcIm1pbnV0ZVwiLFwibVwiKVxuICAucmVwbGFjZShcImhvdXJzXCIsXCJIXCIpLnJlcGxhY2UoXCJob3VyXCIsXCJIXCIpXG4gIC5yZXBsYWNlKFwiZGF5c1wiLFwiRFwiKS5yZXBsYWNlKFwiZGF5XCIsXCJEXCIpXG4gIC5yZXBsYWNlKFwibW9udGhzXCIsXCJNXCIpLnJlcGxhY2UoXCJtb250aFwiLFwiTVwiKVxuICAucmVwbGFjZShcIndlZWtzXCIsIFwiV1wiKS5yZXBsYWNlKFwid2Vla1wiLCBcIldcIilcbiAgLnJlcGxhY2UoXCJ5ZWFyc1wiLCBcIllcIikucmVwbGFjZShcInllYXJcIiwgXCJZXCIpXG4gIHJldHVybiB0aW1lXG59XG5cbmV4cG9ydCBjb25zdCB0b0Jvb2xlYW4gPSAodmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4pOiBib29sZWFuID0+IFxuICAgIFt0cnVlLCAndHJ1ZScsICdUcnVlJywgJ1RSVUUnLCAnMScsIDFdLmluY2x1ZGVzKHZhbHVlKTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsTUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBQ0EsTUFBQUMsUUFBQSxHQUFBQyxlQUFBLENBQUFGLE9BQUE7QUFDQSxNQUFNRyxZQUFZLEdBQUdKLGNBQUEsQ0FBQUssVUFBVSxDQUFDQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUNDLEtBQUs7QUFDbkQsTUFBTUMsT0FBTyxHQUFHLEdBQUc7QUFDbkIsTUFBTUMsUUFBUSxHQUFHLEdBQUc7QUFFcEIsTUFBTUMsV0FBVyxHQUFHLEdBQUc7QUFDdkIsTUFBTUMsWUFBWSxHQUFHLEdBQUc7QUFFeEIsTUFBTTtFQUFFQyxNQUFNO0VBQUVMO0FBQUssQ0FBRSxHQUFHUCxjQUFBLENBQUFLLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUVsRCxTQUFnQk8sYUFBYUEsQ0FBQ0MsS0FBYSxFQUFFQyxNQUFjO0VBQ3ZEZixjQUFBLENBQUFnQixRQUFRLENBQUNDLE9BQU8sRUFBRTtFQUNsQmpCLGNBQUEsQ0FBQWtCLEtBQUssQ0FBQ0MsS0FBSyxDQUFDTCxLQUFLLEVBQUVDLE1B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