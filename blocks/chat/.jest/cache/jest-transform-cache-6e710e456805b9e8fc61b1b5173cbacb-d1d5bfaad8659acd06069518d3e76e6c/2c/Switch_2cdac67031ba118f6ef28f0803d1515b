a8c8803bb8472cbb6bb5ba913ee8581e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _SwitchNativeComponent = _interopRequireDefault(require("./SwitchNativeComponent"));
var _excluded = ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AndroidSwitchNativeComponent = require('./AndroidSwitchNativeComponent');
var Platform = require('../../Utilities/Platform');
var React = require('react');
var StyleSheet = require('../../StyleSheet/StyleSheet');
var Switch = function (_React$Component) {
  (0, _inherits2.default)(Switch, _React$Component);
  var _super = _createSuper(Switch);
  function Switch() {
    var _this;
    (0, _classCallCheck2.default)(this, Switch);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _this._handleChange = function (event) {
      if (_this._nativeSwitchRef == null) {
        return;
      }
      var value = _this.props.value === true;
      if (Platform.OS === 'android') {
        _this._nativeSwitchRef.setNativeProps({
          on: value
        });
      } else {
        _this._nativeSwitchRef.setNativeProps({
          value: value
        });
      }
      if (_this.props.onChange != null) {
        _this.props.onChange(event);
      }
      if (_this.props.onValueChange != null) {
        _this.props.onValueChange(event.nativeEvent.value);
      }
    };
    _this._handleSwitchNativeComponentRef = function (ref) {
      _this._nativeSwitchRef = ref;
    };
    return _this;
  }
  (0, _createClass2.default)(Switch, [{
    key: "render",
    value: function render() {
      var _props$accessibilityR2;
      var _this$props = this.props,
        disabled = _this$props.disabled,
        ios_backgroundColor = _this$props.ios_backgroundColor,
        onChange = _this$props.onChange,
        onValueChange = _this$props.onValueChange,
        style = _this$props.style,
        thumbColor = _this$props.thumbColor,
        trackColor = _this$props.trackColor,
        value = _this$props.value,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var _thumbColor = thumbColor;
      var _trackColorForFalse = trackColor == null ? void 0 : trackColor.false;
      var _trackColorForTrue = trackColor == null ? void 0 : trackColor.true;
      var _ref = props,
        thumbTintColor = _ref.thumbTintColor,
        tintColor = _ref.tintColor,
        onTintColor = _ref.onTintColor;
      if (thumbTintColor != null) {
        _thumbColor = thumbTintColor;
        if (__DEV__) {
          console.warn('Switch: `thumbTintColor` is deprecated, use `thumbColor` instead.');
        }
      }
      if (tintColor != null) {
        _trackColorForFalse = tintColor;
        if (__DEV__) {
          console.warn('Switch: `tintColor` is deprecated, use `trackColor` instead.');
        }
      }
      if (onTintColor != null) {
        _trackColorForTrue = onTintColor;
        if (__DEV__) {
          console.warn('Switch: `onTintColor` is deprecated, use `trackColor` instead.');
        }
      }
      if (Platform.OS === 'android') {
        var _props$accessibilityR;
        var _platformProps = {
          enabled: disabled !== true,
          on: value === true,
          style: style,
          thumbTintColor: _thumbColor,
          trackColorForFalse: _trackColorForFalse,
          trackColorForTrue: _trackColorForTrue,
          trackTintColor: value === true ? _trackColorForTrue : _trackColorForFalse
        };
        return React.createElement(AndroidSwitchNativeComponent, (0, _extends2.default)({}, props, _platformProps, {
          accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'button',
          onChange: this._handleChange,
          onResponderTerminationRequest: returnsFalse,
          onStartShouldSetResponder: returnsTrue,
          ref: this._handleSwitchNativeComponentRef
        }));
      }
      var platformProps = {
        disabled: disabled,
        onTintColor: _trackColorForTrue,
        style: StyleSheet.compose({
          height: 31,
          width: 51
        }, StyleSheet.compose(style, ios_backgroundColor == null ? null : {
          backgroundColor: ios_backgroundColor,
          borderRadius: 16
        })),
        thumbTintColor: _thumbColor,
        tintColor: _trackColorForFalse,
        value: value === true
      };
      return React.createElement(_SwitchNativeComponent.default, (0, _extends2.default)({}, props, platformProps, {
        accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'button',
        onChange: this._handleChange,
        onResponderTerminationRequest: returnsFalse,
        onStartShouldSetResponder: returnsTrue,
        ref: this._handleSwitchNativeComponentRef
      }));
    }
  }]);
  return Switch;
}(React.Component);
var returnsFalse = function returnsFalse() {
  return false;
};
var returnsTrue = function returnsTrue() {
  return true;
};
module.exports = Switch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,