6b91319fcd4347a944ece068a344b9c4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Badge = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _config = require("../config");
var _helpers = require("../helpers");
var _excluded = ["containerStyle", "textStyle", "badgeStyle", "onPress", "Component", "value", "theme", "status"];
var Badge = function Badge(props) {
  var containerStyle = props.containerStyle,
    textStyle = props.textStyle,
    badgeStyle = props.badgeStyle,
    onPress = props.onPress,
    _props$Component = props.Component,
    Component = _props$Component === void 0 ? onPress ? _reactNative.TouchableOpacity : _reactNative.View : _props$Component,
    value = props.value,
    theme = props.theme,
    status = props.status,
    attributes = (0, _objectWithoutProperties2.default)(props, _excluded);
  var element = (0, _helpers.renderNode)(_reactNative.Text, value, {
    style: _reactNative.StyleSheet.flatten([styles.text, textStyle && textStyle])
  });
  return _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([containerStyle && containerStyle])
  }, _react.default.createElement(Component, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.badge(theme, status), !element && styles.miniBadge, badgeStyle && badgeStyle]),
    onPress: onPress
  }), element));
};
exports.Badge = Badge;
Badge.propTypes = {
  containerStyle: _config.ViewPropTypes.style,
  badgeStyle: _config.ViewPropTypes.style,
  textStyle: _reactNative.Text.propTypes.style,
  value: _propTypes.default.node,
  onPress: _propTypes.default.func,
  Component: _propTypes.default.elementType,
  theme: _propTypes.default.object,
  status: _propTypes.default.oneOf(['primary', 'success', 'warning', 'error'])
};
Badge.defaultProps = {
  status: 'primary'
};
var size = 18;
var miniSize = 8;
var styles = {
  badge: function badge(theme, status) {
    return {
      alignSelf: 'center',
      minWidth: size,
      height: size,
      borderRadius: size / 2,
      alignItems: 'center',
      justifyContent: 'center',
      backgroundColor: theme.colors[status],
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: '#fff'
    };
  },
  miniBadge: {
    paddingHorizontal: 0,
    paddingVertical: 0,
    minWidth: miniSize,
    height: miniSize,
    borderRadius: miniSize / 2
  },
  text: {
    fontSize: 12,
    color: 'white',
    paddingHorizontal: 4
  }
};
var _default = (0, _config.withTheme)(Badge, 'Badge');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVhY3ROYXRpdmUiLCJfY29uZmlnIiwiX2hlbHBlcnMiLCJfZXhjbHVkZWQiLCJCYWRnZSIsInByb3BzIiwiY29udGFpbmVyU3R5bGUiLCJ0ZXh0U3R5bGUiLCJiYWRnZVN0eWxlIiwib25QcmVzcyIsIl9wcm9wcyRDb21wb25lbnQiLCJDb21wb25lbnQiLCJUb3VjaGFibGVPcGFjaXR5IiwiVmlldyIsInZhbHVlIiwidGhlbWUiLCJzdGF0dXMiLCJhdHRyaWJ1dGVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsImRlZmF1bHQiLCJlbGVtZW50IiwicmVuZGVyTm9kZSIsIlRleHQiLCJzdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwic3R5bGVzIiwidGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJiYWRnZSIsIm1pbmlCYWRnZSIsImV4cG9ydHMiLCJwcm9wVHlwZXMiLCJWaWV3UHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwibm9kZSIsImZ1bmMiLCJlbGVtZW50VHlwZSIsIm9iamVjdCIsIm9uZU9mIiwiZGVmYXVsdFByb3BzIiwic2l6ZSIsIm1pbmlTaXplIiwiYWxpZ25TZWxmIiwibWluV2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvcnMiLCJib3JkZXJXaWR0aCIsImhhaXJsaW5lV2lkdGgiLCJib3JkZXJDb2xvciIsInBhZGRpbmdIb3Jpem9udGFsIiwicGFkZGluZ1ZlcnRpY2FsIiwiZm9udFNpemUiLCJjb2xvciIsIl9kZWZhdWx0Iiwid2l0aFRoZW1lIl0sInNvdXJjZXMiOlsiQmFkZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBUZXh0LCBWaWV3LCBUb3VjaGFibGVPcGFjaXR5IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IHsgVmlld1Byb3BUeXBlcywgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IHJlbmRlck5vZGUgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgQmFkZ2UgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb250YWluZXJTdHlsZSxcbiAgICB0ZXh0U3R5bGUsXG4gICAgYmFkZ2VTdHlsZSxcbiAgICBvblByZXNzLFxuICAgIENvbXBvbmVudCA9IG9uUHJlc3MgPyBUb3VjaGFibGVPcGFjaXR5IDogVmlldyxcbiAgICB2YWx1ZSxcbiAgICB0aGVtZSxcbiAgICBzdGF0dXMsXG4gICAgLi4uYXR0cmlidXRlc1xuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgZWxlbWVudCA9IHJlbmRlck5vZGUoVGV4dCwgdmFsdWUsIHtcbiAgICBzdHlsZTogU3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMudGV4dCwgdGV4dFN0eWxlICYmIHRleHRTdHlsZV0pLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW2NvbnRhaW5lclN0eWxlICYmIGNvbnRhaW5lclN0eWxlXSl9PlxuICAgICAgPENvbXBvbmVudFxuICAgICAgICB7Li4uYXR0cmlidXRlc31cbiAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgICAgc3R5bGVzLmJhZGdlKHRoZW1lLCBzdGF0dXMpLFxuICAgICAgICAgICFlbGVtZW50ICYmIHN0eWxlcy5taW5pQmFkZ2UsXG4gICAgICAgICAgYmFkZ2VTdHlsZSAmJiBiYWRnZVN0eWxlLFxuICAgICAgICBdKX1cbiAgICAgICAgb25QcmVzcz17b25QcmVzc31cbiAgICAgID5cbiAgICAgICAge2VsZW1lbnR9XG4gICAgICA8L0NvbXBvbmVudD5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5CYWRnZS5wcm9wVHlwZXMgPSB7XG4gIGNvbnRhaW5lclN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICBiYWRnZVN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICB0ZXh0U3R5bGU6IFRleHQucHJvcFR5cGVzLnN0eWxlLFxuICB2YWx1ZTogUHJvcFR5cGVzLm5vZGUsXG4gIG9uUHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuICBDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0YXR1czogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZXJyb3InXSksXG59O1xuXG5CYWRnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHN0YXR1czogJ3ByaW1hcnknLFxufTtcblxuY29uc3Qgc2l6ZSA9IDE4O1xuY29uc3QgbWluaVNpemUgPSA4O1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJhZGdlOiAodGhlbWUsIHN0YXR1cykgPT4gKHtcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInLFxuICAgIG1pbldpZHRoOiBzaXplLFxuICAgIGhlaWdodDogc2l6ZSxcbiAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yc1tzdGF0dXNdLFxuICAgIGJvcmRlcldpZHRoOiBTdHlsZVNoZWV0LmhhaXJsaW5lV2lkdGgsXG4gICAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgfSksXG4gIG1pbmlCYWRnZToge1xuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAwLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogMCxcbiAgICBtaW5XaWR0aDogbWluaVNpemUsXG4gICAgaGVpZ2h0OiBtaW5pU2l6ZSxcbiAgICBib3JkZXJSYWRpdXM6IG1pbmlTaXplIC8gMixcbiAgfSxcbiAgdGV4dDoge1xuICAgIGZvbnRTaXplOiAxMixcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogNCxcbiAgfSxcbn07XG5cbmV4cG9ydCB7IEJhZGdlIH07XG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQmFkZ2UsICdCYWRnZScpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsWUFBQSxHQUFBRixPQUFBO0FBRUEsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksUUFBQSxHQUFBSixPQUFBO0FBQXdDLElBQUFLLFNBQUE7QUFFeEMsSUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQUtBLENBQUdDLEtBQUssRUFBSTtFQUNyQixJQUNFQyxjQUFjLEdBU1pELEtBQUssQ0FUUEMsY0FBYztJQUNkQyxTQUFTLEdBUVBGLEtBQUssQ0FSUEUsU0FBUztJQUNUQyxVQUFVLEdBT1JILEtBQUssQ0FQUEcsVUFBVTtJQUNWQyxPQUFPLEdBTUxKLEtBQUssQ0FOUEksT0FBTztJQUFBQyxnQkFBQSxHQU1MTCxLQUFLLENBTFBNLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxnQkFBQSxjQUFHRCxPQUFPLEdBQUdHLDZCQUFnQixHQUFHQyxpQkFBSSxHQUFBSCxnQkFBQTtJQUM3Q0ksS0FBSyxHQUlIVCxLQUFLLENBSlBTLEtBQUs7SUFDTEMsS0FBSyxHQUdIVixLQUFLLENBSFBVLEtBQUs7SUFDTEMsTUFBTSxHQUVKWCxLQUFLLENBRlBXLE1BQU07SUFDSEMsVUFBVSxPQUFBQyx5QkFBQSxDQUFBQyxPQUFBLEVBQ1hkLEtBQUssRUFBQUYsU0FBQTtFQUVULElBQU1pQixPQUFPLEdBQUcsSUFBQUMsbUJBQVUsRUFBQ0MsaUJBQUksRUFBRVIsS0FB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