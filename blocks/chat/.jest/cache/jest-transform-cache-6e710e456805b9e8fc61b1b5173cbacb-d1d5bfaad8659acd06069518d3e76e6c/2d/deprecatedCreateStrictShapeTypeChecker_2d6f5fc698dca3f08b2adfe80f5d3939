847cffb1624fd16efe0e53eccb70dc60
'use strict';

var invariant = require('invariant');
var merge = require('../vendor/core/merge');
function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
    }
    var allKeys = merge(props[propName], shapeTypes);
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }
    for (var _key2 in allKeys) {
      var checker = shapeTypes[_key2];
      if (!checker) {
        invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
      rest[_key3 - 4] = arguments[_key3];
    }
    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}
module.exports = deprecatedCreateStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwibWVyZ2UiLCJkZXByZWNhdGVkQ3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwibG9jYXRpb25OYW1lIiwiYWxsS2V5cyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZXN0IiwiQXJyYXkiLCJfa2V5Iiwia2V5IiwiY2hlY2tlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwiZXJyb3IiLCJhcHBseSIsImNvbmNhdCIsIm1lc3NhZ2UiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiX2xlbjIiLCJfa2V5MyIsImJpbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5jb25zdCBtZXJnZSA9IHJlcXVpcmUoJy4uL3ZlbmRvci9jb3JlL21lcmdlJyk7XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWRDcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXM6IHtcbiAgW2tleTogc3RyaW5nXTogUmVhY3RQcm9wc0NoZWNrVHlwZSxcbn0pOiBSZWFjdFByb3BzQ2hhaW5hYmxlVHlwZUNoZWNrZXIge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoXG4gICAgaXNSZXF1aXJlZCxcbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGxvY2F0aW9uPyxcbiAgICAuLi5yZXN0XG4gICkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYFJlcXVpcmVkIG9iamVjdCBcXGAke3Byb3BOYW1lfVxcYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgICtcbiAgICAgICAgICAgIGBcXGAke2NvbXBvbmVudE5hbWV9XFxgLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBjb25zdCBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgY29uc3QgbG9jYXRpb25OYW1lID0gbG9jYXRpb24gfHwgJyh1bmtub3duKSc7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEludmFsaWQgJHtsb2NhdGlvbk5hbWV9IFxcYCR7cHJvcE5hbWV9XFxgIG9mIHR5cGUgXFxgJHtwcm9wVHlwZX1cXGAgYCArXG4gICAgICAgICAgYHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYG9iamVjdFxcYC5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAvLyBwcm9wcy5cbiAgICBjb25zdCBhbGxLZXlzID0gbWVyZ2UocHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICBjb25zdCBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBgSW52YWxpZCBwcm9wcy4ke3Byb3BOYW1lfSBrZXkgXFxgJHtrZXl9XFxgIHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAuYCArXG4gICAgICAgICAgICAnXFxuQmFkIG9iamVjdDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICtcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByb3BzW3Byb3BOYW1lXSwgbnVsbCwgJyAgJyksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNoYWluZWRDaGVja1R5cGUoXG4gICAgcHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9LFxuICAgIHByb3BOYW1lOiBzdHJpbmcsXG4gICAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICAgIGxvY2F0aW9uPzogc3RyaW5nLFxuICAgIC4uLnJlc3RcbiAgKTogP0Vycm9yIHtcbiAgICByZXR1cm4gY2hlY2tUeXBlKGZhbHNlLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgfVxuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXI7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBRVosSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ3RDLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBRTdDLFNBQVNFLHNDQUFzQ0EsQ0FBQ0MsVUFFL0MsRUFBa0M7RUFDakMsU0FBU0MsU0FBU0EsQ0FDaEJDLFVBQVUsRUFDVkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLGFBQWEsRUFDYkMsUUFBUyxFQUVUO0lBQ0EsSUFBSSxDQUFDSCxLQUFLLENBQUNDLFFBQVEsQ0FBQyxFQUFFO01BQ3BCLElBQUlGLFVBQVUsRUFBRTtRQUNkTixTQUFTLENBQ1AsS0FBSyxFQUNMLHNCQUFxQlEsUUFBUSxzQ0FDdEJDLGFBQWEsUUFDdEIsQ0FBQztNQUNIO01BQ0E7SUFDRjtJQUNBLElBQU1FLFNBQVMsR0FBR0osS0FBSyxDQUFDQyxRQUFRLENBQUM7SUFDakMsSUFBTUksUUFBUSxHQUFHLE9BQU9ELFNBQVM7SUFDakMsSUFBTUUsWUFBWSxHQUFHSCxRQUFRLElBQUksV0FBVztJQUM1QyxJQUFJRSxRQUFRLEtBQUssUUFBUSxFQUFFO01BQ3pCWixTQUFTLENBQ1AsS0FBSyxFQUNMLGFBQVdhLFlBQVksVUFBTUwsUUFBUSxtQkFBZ0JJLFFBQVEsNkJBQzFDSCxhQUFhLDJCQUNsQyxDQUFDO0lBQ0g7SUFHQSxJQUFNSyxPQUFPLEdBQUdaLEtBQUssQ0FBQ0ssS0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBRUosVUFBVSxDQUFDO0lBQUMsU0FBQVcsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUF4QmhEQyxJQUFJLE9BQUFDLEtBQUEsQ0FBQUosSUFBQSxPQUFBQSxJQUFBLFdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7TUFBSkYsSUFBSSxDQUFBRSxJQUFBLFFBQUFKLFNBQUEsQ0FBQUksSUFBQTtJQUFBO0lBeUJQLEtBQUssSUFBTUMsS0FBRyxJQUFJUCxPQUFPLEVBQUU7TUFDekIsSUFBTVEsT0FBTyxHQUFHbEIsVUFBVSxDQUFDaUIsS0FBRyxDQUFDO01BQy9CLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1FBQ1p0QixTQUFTLENBQ1AsS0FBSyxFQUNMLG1CQUFpQlEsUUFBUSxjQUFVYSxLQUFHLHVCQUFvQlosYUFBYSxVQUNyRSxnQkFBZ0IsR0FDaEJjLElBQUksQ0FBQ0MsU0FBUyxDQUFDakIsS0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQzNDLGdCQUFnQixHQUNoQmUsSUFBSSxDQUFDQyxTQUFTLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDdEIsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FDdEQsQ0FBQztNQUNIO01BQ0EsSUFBTXVCLEtBQUssR0FBR0wsT0FBTyxDQUFBTSxLQUFBLFVBQUNqQixTQUFTLEVBQUVVLEtBQUcsRUFBRVosYUFBYSxFQUFFQyxRQUFRLEVBQUFtQixNQUFBLENBQUtYLElBQUksRUFBQztNQUN2RSxJQUFJUyxLQUFLLEVBQUU7UUFDVDNCLFNBQVMsQ0FDUCxLQUFLLEVBQ0wyQixLQUFLLENBQUNHLE9BQU8sR0FDWCxnQkFBZ0IsR0FDaEJQLElBQUksQ0FBQ0MsU0FBUyxDQUFDakIsS0FBSyxDQUFDQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUM5QyxDQUFDO01BQ0g7SUFDRjtFQUNGO0VBQ0EsU0FBU3VCLGdCQUFnQkEsQ0FDdkJ4QixLQUEyQixFQUMzQkMsUUFBZ0IsRUFDaEJDLGFBQXFCLEVBQ3JCQyxRQUFpQixFQUVUO0lBQUEsU0FBQXNCLEtBQUEsR0FBQWhCLFNBQUEsQ0FBQUMsTUFBQSxFQURMQyxJQUFJLE9BQUFDLEtBQUEsQ0FBQWEsS0FBQSxPQUFBQSxLQUFBLFdBQUFDLEtBQUEsTUFBQUEsS0FBQSxHQUFBRCxLQUFBLEVBQUFDLEtBQUE7TUFBSmYsSUFBSSxDQUFBZSxLQUFBLFFBQUFqQixTQUFBLENBQUFpQixLQUFBO0lBQUE7SUFFUCxPQUFPNUIsU0FBUyxDQUFBdUIsS0FBQSxVQUFDLEtBQUssRUFBRXJCLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUVDLFFBQVEsRUFBQW1CLE1BQUEsQ0FBS1gsSUFBSSxFQUFDO0VBQzVFO0VBQ0FhLGdCQUFnQixDQUFDekIsVUFBVSxHQUFHRCxTQUFTLENBQUM2QixJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztFQUN4RCxPQUFPSCxnQkFBZ0I7QUFDekI7QUFFQUksTUFBTSxDQUFDQyxPQUFPLEdBQUdqQyxzQ0FBc0MifQ==