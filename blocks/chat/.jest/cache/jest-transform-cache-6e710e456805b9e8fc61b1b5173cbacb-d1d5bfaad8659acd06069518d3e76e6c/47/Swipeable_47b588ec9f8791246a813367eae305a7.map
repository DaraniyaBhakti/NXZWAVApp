{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_gestureHandlers","_State","DRAG_TOSS","Swipeable","_React$Component","_inherits2","default","_super","_createSuper","_props","_this","_classCallCheck2","call","_defineProperty","_assertThisInitialized2","props","state","friction","overshootFriction","dragX","rowTranslation","_state$leftWidth","leftWidth","_state$rowWidth","rowWidth","_state$rightOffset","rightOffset","rightWidth","Math","max","_props$overshootLeft","overshootLeft","_props$overshootRight","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","_ref","nativeEvent","oldState","State","ACTIVE","close","ev","handleRelease","_ev$nativeEvent","velocityX","translationX","_this$state","_this$state$leftWidth","_this$state$rowWidth","rowState","_this$state$rightOffs","_this$props5","_this$props5$leftThre","leftThreshold","_this$props5$rightThr","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","_this$state2","setValue","setState","sign","spring","_extends3","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","_ref2","finished","onSwipeableLeftOpen","onSwipeableRightOpen","_this$props$onSwipeab","_this$props","onSwipeableClose","_this$props$onSwipeab2","_this$props2","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","_this$props$onSwipeab3","_this$props3","onSwipeableWillClose","_this$props$onSwipeab4","_this$props4","onSwipeableWillOpen","_ref3","layout","width","_this$state3","_this$state3$leftWidt","_this$state3$rowWidth","_this$state$rightOffs2","_this$state$leftWidth2","_this$state$rowWidth2","_this$state$rightOffs3","_dragX","undefined","updateAnimatedEvent","onGestureEvent","event","_createClass2","key","value","UNSAFE_componentWillUpdate","render","_this2","_this$props6","children","renderLeftActions","renderRightActions","left","createElement","View","style","styles","leftActions","transform","translateX","onLayout","_ref4","x","right","rightActions","_ref5","PanGestureHandler","_extends","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","TapGestureHandler","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","Component","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  PanGestureHandlerProps,\n  GestureEvent,\n  PanGestureHandlerEventPayload,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\ninterface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  enableTrackpadTwoFingerGesture?: boolean;\n  friction?: number;\n  leftThreshold?: number;\n  rightThreshold?: number;\n  overshootLeft?: boolean;\n  overshootRight?: boolean;\n  overshootFriction?: number;\n  onSwipeableLeftOpen?: () => void;\n  onSwipeableRightOpen?: () => void;\n  onSwipeableOpen?: () => void;\n  onSwipeableClose?: () => void;\n  onSwipeableLeftWillOpen?: () => void;\n  onSwipeableRightWillOpen?: () => void;\n  onSwipeableWillOpen?: () => void;\n  onSwipeableWillClose?: () => void;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1]\n   * dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1]\n   * dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  useNativeAnimations?: boolean;\n  animationOptions?: Record<string, unknown>;\n  containerStyle?: StyleProp<ViewStyle>;\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [\n        -rightWidth - (overshootRight ? 1 : overshootFriction!),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 : overshootFriction!),\n      ],\n      outputRange: [\n        -rightWidth - (overshootRight || overshootFriction! > 1 ? 1 : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft || overshootFriction! > 1 ? 1 : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all asigned in constructor in `updateAnimatedEvent` but TS cannot spot it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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"}