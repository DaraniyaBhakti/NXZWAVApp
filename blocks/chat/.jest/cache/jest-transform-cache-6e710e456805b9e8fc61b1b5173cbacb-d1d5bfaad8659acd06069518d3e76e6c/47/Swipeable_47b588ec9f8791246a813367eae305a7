aae4a7381bf4a699b380d36291187cd9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _gestureHandlers = require("../handlers/gestureHandlers");
var _State = require("../State");
function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };
  return cache;
}
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DRAG_TOSS = 0.05;
var Swipeable = function (_React$Component) {
  (0, _inherits2.default)(Swipeable, _React$Component);
  var _super = _createSuper(Swipeable);
  function Swipeable(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, Swipeable);
    _this = _super.call(this, _props);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onGestureEvent", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "transX", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "showLeftAction", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "leftActionTranslate", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "showRightAction", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "rightActionTranslate", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "updateAnimatedEvent", function (props, state) {
      var friction = props.friction,
        overshootFriction = props.overshootFriction;
      var dragX = state.dragX,
        rowTranslation = state.rowTranslation,
        _state$leftWidth = state.leftWidth,
        leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,
        _state$rowWidth = state.rowWidth,
        rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;
      var _state$rightOffset = state.rightOffset,
        rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;
      var rightWidth = Math.max(0, rowWidth - rightOffset);
      var _props$overshootLeft = props.overshootLeft,
        overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,
        _props$overshootRight = props.overshootRight,
        overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;
      var transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({
        inputRange: [0, friction],
        outputRange: [0, 1]
      })).interpolate({
        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],
        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]
      });
      _this.transX = transX;
      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({
        inputRange: [-1, 0, leftWidth],
        outputRange: [0, 0, 1]
      }) : new _reactNative.Animated.Value(0);
      _this.leftActionTranslate = _this.showLeftAction.interpolate({
        inputRange: [0, Number.MIN_VALUE],
        outputRange: [-10000, 0],
        extrapolate: 'clamp'
      });
      _this.showRightAction = rightWidth > 0 ? transX.interpolate({
        inputRange: [-rightWidth, 0, 1],
        outputRange: [1, 0, 0]
      }) : new _reactNative.Animated.Value(0);
      _this.rightActionTranslate = _this.showRightAction.interpolate({
        inputRange: [0, Number.MIN_VALUE],
        outputRange: [-10000, 0],
        extrapolate: 'clamp'
      });
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onTapHandlerStateChange", function (_ref) {
      var nativeEvent = _ref.nativeEvent;
      if (nativeEvent.oldState === _State.State.ACTIVE) {
        _this.close();
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onHandlerStateChange", function (ev) {
      if (ev.nativeEvent.oldState === _State.State.ACTIVE) {
        _this.handleRelease(ev);
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleRelease", function (ev) {
      var _ev$nativeEvent = ev.nativeEvent,
        velocityX = _ev$nativeEvent.velocityX,
        dragX = _ev$nativeEvent.translationX;
      var _this$state = _this.state,
        _this$state$leftWidth = _this$state.leftWidth,
        leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,
        _this$state$rowWidth = _this$state.rowWidth,
        rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,
        rowState = _this$state.rowState;
      var _this$state$rightOffs = _this.state.rightOffset,
        rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;
      var rightWidth = rowWidth - rightOffset;
      var _this$props5 = _this.props,
        friction = _this$props5.friction,
        _this$props5$leftThre = _this$props5.leftThreshold,
        leftThreshold = _this$props5$leftThre === void 0 ? leftWidth / 2 : _this$props5$leftThre,
        _this$props5$rightThr = _this$props5.rightThreshold,
        rightThreshold = _this$props5$rightThr === void 0 ? rightWidth / 2 : _this$props5$rightThr;
      var startOffsetX = _this.currentOffset() + dragX / friction;
      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;
      var toValue = 0;
      if (rowState === 0) {
        if (translationX > leftThreshold) {
          toValue = leftWidth;
        } else if (translationX < -rightThreshold) {
          toValue = -rightWidth;
        }
      } else if (rowState === 1) {
        if (translationX > -leftThreshold) {
          toValue = leftWidth;
        }
      } else {
        if (translationX < rightThreshold) {
          toValue = -rightWidth;
        }
      }
      _this.animateRow(startOffsetX, toValue, velocityX / friction);
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "animateRow", function (fromValue, toValue, velocityX) {
      var _this$state2 = _this.state,
        dragX = _this$state2.dragX,
        rowTranslation = _this$state2.rowTranslation;
      dragX.setValue(0);
      rowTranslation.setValue(fromValue);
      _this.setState({
        rowState: Math.sign(toValue)
      });
      _reactNative.Animated.spring(rowTranslation, (0, _extends3.default)({
        restSpeedThreshold: 1.7,
        restDisplacementThreshold: 0.4,
        velocity: velocityX,
        bounciness: 0,
        toValue: toValue,
        useNativeDriver: _this.props.useNativeAnimations
      }, _this.props.animationOptions)).start(function (_ref2) {
        var finished = _ref2.finished;
        if (finished) {
          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {
            _this.props.onSwipeableLeftOpen();
          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {
            _this.props.onSwipeableRightOpen();
          }
          if (toValue === 0) {
            var _this$props$onSwipeab, _this$props;
            (_this$props$onSwipeab = (_this$props = _this.props).onSwipeableClose) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);
          } else {
            var _this$props$onSwipeab2, _this$props2;
            (_this$props$onSwipeab2 = (_this$props2 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2);
          }
        }
      });
      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {
        _this.props.onSwipeableLeftWillOpen();
      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {
        _this.props.onSwipeableRightWillOpen();
      }
      if (toValue === 0) {
        var _this$props$onSwipeab3, _this$props3;
        (_this$props$onSwipeab3 = (_this$props3 = _this.props).onSwipeableWillClose) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);
      } else {
        var _this$props$onSwipeab4, _this$props4;
        (_this$props$onSwipeab4 = (_this$props4 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4);
      }
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "onRowLayout", function (_ref3) {
      var nativeEvent = _ref3.nativeEvent;
      _this.setState({
        rowWidth: nativeEvent.layout.width
      });
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "currentOffset", function () {
      var _this$state3 = _this.state,
        _this$state3$leftWidt = _this$state3.leftWidth,
        leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,
        _this$state3$rowWidth = _this$state3.rowWidth,
        rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,
        rowState = _this$state3.rowState;
      var _this$state$rightOffs2 = _this.state.rightOffset,
        rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;
      var rightWidth = rowWidth - rightOffset;
      if (rowState === 1) {
        return leftWidth;
      } else if (rowState === -1) {
        return -rightWidth;
      }
      return 0;
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "close", function () {
      _this.animateRow(_this.currentOffset(), 0);
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "openLeft", function () {
      var _this$state$leftWidth2 = _this.state.leftWidth,
        leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;
      _this.animateRow(_this.currentOffset(), leftWidth);
    });
    _defineProperty((0, _assertThisInitialized2.default)(_this), "openRight", function () {
      var _this$state$rowWidth2 = _this.state.rowWidth,
        rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;
      var _this$state$rightOffs3 = _this.state.rightOffset,
        rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;
      var rightWidth = rowWidth - rightOffset;
      _this.animateRow(_this.currentOffset(), -rightWidth);
    });
    var _dragX = new _reactNative.Animated.Value(0);
    _this.state = {
      dragX: _dragX,
      rowTranslation: new _reactNative.Animated.Value(0),
      rowState: 0,
      leftWidth: undefined,
      rightOffset: undefined,
      rowWidth: undefined
    };
    _this.updateAnimatedEvent(_props, _this.state);
    _this.onGestureEvent = _reactNative.Animated.event([{
      nativeEvent: {
        translationX: _dragX
      }
    }], {
      useNativeDriver: _props.useNativeAnimations
    });
    return _this;
  }
  (0, _createClass2.default)(Swipeable, [{
    key: "UNSAFE_componentWillUpdate",
    value: function UNSAFE_componentWillUpdate(props, state) {
      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {
        this.updateAnimatedEvent(props, state);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var rowState = this.state.rowState;
      var _this$props6 = this.props,
        children = _this$props6.children,
        renderLeftActions = _this$props6.renderLeftActions,
        renderRightActions = _this$props6.renderRightActions;
      var left = renderLeftActions && React.createElement(_reactNative.Animated.View, {
        style: [styles.leftActions, {
          transform: [{
            translateX: this.leftActionTranslate
          }]
        }]
      }, renderLeftActions(this.showLeftAction, this.transX), React.createElement(_reactNative.View, {
        onLayout: function onLayout(_ref4) {
          var nativeEvent = _ref4.nativeEvent;
          return _this2.setState({
            leftWidth: nativeEvent.layout.x
          });
        }
      }));
      var right = renderRightActions && React.createElement(_reactNative.Animated.View, {
        style: [styles.rightActions, {
          transform: [{
            translateX: this.rightActionTranslate
          }]
        }]
      }, renderRightActions(this.showRightAction, this.transX), React.createElement(_reactNative.View, {
        onLayout: function onLayout(_ref5) {
          var nativeEvent = _ref5.nativeEvent;
          return _this2.setState({
            rightOffset: nativeEvent.layout.x
          });
        }
      }));
      return React.createElement(_gestureHandlers.PanGestureHandler, _extends({
        activeOffsetX: [-10, 10]
      }, this.props, {
        onGestureEvent: this.onGestureEvent,
        onHandlerStateChange: this.onHandlerStateChange
      }), React.createElement(_reactNative.Animated.View, {
        onLayout: this.onRowLayout,
        style: [styles.container, this.props.containerStyle]
      }, left, right, React.createElement(_gestureHandlers.TapGestureHandler, {
        enabled: rowState !== 0,
        onHandlerStateChange: this.onTapHandlerStateChange
      }, React.createElement(_reactNative.Animated.View, {
        pointerEvents: rowState === 0 ? 'auto' : 'box-only',
        style: [{
          transform: [{
            translateX: this.transX
          }]
        }, this.props.childrenContainerStyle]
      }, children))));
    }
  }]);
  return Swipeable;
}(React.Component);
exports.default = Swipeable;
_defineProperty(Swipeable, "defaultProps", {
  friction: 1,
  overshootFriction: 1,
  useNativeAnimations: true
});
var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: 'hidden'
  },
  leftActions: (0, _extends3.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    flexDirection: _reactNative.I18nManager.isRTL ? 'row-reverse' : 'row'
  }),
  rightActions: (0, _extends3.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    flexDirection: _reactNative.I18nManager.isRTL ? 'row' : 'row-reverse'
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,