9aae7597f085fbf3cc3872d944775843
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var TurboModuleRegistry = _interopRequireWildcard(require("../TurboModule/TurboModuleRegistry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var NativeModule = TurboModuleRegistry.getEnforcing('DeviceInfo');
var NativeDeviceInfo = NativeModule;
var _default = NativeDeviceInfo;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIk5hdGl2ZU1vZHVsZSIsImdldEVuZm9yY2luZyIsIk5hdGl2ZURldmljZUluZm8iLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIk5hdGl2ZURldmljZUluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtUdXJib01vZHVsZX0gZnJvbSAnLi4vVHVyYm9Nb2R1bGUvUkNURXhwb3J0JztcbmltcG9ydCAqIGFzIFR1cmJvTW9kdWxlUmVnaXN0cnkgZnJvbSAnLi4vVHVyYm9Nb2R1bGUvVHVyYm9Nb2R1bGVSZWdpc3RyeSc7XG5cbnR5cGUgRGlzcGxheU1ldHJpY3NBbmRyb2lkID0gJFJlYWRPbmx5PHt8XG4gIHdpZHRoOiBudW1iZXIsXG4gIGhlaWdodDogbnVtYmVyLFxuICBzY2FsZTogbnVtYmVyLFxuICBmb250U2NhbGU6IG51bWJlcixcbiAgZGVuc2l0eURwaTogbnVtYmVyLFxufH0+O1xuXG5leHBvcnQgdHlwZSBEaXNwbGF5TWV0cmljcyA9ICRSZWFkT25seTx7fFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbiAgc2NhbGU6IG51bWJlcixcbiAgZm9udFNjYWxlOiBudW1iZXIsXG58fT47XG5cbmV4cG9ydCB0eXBlIERpbWVuc2lvbnNQYXlsb2FkID0gJFJlYWRPbmx5PHt8XG4gIHdpbmRvdz86IERpc3BsYXlNZXRyaWNzLFxuICBzY3JlZW4/OiBEaXNwbGF5TWV0cmljcyxcbiAgd2luZG93UGh5c2ljYWxQaXhlbHM/OiBEaXNwbGF5TWV0cmljc0FuZHJvaWQsXG4gIHNjcmVlblBoeXNpY2FsUGl4ZWxzPzogRGlzcGxheU1ldHJpY3NBbmRyb2lkLFxufH0+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWMgZXh0ZW5kcyBUdXJib01vZHVsZSB7XG4gICtnZXRDb25zdGFudHM6ICgpID0+IHt8XG4gICAgK0RpbWVuc2lvbnM6IERpbWVuc2lvbnNQYXlsb2FkLFxuICAgICtpc0lQaG9uZVhfZGVwcmVjYXRlZD86IGJvb2xlYW4sXG4gIHx9O1xufVxuXG5jb25zdCBOYXRpdmVNb2R1bGU6IFNwZWMgPSBUdXJib01vZHVsZVJlZ2lzdHJ5LmdldEVuZm9yY2luZzxTcGVjPignRGV2aWNlSW5mbycpO1xuXG5jb25zdCBOYXRpdmVEZXZpY2VJbmZvID0gTmF0aXZlTW9kdWxlO1xuXG5leHBvcnQgZGVmYXVsdCBOYXRpdmVEZXZpY2VJbmZvO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBO0FBR2IsSUFBQUMsbUJBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUEwRSxTQUFBQyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUgsd0JBQUFPLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQVQsT0FBQSxFQUFBUyxHQUFBLFVBQUFFLEtBQUEsR0FBQVAsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTSxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSCxHQUFBLFlBQUFFLEtBQUEsQ0FBQUUsR0FBQSxDQUFBSixHQUFBLFNBQUFLLE1BQUEsV0FBQUMscUJBQUEsR0FBQW5CLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFvQix3QkFBQSxXQUFBQyxHQUFBLElBQUFSLEdBQUEsUUFBQVEsR0FBQSxrQkFBQXJCLE1BQUEsQ0FBQXNCLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFYLEdBQUEsRUFBQVEsR0FBQSxTQUFBSSxJQUFBLEdBQUFOLHFCQUFBLEdBQUFuQixNQUFBLENBQUFvQix3QkFBQSxDQUFBUCxHQUFBLEVBQUFRLEdBQUEsY0FBQUksSUFBQSxLQUFBQSxJQUFBLENBQUFSLEdBQUEsSUFBQVEsSUFBQSxDQUFBQyxHQUFBLEtBQUExQixNQUFBLENBQUFDLGNBQUEsQ0FBQWlCLE1BQUEsRUFBQUcsR0FBQSxFQUFBSSxJQUFBLFlBQUFQLE1BQUEsQ0FBQUcsR0FBQSxJQUFBUixHQUFBLENBQUFRLEdBQUEsU0FBQUgsTUFBQSxDQUFBZCxPQUFBLEdBQUFTLEdBQUEsTUFBQUUsS0FBQSxJQUFBQSxLQUFBLENBQUFXLEdBQUEsQ0FBQWIsR0FBQSxFQUFBSyxNQUFBLFlBQUFBLE1BQUE7QUErQjFFLElBQU1TLFlBQWtCLEdBQUd0QixtQkFBbUIsQ0FBQ3VCLFlBQVksQ0FBTyxZQUFZLENBQUM7QUFFL0UsSUFBTUMsZ0JBQWdCLEdBQUdGLFlBQVk7QUFBQyxJQUFBRyxRQUFBLEdBRXZCRCxnQkFBZ0I7QUFBQTNCLE9BQUEsQ0FBQUUsT0FBQSxHQUFBMEIsUUFBQSJ9