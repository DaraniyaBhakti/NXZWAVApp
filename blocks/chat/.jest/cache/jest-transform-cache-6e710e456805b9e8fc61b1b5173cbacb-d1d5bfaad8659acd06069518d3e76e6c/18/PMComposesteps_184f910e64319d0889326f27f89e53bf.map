{"version":3,"file":"/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/PMCompose.steps.tsx","sources":["/Users/macm14/Documents/NXZWAW/nxzwav-294793-react-native/src/packages/blocks/chat/__tests__/step-definitions/PMCompose.steps.tsx"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,oDAAoD;AACpD,yFAAyF;AAEzF,gEAAgE;AAEhE,6BAA6B;AAC7B,+CAA+C;AAC/C,kDAAkD;AAElD,wBAAwB;AACxB,kBAAkB;AAClB,uEAAuE;AACvE,oBAAoB;AACpB,UAAU;AACV,2BAA2B;AAC3B,OAAO;AACP,oBAAoB;AACpB,KAAK;AAEL,kFAAkF;AAElF,qCAAqC;AACrC,uBAAuB;AACvB,2BAA2B;AAC3B,wEAAwE;AACxE,oEAAoE;AACpE,6EAA6E;AAC7E,uJAAuJ;AACvJ,6CAA6C;AAC7C,aAAa;AACb,QAAQ;AAER,qEAAqE;AACrE,4CAA4C;AAC5C,+BAA+B;AAE/B,qDAAqD;AACrD,oEAAoE;AACpE,UAAU;AAEV,8CAA8C;AAC9C,6DAA6D;AAG7D,UAAU;AACV,0DAA0D;AAC1D,+CAA+C;AAC/C,UAAU;AAEV,uDAAuD;AACvD,mHAAmH;AACnH,oEAAoE;AACpE,UAAU;AAEV,mEAAmE;AACnE,uDAAuD;AACvD,4DAA4D;AAC5D,WAAW;AACX,wCAAwC;AACxC,8CAA8C;AAE9C,sDAAsD;AACtD,2DAA2D;AAC3D,WAAW;AACX,uCAAuC;AACvC,6CAA6C;AAE7C,uDAAuD;AACvD,4DAA4D;AAC5D,WAAW;AACX,wCAAwC;AACxC,8CAA8C;AAE9C,uDAAuD;AACvD,4DAA4D;AAC5D,WAAW;AACX,wCAAwC;AACxC,8CAA8C;AAE9C,uDAAuD;AACvD,4DAA4D;AAC5D,WAAW;AACX,wCAAwC;AACxC,8CAA8C;AAE9C,oDAAoD;AACpD,yDAAyD;AACzD,WAAW;AACX,qCAAqC;AACrC,2CAA2C;AAC3C,UAAU;AACV,6DAA6D;AAC7D,wCAAwC;AACxC,+CAA+C;AAC/C,UAAU;AAEV,QAAQ;AACR,MAAM","sourcesContent":["// import { defineFeature, loadFeature } from \"jest-cucumber\";\n// import { shallow, ShallowWrapper } from \"enzyme\";\n// import DocumentPicker, { DocumentPickerResponse } from 'react-native-document-picker';\n\n// import * as helpers from \"../../../../framework/src/Helpers\";\n\n// import React from \"react\";\n// import PMCompose from \"../../src/PMCompose\";\n// const navigation = require(\"react-navigation\");\n\n// const screenProps = {\n//   navigation: {\n//     addListener: jest.fn().mockImplementation((event, callback) => {\n//       callback();\n//     }),\n//     navigate: jest.fn(),\n//   },\n//   id: \"PMCompose\"\n// };\n\n// const feature = loadFeature(\"./__tests__/features/PMCompose-scenario.feature\");\n\n// defineFeature(feature, (test) => {\n//   beforeEach(() => {\n//     jest.resetModules();\n//     jest.doMock(\"react-native\", () => ({ Platform: { OS: \"ios\" } }));\n//     jest.spyOn(helpers, \"getOS\").mockImplementation(() => \"ios\");\n//     // jest.spyOn(DocumentPicker, 'pickSingle').mockImplementation(() => {\n//     //   const response: DocumentPickerResponse = { name: \"testFile\", uri: 'testUri', size: 100, fileCopyUri: \"testCopyUri\", type: \"testFileType\" };\n//     //   return Promise.resolve(response);\n//     // });\n//   });\n\n//   test(\"User navigates to PMCompose\", ({ given, when, then }) => {\n//     let pmComposeWrapper: ShallowWrapper;\n//     let instance: PMCompose;\n\n//     given(\"I am a User loading PMCompose\", () => {\n//       pmComposeWrapper = shallow(<PMCompose {...screenProps} />);\n//     });\n\n//     when(\"I navigate to PMCompose\", () => {\n//       instance = pmComposeWrapper.instance() as PMCompose;\n\n\n//     });\n//     then('PMCompose will load with out errors', () => {\n//       expect(pmComposeWrapper).toBeTruthy();\n//     });\n\n//     then('I can enter text with out errors', () => {\n//       let textInputComponent = pmComposeWrapper.findWhere((node) => node.prop('testID') === 'textInputMessage');\n//       textInputComponent.simulate('changeText', 'hello@aol.com');\n//     });\n\n//     then('I can select the button with with out errors', () => {\n//       let btnImgUpload = pmComposeWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnImgUpload\",\n//       );\n//       btnImgUpload.simulate(\"press\");\n//       expect(btnImgUpload).toHaveLength(1);\n\n//       let btnOption50 = pmComposeWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnOption50\",\n//       );\n//       btnOption50.simulate(\"press\");\n//       expect(btnOption50).toHaveLength(1);\n\n//       let btnOption100 = pmComposeWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnOption100\",\n//       );\n//       btnOption100.simulate(\"press\");\n//       expect(btnOption100).toHaveLength(1);\n\n//       let btnOption250 = pmComposeWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnOption250\",\n//       );\n//       btnOption250.simulate(\"press\");\n//       expect(btnOption250).toHaveLength(1);\n\n//       let btnPmCompose = pmComposeWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnPmCompose\",\n//       );\n//       btnPmCompose.simulate(\"press\");\n//       expect(btnPmCompose).toHaveLength(1);\n\n//       let btnCancel = pmComposeWrapper.findWhere(\n//         (node) => node.prop(\"testID\") === \"btnCancel\",\n//       );\n//       btnCancel.simulate(\"press\");\n//       expect(btnCancel).toHaveLength(1);\n//     });\n//     then('I can leave the screen with out errors', () => {\n//       instance.componentWillUnmount()\n//       expect(pmComposeWrapper).toBeTruthy();\n//     });\n\n//   });\n// });\n"]}