2616a6c7b0ebed91f6c2445b9d100793
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var invariant = require('invariant');
var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    (0, _classCallCheck2.default)(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }
  (0, _createClass2.default)(EventSubscriptionVendor, [{
    key: "addSubscription",
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: "removeAllSubscriptions",
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: "getSubscriptionsForType",
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();
module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiaW52YXJpYW50IiwiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IiLCJkZWZhdWx0IiwiX3N1YnNjcmlwdGlvbnNGb3JUeXBlIiwiX2N1cnJlbnRTdWJzY3JpcHRpb24iLCJrZXkiLCJ2YWx1ZSIsImFkZFN1YnNjcmlwdGlvbiIsImV2ZW50VHlwZSIsInN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJsZW5ndGgiLCJwdXNoIiwicmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyIsInVuZGVmaW5lZCIsInJlbW92ZVN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbnNGb3JUeXBlIiwiZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmltcG9ydCB0eXBlIEV2ZW50U3Vic2NyaXB0aW9uIGZyb20gJy4vRXZlbnRTdWJzY3JpcHRpb24nO1xuXG4vKipcbiAqIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIHN0b3JlcyBhIHNldCBvZiBFdmVudFN1YnNjcmlwdGlvbnMgdGhhdCBhcmVcbiAqIHN1YnNjcmliZWQgdG8gYSBwYXJ0aWN1bGFyIGV2ZW50IHR5cGUuXG4gKi9cbmNsYXNzIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIHtcbiAgX3N1YnNjcmlwdGlvbnNGb3JUeXBlOiBPYmplY3Q7XG4gIF9jdXJyZW50U3Vic2NyaXB0aW9uOiA/RXZlbnRTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB7fTtcbiAgICB0aGlzLl9jdXJyZW50U3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc3Vic2NyaXB0aW9uIGtleWVkIGJ5IGFuIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHBhcmFtIHtFdmVudFN1YnNjcmlwdGlvbn0gc3Vic2NyaXB0aW9uXG4gICAqL1xuICBhZGRTdWJzY3JpcHRpb24oXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgc3Vic2NyaXB0aW9uOiBFdmVudFN1YnNjcmlwdGlvbixcbiAgKTogRXZlbnRTdWJzY3JpcHRpb24ge1xuICAgIGludmFyaWFudChcbiAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpYmVyID09PSB0aGlzLFxuICAgICAgJ1RoZSBzdWJzY3JpYmVyIG9mIHRoZSBzdWJzY3JpcHRpb24gaXMgaW5jb3JyZWN0bHkgc2V0LicsXG4gICAgKTtcbiAgICBpZiAoIXRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0gPSBbXTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5sZW5ndGg7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgc3Vic2NyaXB0aW9uLmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICBzdWJzY3JpcHRpb24ua2V5ID0ga2V5O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGJ1bGsgc2V0IG9mIHRoZSBzdWJzY3JpcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGV2ZW50VHlwZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHR5cGUgd2hvc2VcbiAgICogICByZWdpc3RlcmVkIHN1cHNjcmlwdGlvbnMgdG8gcmVtb3ZlLCBpZiBudWxsIHJlbW92ZSBhbGwgc3Vic2NyaXB0aW9ucy5cbiAgICovXG4gIHJlbW92ZUFsbFN1YnNjcmlwdGlvbnMoZXZlbnRUeXBlOiA/c3RyaW5nKSB7XG4gICAgaWYgKGV2ZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi4gSW5zdGVhZCBvZiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIGNhbGxcbiAgICogYHN1YnNjcmlwdGlvbi5yZW1vdmUoKWAgZGlyZWN0bHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdWJzY3JpcHRpb25cbiAgICovXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb246IE9iamVjdCkge1xuICAgIGNvbnN0IGV2ZW50VHlwZSA9IHN1YnNjcmlwdGlvbi5ldmVudFR5cGU7XG4gICAgY29uc3Qga2V5ID0gc3Vic2NyaXB0aW9uLmtleTtcblxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnNGb3JUeXBlID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvclR5cGUpIHtcbiAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zRm9yVHlwZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBzdWJzY3JpcHRpb25zIHRoYXQgYXJlIGN1cnJlbnRseSByZWdpc3RlcmVkIGZvciB0aGVcbiAgICogZ2l2ZW4gZXZlbnQgdHlwZS5cbiAgICpcbiAgICogTm90ZTogVGhpcyBhcnJheSBjYW4gYmUgcG90ZW50aWFsbHkgc3BhcnNlIGFzIHN1YnNjcmlwdGlvbnMgYXJlIGRlbGV0ZWRcbiAgICogZnJvbSBpdCB3aGVuIHRoZXkgYXJlIHJlbW92ZWQuXG4gICAqXG4gICAqIFRPRE86IFRoaXMgcmV0dXJucyBhIG51bGxhYmxlIGFycmF5LiB3YXQ/XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHJldHVybnMgez9hcnJheX1cbiAgICovXG4gIGdldFN1YnNjcmlwdGlvbnNGb3JUeXBlKGV2ZW50VHlwZTogc3RyaW5nKTogP1tFdmVudFN1YnNjcmlwdGlvbl0ge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRTdWJzY3JpcHRpb25WZW5kb3I7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFYixJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFBQyxJQVFqQ0ksdUJBQXVCO0VBSTNCLFNBQUFBLHdCQUFBLEVBQWM7SUFBQSxJQUFBSCxnQkFBQSxDQUFBSSxPQUFBLFFBQUFELHVCQUFBO0lBQ1osSUFBSSxDQUFDRSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRyxJQUFJO0VBQ2xDO0VBQUMsSUFBQUwsYUFBQSxDQUFBRyxPQUFBLEVBQUFELHVCQUFBO0lBQUFJLEdBQUE7SUFBQUMsS0FBQSxFQVFELFNBQUFDLGdCQUNFQyxTQUFpQixFQUNqQkMsWUFBK0IsRUFDWjtNQUNuQlQsU0FBUyxDQUNQUyxZQUFZLENBQUNDLFVBQVUsS0FBSyxJQUFJLEVBQ2hDLHdEQUNGLENBQUM7TUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDUCxxQkFBcUIsQ0FBQ0ssU0FBUyxDQUFDLEVBQUU7UUFDMUMsSUFBSSxDQUFDTCxxQkFBcUIsQ0FBQ0ssU0FBUyxDQUFDLEdBQUcsRUFBRTtNQUM1QztNQUNBLElBQU1ILEdBQUcsR0FBRyxJQUFJLENBQUNGLHFCQUFxQixDQUFDSyxTQUFTLENBQUMsQ0FBQ0csTUFBTTtNQUN4RCxJQUFJLENBQUNSLHFCQUFxQixDQUFDSyxTQUFTLENBQUMsQ0FBQ0ksSUFBSSxDQUFDSCxZQUFZLENBQUM7TUFDeERBLFlBQVksQ0FBQ0QsU0FBUyxHQUFHQSxTQUFTO01BQ2xDQyxZQUFZLENBQUNKLEdBQUcsR0FBR0EsR0FBRztNQUN0QixPQUFPSSxZQUFZO0lBQ3JCO0VBQUM7SUFBQUosR0FBQTtJQUFBQyxLQUFBLEVBUUQsU0FBQU8sdUJBQXVCTCxTQUFrQixFQUFFO01BQ3pDLElBQUlBLFNBQVMsS0FBS00sU0FBUyxFQUFFO1FBQzNCLElBQUksQ0FBQ1gscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO01BQ2pDLENBQUMsTUFBTTtRQUNMLE9BQU8sSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQ0ssU0FBUyxDQUFDO01BQzlDO0lBQ0Y7RUFBQztJQUFBSCxHQUFBO0lBQUFDLEtBQUEsRUFRRCxTQUFBUyxtQkFBbUJOLFlBQW9CLEVBQUU7TUFDdkMsSUFBTUQsU0FBUyxHQUFHQyxZQUFZLENBQUNELFNBQVM7TUFDeEMsSUFBTUgsR0FBRyxHQUFHSSxZQUFZLENBQUNKLEdBQUc7TUFFNUIsSUFBTVcsb0JBQW9CLEdBQUcsSUFBSSxDQUFDYixxQkFBcUIsQ0FBQ0ssU0FBUyxDQUFDO01BQ2xFLElBQUlRLG9CQUFvQixFQUFFO1FBQ3hCLE9BQU9BLG9CQUFvQixDQUFDWCxHQUFHLENBQUM7TUFDbEM7SUFDRjtFQUFDO0lBQUFBLEdBQUE7SUFBQUMsS0FBQSxFQWNELFNBQUFXLHdCQUF3QlQsU0FBaUIsRUFBd0I7TUFDL0QsT0FBTyxJQUFJLENBQUNMLHFCQUFxQixDQUFDSyxTQUFTLENBQUM7SUFDOUM7RUFBQztFQUFBLE9BQUFQLHVCQUFBO0FBQUE7QUFHSGlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbEIsdUJBQXVCIn0=