{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","invariant","EventHolder","default","_heldEvents","_currentEventKey","key","value","holdEvent","eventType","eventsOfType","index","length","_len","arguments","args","Array","_key","push","emitToListener","listener","context","_this","origEventKey","forEach","eventHeld","apply","releaseCurrentEvent","releaseEvent","token","releaseEventType","type","module","exports"],"sources":["EventHolder.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nclass EventHolder {\n  _heldEvents: Object;\n  _currentEventKey: ?Object;\n\n  constructor() {\n    this._heldEvents = {};\n    this._currentEventKey = null;\n  }\n\n  /**\n   * Holds a given event for processing later.\n   *\n   * TODO: Annotate return type better. The structural type of the return here\n   *       is pretty obvious.\n   *\n   * @param {string} eventType - Name of the event to hold and later emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   * @return {object} Token that can be used to release the held event\n   *\n   * @example\n   *\n   *   holder.holdEvent({someEvent: 'abc'});\n   *\n   *   holder.emitToHandler({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *     }\n   *   }); //logs 'abc'\n   *\n   */\n  holdEvent(\n    eventType: string,\n    ...args: any\n  ): $TEMPORARY$object<{|eventType: string, index: $FlowFixMeEmpty|}> {\n    this._heldEvents[eventType] = this._heldEvents[eventType] || [];\n    const eventsOfType = this._heldEvents[eventType];\n    const key = {\n      eventType: eventType,\n      index: eventsOfType.length,\n    };\n    eventsOfType.push(args);\n    return key;\n  }\n\n  /**\n   * Emits the held events of the specified type to the given listener.\n   *\n   * @param {?string} eventType - Optional name of the events to replay\n   * @param {function} listener - The listener to which to dispatch the event\n   * @param {?object} context - Optional context object to use when invoking\n   *   the listener\n   */\n  emitToListener(eventType: ?string, listener: Function, context: ?Object) {\n    const eventsOfType = this._heldEvents[eventType];\n    if (!eventsOfType) {\n      return;\n    }\n    const origEventKey = this._currentEventKey;\n    eventsOfType.forEach((/*?array*/ eventHeld, /*number*/ index) => {\n      if (!eventHeld) {\n        return;\n      }\n      this._currentEventKey = {\n        eventType: eventType,\n        index: index,\n      };\n      listener.apply(context, eventHeld);\n    });\n    this._currentEventKey = origEventKey;\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to release\n   * the last event that was invoked, so that it is no longer \"held\".\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   */\n  releaseCurrentEvent() {\n    invariant(\n      this._currentEventKey !== null,\n      'Not in an emitting cycle; there is no current event',\n    );\n    this._currentEventKey && this.releaseEvent(this._currentEventKey);\n  }\n\n  /**\n   * Releases the event corresponding to the handle that was returned when the\n   * event was first held.\n   *\n   * @param {object} token - The token returned from holdEvent\n   */\n  releaseEvent(token: Object) {\n    delete this._heldEvents[token.eventType][token.index];\n  }\n\n  /**\n   * Releases all events of a certain type.\n   *\n   * @param {string} type\n   */\n  releaseEventType(type: string) {\n    this._heldEvents[type] = [];\n  }\n}\n\nmodule.exports = EventHolder;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AAEb,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAW,CAAC;AAAC,IAEjCI,WAAW;EAIf,SAAAA,YAAA,EAAc;IAAA,IAAAH,gBAAA,CAAAI,OAAA,QAAAD,WAAA;IACZ,IAAI,CAACE,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,gBAAgB,GAAG,IAAI;EAC9B;EAAC,IAAAL,aAAA,CAAAG,OAAA,EAAAD,WAAA;IAAAI,GAAA;IAAAC,KAAA,EAuBD,SAAAC,UACEC,SAAiB,EAEiD;MAClE,IAAI,CAACL,WAAW,CAACK,SAAS,CAAC,GAAG,IAAI,CAACL,WAAW,CAACK,SAAS,CAAC,IAAI,EAAE;MAC/D,IAAMC,YAAY,GAAG,IAAI,CAACN,WAAW,CAACK,SAAS,CAAC;MAChD,IAAMH,GAAG,GAAG;QACVG,SAAS,EAAEA,SAAS;QACpBE,KAAK,EAAED,YAAY,CAACE;MACtB,CAAC;MAAC,SAAAC,IAAA,GAAAC,SAAA,CAAAF,MAAA,EAPCG,IAAI,OAAAC,KAAA,CAAAH,IAAA,OAAAA,IAAA,WAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;QAAJF,IAAI,CAAAE,IAAA,QAAAH,SAAA,CAAAG,IAAA;MAAA;MAQPP,YAAY,CAACQ,IAAI,CAACH,IAAI,CAAC;MACvB,OAAOT,GAAG;IACZ;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAUD,SAAAY,eAAeV,SAAkB,EAAEW,QAAkB,EAAEC,OAAgB,EAAE;MAAA,IAAAC,KAAA;MACvE,IAAMZ,YAAY,GAAG,IAAI,CAACN,WAAW,CAACK,SAAS,CAAC;MAChD,IAAI,CAACC,YAAY,EAAE;QACjB;MACF;MACA,IAAMa,YAAY,GAAG,IAAI,CAAClB,gBAAgB;MAC1CK,YAAY,CAACc,OAAO,CAAC,UAAYC,SAAS,EAAad,KAAK,EAAK;QAC/D,IAAI,CAACc,SAAS,EAAE;UACd;QACF;QACAH,KAAI,CAACjB,gBAAgB,GAAG;UACtBI,SAAS,EAAEA,SAAS;UACpBE,KAAK,EAAEA;QACT,CAAC;QACDS,QAAQ,CAACM,KAAK,CAACL,OAAO,EAAEI,SAAS,CAAC;MACpC,CAAC,CAAC;MACF,IAAI,CAACpB,gBAAgB,GAAGkB,YAAY;IACtC;EAAC;IAAAjB,GAAA;IAAAC,KAAA,EAUD,SAAAoB,oBAAA,EAAsB;MACpB1B,SAAS,CACP,IAAI,CAACI,gBAAgB,KAAK,IAAI,EAC9B,qDACF,CAAC;MACD,IAAI,CAACA,gBAAgB,IAAI,IAAI,CAACuB,YAAY,CAAC,IAAI,CAACvB,gBAAgB,CAAC;IACnE;EAAC;IAAAC,GAAA;IAAAC,KAAA,EAQD,SAAAqB,aAAaC,KAAa,EAAE;MAC1B,OAAO,IAAI,CAACzB,WAAW,CAACyB,KAAK,CAACpB,SAAS,CAAC,CAACoB,KAAK,CAAClB,KAAK,CAAC;IACvD;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAOD,SAAAuB,iBAAiBC,IAAY,EAAE;MAC7B,IAAI,CAAC3B,WAAW,CAAC2B,IAAI,CAAC,GAAG,EAAE;IAC7B;EAAC;EAAA,OAAA7B,WAAA;AAAA;AAGH8B,MAAM,CAACC,OAAO,GAAG/B,WAAW"}