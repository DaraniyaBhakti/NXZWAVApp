a408cf6f9de8be1843502c0c079ef057
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleErrorHandler = simpleErrorHandler;
exports.simpleLogger = simpleLogger;
exports.noop = noop;
exports.factoryOptions = void 0;
var isDevelopment = process && process.env && process.env.NODE_ENV === 'development' || __DEV__;
var factoryOptions = {
  logger: isDevelopment,
  errorHandler: isDevelopment
};
exports.factoryOptions = factoryOptions;
function simpleErrorHandler(e) {
  var errorMessage = e instanceof Error ? e.message : e;
  console.error(errorMessage);
}
function simpleLogger(logInfo) {
  var log = function log(message) {
    console.log("[AsyncStorage] " + message);
  };
  var action = logInfo.action,
    key = logInfo.key,
    value = logInfo.value;
  switch (action) {
    case 'read-single':
      {
        log("Reading a value for a key: " + key);
        break;
      }
    case 'save-single':
      {
        log("Saving a value: " + value + " for a key: " + key);
        break;
      }
    case 'delete-single':
      {
        log("Removing value at a key: " + key);
        break;
      }
    case 'read-many':
      {
        log("Reading values for keys: " + key);
        break;
      }
    case 'save-many':
      {
        log("Saving values " + value + " for keys: " + key);
        break;
      }
    case 'delete-many':
      {
        log("Removing multiple values for keys: " + key);
        break;
      }
    case 'drop':
      {
        log('Dropping whole database');
        break;
      }
    case 'keys':
      {
        log('Retrieving keys');
        break;
      }
    default:
      {
        log("Unknown action: " + action);
      }
  }
}
function noop() {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0RldmVsb3BtZW50IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiX19ERVZfXyIsImZhY3RvcnlPcHRpb25zIiwibG9nZ2VyIiwiZXJyb3JIYW5kbGVyIiwic2ltcGxlRXJyb3JIYW5kbGVyIiwiZSIsImVycm9yTWVzc2FnZSIsIkVycm9yIiwibWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsInNpbXBsZUxvZ2dlciIsImxvZ0luZm8iLCJsb2ciLCJhY3Rpb24iLCJrZXkiLCJ2YWx1ZSIsIm5vb3AiXSwic291cmNlcyI6WyIuLi9zcmMvZGVmYXVsdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFJlYWN0IE5hdGl2ZSBDb21tdW5pdHkuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbmltcG9ydCB7RmFjdG9yeU9wdGlvbnMsIExvZ2dlckFjdGlvbn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBpc0RldmVsb3BtZW50ID1cbiAgLy8gQHRzLWlnbm9yZVxuICAocHJvY2VzcyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JykgfHwgX19ERVZfXztcblxuZXhwb3J0IGNvbnN0IGZhY3RvcnlPcHRpb25zOiBGYWN0b3J5T3B0aW9ucyA9IHtcbiAgbG9nZ2VyOiBpc0RldmVsb3BtZW50LFxuICBlcnJvckhhbmRsZXI6IGlzRGV2ZWxvcG1lbnQsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlRXJyb3JIYW5kbGVyKGU6IEVycm9yIHwgc3RyaW5nKSB7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBlO1xuICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVMb2dnZXIobG9nSW5mbzogTG9nZ2VyQWN0aW9uKSB7XG4gIGNvbnN0IGxvZyA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgW0FzeW5jU3RvcmFnZV0gJHttZXNzYWdlfWApO1xuICB9O1xuXG4gIGNvbnN0IHthY3Rpb24sIGtleSwgdmFsdWV9ID0gbG9nSW5mbztcblxuICBzd2l0Y2ggKGFjdGlvbikge1xuICAgIGNhc2UgJ3JlYWQtc2luZ2xlJzoge1xuICAgICAgbG9nKGBSZWFkaW5nIGEgdmFsdWUgZm9yIGEga2V5OiAke2tleX1gKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICdzYXZlLXNpbmdsZSc6IHtcbiAgICAgIGxvZyhgU2F2aW5nIGEgdmFsdWU6ICR7dmFsdWV9IGZvciBhIGtleTogJHtrZXl9YCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAnZGVsZXRlLXNpbmdsZSc6IHtcbiAgICAgIGxvZyhgUmVtb3ZpbmcgdmFsdWUgYXQgYSBrZXk6ICR7a2V5fWApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgJ3JlYWQtbWFueSc6IHtcbiAgICAgIGxvZyhgUmVhZGluZyB2YWx1ZXMgZm9yIGtleXM6ICR7a2V5fWApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgJ3NhdmUtbWFueSc6IHtcbiAgICAgIGxvZyhgU2F2aW5nIHZhbHVlcyAke3ZhbHVlfSBmb3Iga2V5czogJHtrZXl9YCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAnZGVsZXRlLW1hbnknOiB7XG4gICAgICBsb2coYFJlbW92aW5nIG11bHRpcGxlIHZhbHVlcyBmb3Iga2V5czogJHtrZXl9YCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAnZHJvcCc6IHtcbiAgICAgIGxvZygnRHJvcHBpbmcgd2hvbGUgZGF0YWJhc2UnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICdrZXlzJzoge1xuICAgICAgbG9nKCdSZXRyaWV2aW5nIGtleXMnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBsb2coYFVua25vd24gYWN0aW9uOiAke2FjdGlvbn1gKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7XG4gIC8vIG5vb3Bcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBVUEsSUFBTUEsYUFBYSxHQUVoQkMsT0FBTyxJQUFJQSxPQUFPLENBQUNDLEdBQW5CLElBQTBCRCxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixhQUFwRCxJQUFzRUMsT0FGeEU7QUFJTyxJQUFNQyxjQUE4QixHQUFHO0VBQzVDQyxNQUFNLEVBQUVOLGFBRG9DO0VBRTVDTyxZQUFZLEVBQUVQO0FBRjhCLENBQXZDOztBQUtBLFNBQVNRLGtCQUFUQSxDQUE0QkMsQ0FBNUIsRUFBK0M7RUFDcEQsSUFBSUMsWUFBWSxHQUFHRCxDQUFDLFlBQVlFLEtBQWIsR0FBcUJGLENBQUMsQ0FBQ0csT0FBdkIsR0FBaUNILENBQXBEO0VBQ0FJLE9BQU8sQ0FBQ0MsS0FBUixDQUFjSixZQUFkO0FBQ0Q7QUFFTSxTQUFTSyxZQUFUQSxDQUFzQkMsT0FBdEIsRUFBNkM7RUFDbEQsSUFBTUMsR0FBRyxHQUFJLFNBQVBBLEdBQUdBLENBQUlMLE9BQUQsRUFBcUI7SUFDL0JDLE9BQU8sQ0FBQ0ksR0FBUixxQkFBOEJMLE9BQTlCO0VBQ0QsQ0FGRDtFQUlBLElBQU9NLE1BQUQsR0FBdUJGLE9BQTdCLENBQU9FLE1BQUQ7SUFBU0MsR0FBVCxHQUF1QkgsT0FBN0IsQ0FBZUcsR0FBVDtJQUFjQyxLQUFBLEdBQVNKLE9BQTdCLENBQW9CSSxLQUFBO0VBRXBCLFFBQVFGLE1BQVI7SUFDRSxLQUFLLGFBQUw7TUFBb0I7UUFDbEJELEdBQUcsaUNBQStCRSxHQUEvQixDQUFIO1FBQ0E7TUFDRDtJQUNELEtBQUssYUFBTDtNQUFvQjtRQUNsQkYsR0FBRyxzQkFBb0JHLEtBQU0sb0JBQWNELEdBQXhDLENBQUg7UUFDQTtNQUNEO0lBQ0QsS0FBSyxlQUFMO01BQXNCO1FBQ3BCRixHQUFHLCtCQUE2QkUsR0FBN0IsQ0FBSDtRQUNBO01BQ0Q7SUFDRCxLQUFLLFdBQUw7TUFBa0I7UUFDaEJGLEdBQUcsK0JBQTZCRSxHQUE3QixDQUFIO1FBQ0E7TUFDRDtJQUNELEtBQUssV0FBTDtNQUFrQjtRQUNoQkYsR0FBRyxvQkFBa0JHLEtBQU0sbUJBQWFELEdBQXJDLENBQUg7UUFDQTtNQUNEO0lBQ0QsS0FBSyxhQUFMO01BQW9CO1FBQ2xCRixHQUFHLHlDQUF1Q0UsR0FBdkMsQ0FBSDtRQUNBO01BQ0Q7SUFDRCxLQUFLLE1BQUw7TUFBYTtRQUNYRixHQUFHLENBQUMseUJBQUQsQ0FBSDtRQUNBO01BQ0Q7SUFDRCxLQUFLLE1BQUw7TUFBYTtRQUNYQSxHQUFHLENBQUMsaUJBQUQsQ0FBSDtRQUNBO01BQ0Q7SUFDRDtNQUFTO1FBQ1BBLEdBQUcsc0JBQW9CQyxNQUFwQixDQUFIO01BQ0Q7RUFuQ0g7QUFxQ0Q7QUFFTSxTQUFTRyxJQUFUQSxDQUFBLEVBQWdCLENBRXRCIn0=