0811227337c8ddccd2f00d0feaf05106
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_cucumber_1 = require("jest-cucumber");
const enzyme_1 = require("enzyme");
const helpersChat = __importStar(require("../../../../framework/src/Helpers"));
const RunEngine_1 = require("../../../../framework/src/RunEngine");
const react_1 = __importDefault(require("react"));
const Chat_1 = __importDefault(require("../../src/Chat"));
const MessageEnum_1 = __importStar(require("../../../../framework/src/Messages/MessageEnum"));
const Message_1 = require("../../../../framework/src/Message");
const screenPropsChat = {
    navigation: {
        navigate: jest.fn(),
        setOptions: jest.fn(),
        push: jest.fn(),
        addListener: jest.fn().mockImplementation((event, callback) => {
            callback();
        }),
        goBack: jest.fn(),
        state: {
            params: {
                receiverUser: "ReceiveUser",
                userID: "7",
                userName: "name",
                userPic: "",
                userPoints: "12",
                userRole: "designer"
            },
        },
    },
    id: "Chat",
};
const featureChat = jest_cucumber_1.loadFeature("./__tests__/features/Chat-scenario.feature");
jest_cucumber_1.defineFeature(featureChat, (test) => {
    beforeEach(() => {
        jest.resetModules();
        jest.clearAllMocks();
        jest.doMock("react-native", () => ({ Platform: { OS: "ios" } }));
        jest.spyOn(helpersChat, "getOS").mockImplementation(() => "ios");
        jest.spyOn(RunEngine_1.runEngine, "sendMessage");
    });
    test("User navigates to Chat", ({ given, when, then }) => {
        let chatWrapper;
        let instanceChat;
        given("I am a User loading Chat", () => {
            chatWrapper = enzyme_1.shallow(react_1.default.createElement(Chat_1.default, Object.assign({}, screenPropsChat)));
        });
        when("I navigate to Chat", () => {
            instanceChat = chatWrapper.instance();
            jest.spyOn(instanceChat, "send");
            let dmSelectedChat = true;
            instanceChat.state = {
                // Customizable Area Start
                token: "",
                accountId: -1,
                chatName: "",
                chatList: [],
                isVisibleModal: false,
                dmSelected: dmSelectedChat,
                pmSelected: !dmSelectedChat,
                txtInputValue: "",
                messageConversation: "",
            };
            let btnBackChat = chatWrapper.findWhere((node) => node.prop("testID") === "btnBackChat");
            btnBackChat.simulate("press");
            let textInputComponentChat = chatWrapper.findWhere((node) => node.prop("testID") === "textInputComponentChat");
            textInputComponentChat.simulate("changeText", "user");
            instanceChat.onPressSubmitting();
        });
        then("User can select Message typ", () => {
            let btnDmChat = chatWrapper.findWhere((node) => node.prop("testID") === "btnDmChat");
            btnDmChat.simulate("press");
            let btnPmChat = chatWrapper.findWhere((node) => node.prop("testID") === "btnPmChat");
            btnPmChat.simulate("press");
            let btnNewMessage = chatWrapper.findWhere((node) => node.prop("testID") === "btnNewMessage");
            btnNewMessage.simulate("press");
        });
        then("Chat conversation will load", () => {
            let itemConversation = {
                item: {
                    attributes: {
                        id: 1,
                        created_at: "2023-05-11T13:35:01.045Z",
                        updated_at: "2023-05-12T11:07:19.753Z",
                        profile_info: {
                            profile_pic: null,
                            user_name: "Mr. Fabian Ward"
                        },
                        message: {
                            id: 724,
                            message: "test_message",
                            created_at: "2023-05-12T11:07:19.751Z",
                            updated_at: "2023-05-12T11:07:19.751Z",
                            is_mark_read: true,
                            attachment: null,
                            conversation_id: 240,
                            user_profile_info_id: 475
                        }
                    },
                }
            };
            let flatListConversation = chatWrapper.findWhere((node) => node.prop("testID") === "swipeListViewConversation");
            let rowItemConversation = flatListConversation
                .renderProp("renderItem")(itemConversation)
                .findWhere((node) => node.prop("testID") === "rowItemConversation");
            rowItemConversation.simulate("press");
            let rowHiddenItemMessage = flatListConversation
                .renderProp("renderHiddenItem")(itemConversation)
                .findWhere((node) => node.prop("testID") === "rowHiddenItemMessage");
            rowHiddenItemMessage.simulate("press");
            // instanceChat.handleRowItemOnMessagePress(itemConversation.item)
            let rowHiddenItemDelete = flatListConversation
                .renderProp("renderHiddenItem")(itemConversation)
                .findWhere((node) => node.prop("testID") === "rowHiddenItemDelete");
            rowHiddenItemDelete.simulate("press");
            let rowItemKeyExtractor = flatListConversation
                .renderProp("keyExtractor")(itemConversation.item);
            let touchOnMainContainerChat = chatWrapper.findWhere((node) => node.prop("testID") === "touchOnMainContainerChat");
            touchOnMainContainerChat.simulate("press");
            instanceChat.hideKeyboard();
        });
        when("I write in textInput and press submit", () => {
            instanceChat.render();
        });
        then("Api call and show chat list", () => __awaiter(void 0, void 0, void 0, function* () {
            instanceChat.setState({ dmSelected: true });
            instanceChat.getChatList("eyJhbGciOiJIUzUxMiJ9.eyJpZCI6MzIxLCJleHAiOjE3MTUzMjY3NTB9.y_MHa8FuNf5s6W9SkhcIKUCLwZdlTRajumrfzciVlBnxzmp330huF83ST449ga4SPWcMqDYAm8SjIexxxwzJAw");
            const msgDeleteAPI = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            msgDeleteAPI.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), msgDeleteAPI.messageId);
            msgDeleteAPI.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), {
                data: {
                    message: "Conversation Deleted"
                }
            });
            instanceChat.deleteConversationApiCallId = msgDeleteAPI.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", msgDeleteAPI);
        }));
        when("I click on top button", () => {
            const messageNavigationChat = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.NavigationMessage));
            messageNavigationChat.addData(MessageEnum_1.getName(MessageEnum_1.default.NavigationPropsMessage), {
                messageType: "readMessage",
                conversationID: "1"
            });
            instanceChat.send(messageNavigationChat);
            instanceChat.setState({ txtInputValue: "ru" });
            instanceChat.getConversationList();
            const msgGetConversations = new Message_1.Message(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceMessage));
            msgGetConversations.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceDataMessage), msgGetConversations.messageId);
            msgGetConversations.addData(MessageEnum_1.getName(MessageEnum_1.default.RestAPIResponceSuccessMessage), {
                data: {
                    message: "No conversations Found"
                }
            });
            instanceChat.getConversationListApiCallId = msgGetConversations.messageId;
            RunEngine_1.runEngine.sendMessage("Unit Test", msgGetConversations);
            instanceChat.deleteConversation("1");
        });
        then("it navigates on next screen", () => {
            instanceChat.setState({ dmSelected: false, pmSelected: true });
            instanceChat.getConversationList();
            instanceChat.setState({ dmSelected: true, pmSelected: false });
            instanceChat.getConversationList();
        });
        then("I can leave the screen", () => {
            instanceChat.componentWillUnmount();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,