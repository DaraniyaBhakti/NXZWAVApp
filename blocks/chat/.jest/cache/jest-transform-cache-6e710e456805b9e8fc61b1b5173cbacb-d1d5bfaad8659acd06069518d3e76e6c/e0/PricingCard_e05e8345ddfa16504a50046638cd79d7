16c4c0b5c060ae159a68268c9e8c20a2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PricingCard = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _helpers = require("../helpers");
var _config = require("../config");
var _Text = _interopRequireDefault(require("../text/Text"));
var _Button = _interopRequireDefault(require("../buttons/Button"));
var _Icon = _interopRequireDefault(require("../icons/Icon"));
var _excluded = ["theme"],
  _excluded2 = ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleStyle", "pricingStyle", "infoStyle", "onButtonPress"];
var PricingCard = function PricingCard(props) {
  var theme = props.theme,
    rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var containerStyle = rest.containerStyle,
    wrapperStyle = rest.wrapperStyle,
    title = rest.title,
    price = rest.price,
    info = rest.info,
    button = rest.button,
    _rest$color = rest.color,
    color = _rest$color === void 0 ? theme.colors.primary : _rest$color,
    titleStyle = rest.titleStyle,
    pricingStyle = rest.pricingStyle,
    infoStyle = rest.infoStyle,
    onButtonPress = rest.onButtonPress,
    attributes = (0, _objectWithoutProperties2.default)(rest, _excluded2);
  return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, attributes, {
    style: _reactNative.StyleSheet.flatten([styles.container(theme), containerStyle && containerStyle])
  }), _react.default.createElement(_reactNative.View, {
    style: _reactNative.StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle])
  }, _react.default.createElement(_Text.default, {
    testID: "pricingCardTitle",
    style: _reactNative.StyleSheet.flatten([styles.pricingTitle, titleStyle, {
      color: color
    }])
  }, title), _react.default.createElement(_Text.default, {
    style: _reactNative.StyleSheet.flatten([styles.pricingPrice, pricingStyle])
  }, price), info.map(function (item) {
    return _react.default.createElement(_Text.default, {
      key: item,
      style: _reactNative.StyleSheet.flatten([styles.pricingInfo(theme), infoStyle])
    }, item);
  }), _react.default.createElement(_Button.default, {
    title: button.title,
    buttonStyle: _reactNative.StyleSheet.flatten([styles.button, button.buttonStyle, {
      backgroundColor: color
    }]),
    titleStyle: button.titleStyle,
    onPress: onButtonPress,
    icon: _react.default.createElement(_Icon.default, {
      name: button.icon,
      size: 15,
      color: "white"
    })
  })));
};
exports.PricingCard = PricingCard;
PricingCard.propTypes = {
  containerStyle: _config.ViewPropTypes.style,
  wrapperStyle: _config.ViewPropTypes.style,
  title: _propTypes.default.string,
  price: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  info: _propTypes.default.arrayOf(_propTypes.default.string),
  button: _propTypes.default.object,
  color: _propTypes.default.string,
  onButtonPress: _propTypes.default.func,
  titleStyle: _reactNative.Text.propTypes.style,
  pricingStyle: _reactNative.Text.propTypes.style,
  infoStyle: _reactNative.Text.propTypes.style,
  theme: _propTypes.default.object
};
PricingCard.defaultProps = {
  info: []
};
var styles = {
  container: function container(theme) {
    return (0, _extends2.default)({
      margin: 15,
      marginBottom: 15,
      backgroundColor: 'white',
      borderWidth: 1,
      padding: 15,
      borderColor: theme.colors.grey5
    }, _reactNative.Platform.select({
      android: {
        elevation: 1
      },
      default: {
        shadowColor: 'rgba(0,0,0, .2)',
        shadowOffset: {
          height: 1,
          width: 0
        },
        shadowOpacity: 0.5,
        shadowRadius: 0.5
      }
    }));
  },
  wrapper: {
    backgroundColor: 'transparent'
  },
  pricingTitle: (0, _extends2.default)({
    textAlign: 'center',
    fontSize: (0, _helpers.normalizeText)(30)
  }, _reactNative.Platform.select({
    android: (0, _extends2.default)({}, _config.fonts.android.black),
    default: {
      fontWeight: '800'
    }
  })),
  pricingPrice: (0, _extends2.default)({
    textAlign: 'center',
    marginTop: 10,
    marginBottom: 10,
    fontSize: (0, _helpers.normalizeText)(40)
  }, _reactNative.Platform.select({
    android: (0, _extends2.default)({}, _config.fonts.android.bold),
    default: {
      fontWeight: '700'
    }
  })),
  pricingInfo: function pricingInfo(theme) {
    return (0, _extends2.default)({
      textAlign: 'center',
      marginTop: 5,
      marginBottom: 5,
      color: theme.colors.grey3
    }, _reactNative.Platform.select({
      android: (0, _extends2.default)({}, _config.fonts.android.bold),
      default: {
        fontWeight: '600'
      }
    }));
  },
  button: {
    marginTop: 15,
    marginBottom: 10
  }
};
var _default = (0, _config.withTheme)(PricingCard, 'PricingCard');
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfcmVhY3ROYXRpdmUiLCJfaGVscGVycyIsIl9jb25maWciLCJfVGV4dCIsIl9CdXR0b24iLCJfSWNvbiIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJQcmljaW5nQ2FyZCIsInByb3BzIiwidGhlbWUiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsImRlZmF1bHQiLCJjb250YWluZXJTdHlsZSIsIndyYXBwZXJTdHlsZSIsInRpdGxlIiwicHJpY2UiLCJpbmZvIiwiYnV0dG9uIiwiX3Jlc3QkY29sb3IiLCJjb2xvciIsImNvbG9ycyIsInByaW1hcnkiLCJ0aXRsZVN0eWxlIiwicHJpY2luZ1N0eWxlIiwiaW5mb1N0eWxlIiwib25CdXR0b25QcmVzcyIsImF0dHJpYnV0ZXMiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsIl9leHRlbmRzMiIsInN0eWxlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJzdHlsZXMiLCJjb250YWluZXIiLCJ3cmFwcGVyIiwidGVzdElEIiwicHJpY2luZ1RpdGxlIiwicHJpY2luZ1ByaWNlIiwibWFwIiwiaXRlbSIsImtleSIsInByaWNpbmdJbmZvIiwiYnV0dG9uU3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvblByZXNzIiwiaWNvbiIsIm5hbWUiLCJzaXplIiwiZXhwb3J0cyIsInByb3BUeXBlcyIsIlZpZXdQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJhcnJheU9mIiwib2JqZWN0IiwiZnVuYyIsIlJOVGV4dCIsImRlZmF1bHRQcm9wcyIsIm1hcmdpbiIsIm1hcmdpbkJvdHRvbSIsImJvcmRlcldpZHRoIiwicGFkZGluZyIsImJvcmRlckNvbG9yIiwiZ3JleTUiLCJQbGF0Zm9ybSIsInNlbGVjdCIsImFuZHJvaWQiLCJlbGV2YXRpb24iLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsImhlaWdodCIsIndpZHRoIiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsInRleHRBbGlnbiIsImZvbnRTaXplIiwibm9ybWFsaXplVGV4dCIsImZvbnRzIiwiYmxhY2siLCJmb250V2VpZ2h0IiwibWFyZ2luVG9wIiwiYm9sZCIsImdyZXkzIiwiX2RlZmF1bHQiLCJ3aXRoVGhlbWUiXSwic291cmNlcyI6WyJQcmljaW5nQ2FyZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFZpZXcsIFBsYXRmb3JtLCBTdHlsZVNoZWV0LCBUZXh0IGFzIFJOVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB7IG5vcm1hbGl6ZVRleHQgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB7IGZvbnRzLCBWaWV3UHJvcFR5cGVzLCB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb25maWcnO1xuXG5pbXBvcnQgVGV4dCBmcm9tICcuLi90ZXh0L1RleHQnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi9idXR0b25zL0J1dHRvbic7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9pY29ucy9JY29uJztcblxuY29uc3QgUHJpY2luZ0NhcmQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgdGhlbWUsIC4uLnJlc3QgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHtcbiAgICBjb250YWluZXJTdHlsZSxcbiAgICB3cmFwcGVyU3R5bGUsXG4gICAgdGl0bGUsXG4gICAgcHJpY2UsXG4gICAgaW5mbyxcbiAgICBidXR0b24sXG4gICAgY29sb3IgPSB0aGVtZS5jb2xvcnMucHJpbWFyeSxcbiAgICB0aXRsZVN0eWxlLFxuICAgIHByaWNpbmdTdHlsZSxcbiAgICBpbmZvU3R5bGUsXG4gICAgb25CdXR0b25QcmVzcyxcbiAgICAuLi5hdHRyaWJ1dGVzXG4gIH0gPSByZXN0O1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXdcbiAgICAgIHsuLi5hdHRyaWJ1dGVzfVxuICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuZmxhdHRlbihbXG4gICAgICAgIHN0eWxlcy5jb250YWluZXIodGhlbWUpLFxuICAgICAgICBjb250YWluZXJTdHlsZSAmJiBjb250YWluZXJTdHlsZSxcbiAgICAgIF0pfVxuICAgID5cbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgIHN0eWxlcy53cmFwcGVyLFxuICAgICAgICAgIHdyYXBwZXJTdHlsZSAmJiB3cmFwcGVyU3R5bGUsXG4gICAgICAgIF0pfVxuICAgICAgPlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHRlc3RJRD1cInByaWNpbmdDYXJkVGl0bGVcIlxuICAgICAgICAgIHN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLnByaWNpbmdUaXRsZSxcbiAgICAgICAgICAgIHRpdGxlU3R5bGUsXG4gICAgICAgICAgICB7IGNvbG9yIH0sXG4gICAgICAgICAgXSl9XG4gICAgICAgID5cbiAgICAgICAgICB7dGl0bGV9XG4gICAgICAgIDwvVGV4dD5cblxuICAgICAgICA8VGV4dCBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMucHJpY2luZ1ByaWNlLCBwcmljaW5nU3R5bGVdKX0+XG4gICAgICAgICAge3ByaWNlfVxuICAgICAgICA8L1RleHQ+XG5cbiAgICAgICAge2luZm8ubWFwKGl0ZW0gPT4gKFxuICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICBrZXk9e2l0ZW19XG4gICAgICAgICAgICBzdHlsZT17U3R5bGVTaGVldC5mbGF0dGVuKFtzdHlsZXMucHJpY2luZ0luZm8odGhlbWUpLCBpbmZvU3R5bGVdKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICkpfVxuXG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0aXRsZT17YnV0dG9uLnRpdGxlfVxuICAgICAgICAgIGJ1dHRvblN0eWxlPXtTdHlsZVNoZWV0LmZsYXR0ZW4oW1xuICAgICAgICAgICAgc3R5bGVzLmJ1dHRvbixcbiAgICAgICAgICAgIGJ1dHRvbi5idXR0b25TdHlsZSxcbiAgICAgICAgICAgIHsgYmFja2dyb3VuZENvbG9yOiBjb2xvciB9LFxuICAgICAgICAgIF0pfVxuICAgICAgICAgIHRpdGxlU3R5bGU9e2J1dHRvbi50aXRsZVN0eWxlfVxuICAgICAgICAgIG9uUHJlc3M9e29uQnV0dG9uUHJlc3N9XG4gICAgICAgICAgaWNvbj17PEljb24gbmFtZT17YnV0dG9uLmljb259IHNpemU9ezE1fSBjb2xvcj1cIndoaXRlXCIgLz59XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuUHJpY2luZ0NhcmQucHJvcFR5cGVzID0ge1xuICBjb250YWluZXJTdHlsZTogVmlld1Byb3BUeXBlcy5zdHlsZSxcbiAgd3JhcHBlclN0eWxlOiBWaWV3UHJvcFR5cGVzLnN0eWxlLFxuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJpY2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgaW5mbzogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksXG4gIGJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQnV0dG9uUHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuICB0aXRsZVN0eWxlOiBSTlRleHQucHJvcFR5cGVzLnN0eWxlLFxuICBwcmljaW5nU3R5bGU6IFJOVGV4dC5wcm9wVHlwZXMuc3R5bGUsXG4gIGluZm9TdHlsZTogUk5UZXh0LnByb3BUeXBlcy5zdHlsZSxcbiAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5QcmljaW5nQ2FyZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGluZm86IFtdLFxufTtcblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHRoZW1lID0+ICh7XG4gICAgbWFyZ2luOiAxNSxcbiAgICBtYXJnaW5Cb3R0b206IDE1LFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBwYWRkaW5nOiAxNSxcbiAgICBib3JkZXJDb2xvcjogdGhlbWUuY29sb3JzLmdyZXk1LFxuICAgIC4uLlBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICBhbmRyb2lkOiB7XG4gICAgICAgIGVsZXZhdGlvbjogMSxcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLDAsMCwgLjIpJyxcbiAgICAgICAgc2hhZG93T2Zmc2V0OiB7IGhlaWdodDogMSwgd2lkdGg6IDAgfSxcbiAgICAgICAgc2hhZG93T3BhY2l0eTogMC41LFxuICAgICAgICBzaGFkb3dSYWRpdXM6IDAuNSxcbiAgICAgIH0sXG4gICAgfSksXG4gIH0pLFxuICB3cmFwcGVyOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICB9LFxuICBwcmljaW5nVGl0bGU6IHtcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIGZvbnRTaXplOiBub3JtYWxpemVUZXh0KDMwKSxcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgYW5kcm9pZDoge1xuICAgICAgICAuLi5mb250cy5hbmRyb2lkLmJsYWNrLFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgZm9udFdlaWdodDogJzgwMCcsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBwcmljaW5nUHJpY2U6IHtcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIG1hcmdpblRvcDogMTAsXG4gICAgbWFyZ2luQm90dG9tOiAxMCxcbiAgICBmb250U2l6ZTogbm9ybWFsaXplVGV4dCg0MCksXG4gICAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICAgIGFuZHJvaWQ6IHtcbiAgICAgICAgLi4uZm9udHMuYW5kcm9pZC5ib2xkLFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgZm9udFdlaWdodDogJzcwMCcsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBwcmljaW5nSW5mbzogdGhlbWUgPT4gKHtcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIG1hcmdpblRvcDogNSxcbiAgICBtYXJnaW5Cb3R0b206IDUsXG4gICAgY29sb3I6IHRoZW1lLmNvbG9ycy5ncmV5MyxcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgYW5kcm9pZDoge1xuICAgICAgICAuLi5mb250cy5hbmRyb2lkLmJvbGQsXG4gICAgICB9LFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgICAgIH0sXG4gICAgfSksXG4gIH0pLFxuICBidXR0b246IHtcbiAgICBtYXJnaW5Ub3A6IDE1LFxuICAgIG1hcmdpbkJvdHRvbTogMTAsXG4gIH0sXG59O1xuXG5leHBvcnQgeyBQcmljaW5nQ2FyZCB9O1xuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFByaWNpbmdDYXJkLCAnUHJpY2luZ0NhcmQnKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLEtBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFNLE9BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLEtBQUEsR0FBQVIsc0JB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