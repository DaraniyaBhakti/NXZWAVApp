b48ffe29c3bee8e36ca5d3033162289b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _require = require('./AnimatedEvent'),
  AnimatedEvent = _require.AnimatedEvent,
  attachNativeEvent = _require.attachNativeEvent;
var AnimatedImplementation = require('./AnimatedImplementation');
var AnimatedInterpolation = require('./nodes/AnimatedInterpolation');
var AnimatedNode = require('./nodes/AnimatedNode');
var AnimatedProps = require('./nodes/AnimatedProps');
var AnimatedValue = require('./nodes/AnimatedValue');
var AnimatedValueXY = require('./nodes/AnimatedValueXY');
var createAnimatedComponent = require('./createAnimatedComponent');
var emptyAnimation = {
  start: function start() {},
  stop: function stop() {},
  reset: function reset() {},
  _startNativeLoop: function _startNativeLoop() {},
  _isUsingNativeDriver: function _isUsingNativeDriver() {
    return false;
  }
};
var spring = function spring(value, config) {
  var anyValue = value;
  return (0, _extends2.default)({}, emptyAnimation, {
    start: function start(callback) {
      anyValue.setValue(config.toValue);
      callback && callback({
        finished: true
      });
    }
  });
};
var timing = function timing(value, config) {
  var anyValue = value;
  return (0, _extends2.default)({}, emptyAnimation, {
    start: function start(callback) {
      anyValue.setValue(config.toValue);
      callback && callback({
        finished: true
      });
    }
  });
};
var decay = function decay(value, config) {
  return emptyAnimation;
};
var sequence = function sequence(animations) {
  return emptyAnimation;
};
var parallel = function parallel(animations, config) {
  return emptyAnimation;
};
var delay = function delay(time) {
  return emptyAnimation;
};
var stagger = function stagger(time, animations) {
  return emptyAnimation;
};
var loop = function loop(animation) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref$iterations = _ref.iterations,
    iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;
  return emptyAnimation;
};
var event = function event(argMapping, config) {
  return null;
};
module.exports = {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  Interpolation: AnimatedInterpolation,
  Node: AnimatedNode,
  decay: decay,
  timing: timing,
  spring: spring,
  add: AnimatedImplementation.add,
  subtract: AnimatedImplementation.subtract,
  divide: AnimatedImplementation.divide,
  multiply: AnimatedImplementation.multiply,
  modulo: AnimatedImplementation.modulo,
  diffClamp: AnimatedImplementation.diffClamp,
  delay: delay,
  sequence: sequence,
  parallel: parallel,
  stagger: stagger,
  loop: loop,
  event: event,
  createAnimatedComponent: createAnimatedComponent,
  attachNativeEvent: attachNativeEvent,
  forkEvent: AnimatedImplementation.forkEvent,
  unforkEvent: AnimatedImplementation.unforkEvent,
  Event: AnimatedEvent,
  __PropsOnlyForTests: AnimatedProps
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9leHRlbmRzMiIsIl9yZXF1aXJlIiwiQW5pbWF0ZWRFdmVudCIsImF0dGFjaE5hdGl2ZUV2ZW50IiwiQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsIkFuaW1hdGVkSW50ZXJwb2xhdGlvbiIsIkFuaW1hdGVkTm9kZSIsIkFuaW1hdGVkUHJvcHMiLCJBbmltYXRlZFZhbHVlIiwiQW5pbWF0ZWRWYWx1ZVhZIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJlbXB0eUFuaW1hdGlvbiIsInN0YXJ0Iiwic3RvcCIsInJlc2V0IiwiX3N0YXJ0TmF0aXZlTG9vcCIsIl9pc1VzaW5nTmF0aXZlRHJpdmVyIiwic3ByaW5nIiwidmFsdWUiLCJjb25maWciLCJhbnlWYWx1ZSIsImRlZmF1bHQiLCJjYWxsYmFjayIsInNldFZhbHVlIiwidG9WYWx1ZSIsImZpbmlzaGVkIiwidGltaW5nIiwiZGVjYXkiLCJzZXF1ZW5jZSIsImFuaW1hdGlvbnMiLCJwYXJhbGxlbCIsImRlbGF5IiwidGltZSIsInN0YWdnZXIiLCJsb29wIiwiYW5pbWF0aW9uIiwiX3JlZiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9yZWYkaXRlcmF0aW9ucyIsIml0ZXJhdGlvbnMiLCJldmVudCIsImFyZ01hcHBpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwiVmFsdWUiLCJWYWx1ZVhZIiwiSW50ZXJwb2xhdGlvbiIsIk5vZGUiLCJhZGQiLCJzdWJ0cmFjdCIsImRpdmlkZSIsIm11bHRpcGx5IiwibW9kdWxvIiwiZGlmZkNsYW1wIiwiZm9ya0V2ZW50IiwidW5mb3JrRXZlbnQiLCJFdmVudCIsIl9fUHJvcHNPbmx5Rm9yVGVzdHMiXSwic291cmNlcyI6WyJBbmltYXRlZE1vY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHtBbmltYXRlZEV2ZW50LCBhdHRhY2hOYXRpdmVFdmVudH0gPSByZXF1aXJlKCcuL0FuaW1hdGVkRXZlbnQnKTtcbmNvbnN0IEFuaW1hdGVkSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL0FuaW1hdGVkSW1wbGVtZW50YXRpb24nKTtcbmNvbnN0IEFuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IHJlcXVpcmUoJy4vbm9kZXMvQW5pbWF0ZWRJbnRlcnBvbGF0aW9uJyk7XG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL25vZGVzL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRQcm9wcyA9IHJlcXVpcmUoJy4vbm9kZXMvQW5pbWF0ZWRQcm9wcycpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vbm9kZXMvQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZVhZID0gcmVxdWlyZSgnLi9ub2Rlcy9BbmltYXRlZFZhbHVlWFknKTtcblxuY29uc3QgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQgPSByZXF1aXJlKCcuL2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50Jyk7XG5cbmltcG9ydCB0eXBlIHtFbmRDYWxsYmFja30gZnJvbSAnLi9hbmltYXRpb25zL0FuaW1hdGlvbic7XG5pbXBvcnQgdHlwZSB7VGltaW5nQW5pbWF0aW9uQ29uZmlnfSBmcm9tICcuL2FuaW1hdGlvbnMvVGltaW5nQW5pbWF0aW9uJztcbmltcG9ydCB0eXBlIHtEZWNheUFuaW1hdGlvbkNvbmZpZ30gZnJvbSAnLi9hbmltYXRpb25zL0RlY2F5QW5pbWF0aW9uJztcbmltcG9ydCB0eXBlIHtTcHJpbmdBbmltYXRpb25Db25maWd9IGZyb20gJy4vYW5pbWF0aW9ucy9TcHJpbmdBbmltYXRpb24nO1xuaW1wb3J0IHR5cGUge01hcHBpbmcsIEV2ZW50Q29uZmlnfSBmcm9tICcuL0FuaW1hdGVkRXZlbnQnO1xuXG4vKipcbiAqIEFuaW1hdGlvbnMgYXJlIGEgc291cmNlIG9mIGZsYWtpbmVzcyBpbiBzbmFwc2hvdCB0ZXN0aW5nLiBUaGlzIG1vY2sgcmVwbGFjZXNcbiAqIGFuaW1hdGlvbiBmdW5jdGlvbnMgZnJvbSBBbmltYXRlZEltcGxlbWVudGF0aW9uIHdpdGggZW1wdHkgYW5pbWF0aW9ucyBmb3JcbiAqIHByZWRpY3RhYmlsaXR5IGluIHRlc3RzLlxuICovXG50eXBlIENvbXBvc2l0ZUFuaW1hdGlvbiA9IHtcbiAgc3RhcnQ6IChjYWxsYmFjaz86ID9FbmRDYWxsYmFjaykgPT4gdm9pZCxcbiAgc3RvcDogKCkgPT4gdm9pZCxcbiAgcmVzZXQ6ICgpID0+IHZvaWQsXG4gIF9zdGFydE5hdGl2ZUxvb3A6IChpdGVyYXRpb25zPzogbnVtYmVyKSA9PiB2b2lkLFxuICBfaXNVc2luZ05hdGl2ZURyaXZlcjogKCkgPT4gYm9vbGVhbixcbn07XG5cbmNvbnN0IGVtcHR5QW5pbWF0aW9uID0ge1xuICBzdGFydDogKCkgPT4ge30sXG4gIHN0b3A6ICgpID0+IHt9LFxuICByZXNldDogKCkgPT4ge30sXG4gIF9zdGFydE5hdGl2ZUxvb3A6ICgpID0+IHt9LFxuICBfaXNVc2luZ05hdGl2ZURyaXZlcjogKCkgPT4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbn07XG5cbmNvbnN0IHNwcmluZyA9IGZ1bmN0aW9uKFxuICB2YWx1ZTogQW5pbWF0ZWRWYWx1ZSB8IEFuaW1hdGVkVmFsdWVYWSxcbiAgY29uZmlnOiBTcHJpbmdBbmltYXRpb25Db25maWcsXG4pOiBDb21wb3NpdGVBbmltYXRpb24ge1xuICBjb25zdCBhbnlWYWx1ZTogYW55ID0gdmFsdWU7XG4gIHJldHVybiB7XG4gICAgLi4uZW1wdHlBbmltYXRpb24sXG4gICAgc3RhcnQ6IChjYWxsYmFjaz86ID9FbmRDYWxsYmFjayk6IHZvaWQgPT4ge1xuICAgICAgYW55VmFsdWUuc2V0VmFsdWUoY29uZmlnLnRvVmFsdWUpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe2ZpbmlzaGVkOiB0cnVlfSk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmNvbnN0IHRpbWluZyA9IGZ1bmN0aW9uKFxuICB2YWx1ZTogQW5pbWF0ZWRWYWx1ZSB8IEFuaW1hdGVkVmFsdWVYWSxcbiAgY29uZmlnOiBUaW1pbmdBbmltYXRpb25Db25maWcsXG4pOiBDb21wb3NpdGVBbmltYXRpb24ge1xuICBjb25zdCBhbnlWYWx1ZTogYW55ID0gdmFsdWU7XG4gIHJldHVybiB7XG4gICAgLi4uZW1wdHlBbmltYXRpb24sXG4gICAgc3RhcnQ6IChjYWxsYmFjaz86ID9FbmRDYWxsYmFjayk6IHZvaWQgPT4ge1xuICAgICAgYW55VmFsdWUuc2V0VmFsdWUoY29uZmlnLnRvVmFsdWUpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe2ZpbmlzaGVkOiB0cnVlfSk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmNvbnN0IGRlY2F5ID0gZnVuY3Rpb24oXG4gIHZhbHVlOiBBbmltYXRlZFZhbHVlIHwgQW5pbWF0ZWRWYWx1ZVhZLFxuICBjb25maWc6IERlY2F5QW5pbWF0aW9uQ29uZmlnLFxuKTogQ29tcG9zaXRlQW5pbWF0aW9uIHtcbiAgcmV0dXJuIGVtcHR5QW5pbWF0aW9uO1xufTtcblxuY29uc3Qgc2VxdWVuY2UgPSBmdW5jdGlvbihcbiAgYW5pbWF0aW9uczogQXJyYXk8Q29tcG9zaXRlQW5pbWF0aW9uPixcbik6IENvbXBvc2l0ZUFuaW1hdGlvbiB7XG4gIHJldHVybiBlbXB0eUFuaW1hdGlvbjtcbn07XG5cbnR5cGUgUGFyYWxsZWxDb25maWcgPSB7XG4gIHN0b3BUb2dldGhlcj86IGJvb2xlYW4sXG59O1xuY29uc3QgcGFyYWxsZWwgPSBmdW5jdGlvbihcbiAgYW5pbWF0aW9uczogQXJyYXk8Q29tcG9zaXRlQW5pbWF0aW9uPixcbiAgY29uZmlnPzogP1BhcmFsbGVsQ29uZmlnLFxuKTogQ29tcG9zaXRlQW5pbWF0aW9uIHtcbiAgcmV0dXJuIGVtcHR5QW5pbWF0aW9uO1xufTtcblxuY29uc3QgZGVsYXkgPSBmdW5jdGlvbih0aW1lOiBudW1iZXIpOiBDb21wb3NpdGVBbmltYXRpb24ge1xuICByZXR1cm4gZW1wdHlBbmltYXRpb247XG59O1xuXG5jb25zdCBzdGFnZ2VyID0gZnVuY3Rpb24oXG4gIHRpbWU6IG51bWJlcixcbiAgYW5pbWF0aW9uczogQXJyYXk8Q29tcG9zaXRlQW5pbWF0aW9uPixcbik6IENvbXBvc2l0ZUFuaW1hdGlvbiB7XG4gIHJldHVybiBlbXB0eUFuaW1hdGlvbjtcbn07XG5cbnR5cGUgTG9vcEFuaW1hdGlvbkNvbmZpZyA9IHtpdGVyYXRpb25zOiBudW1iZXIsIHJlc2V0QmVmb3JlSXRlcmF0aW9uPzogYm9vbGVhbn07XG5cbmNvbnN0IGxvb3AgPSBmdW5jdGlvbihcbiAgYW5pbWF0aW9uOiBDb21wb3NpdGVBbmltYXRpb24sXG4gIHtpdGVyYXRpb25zID0gLTF9OiBMb29wQW5pbWF0aW9uQ29uZmlnID0ge30sXG4pOiBDb21wb3NpdGVBbmltYXRpb24ge1xuICByZXR1cm4gZW1wdHlBbmltYXRpb247XG59O1xuXG5jb25zdCBldmVudCA9IGZ1bmN0aW9uKGFyZ01hcHBpbmc6IEFycmF5PD9NYXBwaW5nPiwgY29uZmlnPzogRXZlbnRDb25maWcpOiBhbnkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBWYWx1ZTogQW5pbWF0ZWRWYWx1ZSxcbiAgVmFsdWVYWTogQW5pbWF0ZWRWYWx1ZVhZLFxuICBJbnRlcnBvbGF0aW9uOiBBbmltYXRlZEludGVycG9sYXRpb24sXG4gIE5vZGU6IEFuaW1hdGVkTm9kZSxcbiAgZGVjYXksXG4gIHRpbWluZyxcbiAgc3ByaW5nLFxuICBhZGQ6IEFuaW1hdGVkSW1wbGVtZW50YXRpb24uYWRkLFxuICBzdWJ0cmFjdDogQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5zdWJ0cmFjdCxcbiAgZGl2aWRlOiBBbmltYXRlZEltcGxlbWVudGF0aW9uLmRpdmlkZSxcbiAgbXVsdGlwbHk6IEFuaW1hdGVkSW1wbGVtZW50YXRpb24ubXVsdGlwbHksXG4gIG1vZHVsbzogQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5tb2R1bG8sXG4gIGRpZmZDbGFtcDogQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5kaWZmQ2xhbXAsXG4gIGRlbGF5LFxuICBzZXF1ZW5jZSxcbiAgcGFyYWxsZWwsXG4gIHN0YWdnZXIsXG4gIGxvb3AsXG4gIGV2ZW50LFxuICBjcmVhdGVBbmltYXRlZENvbXBvbmVudCxcbiAgYXR0YWNoTmF0aXZlRXZlbnQsXG4gIGZvcmtFdmVudDogQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5mb3JrRXZlbnQsXG4gIHVuZm9ya0V2ZW50OiBBbmltYXRlZEltcGxlbWVudGF0aW9uLnVuZm9ya0V2ZW50LFxuICBFdmVudDogQW5pbWF0ZWRFdmVudCxcbiAgX19Qcm9wc09ubHlGb3JUZXN0czogQW5pbWF0ZWRQcm9wcyxcbn07XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUViLElBQUFFLFFBQUEsR0FBMkNGLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztFQUE5REcsYUFBYSxHQUFBRCxRQUFBLENBQWJDLGFBQWE7RUFBRUMsaUJBQWlCLEdBQUFGLFFBQUEsQ0FBakJFLGlCQUFpQjtBQUN2QyxJQUFNQyxzQkFBc0IsR0FBR0wsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBQ2xFLElBQU1NLHFCQUFxQixHQUFHTixPQUFPLENBQUMsK0JBQStCLENBQUM7QUFDdEUsSUFBTU8sWUFBWSxHQUFHUCxPQUFPLENBQUMsc0JBQXNCLENBQUM7QUFDcEQsSUFBTVEsYUFB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