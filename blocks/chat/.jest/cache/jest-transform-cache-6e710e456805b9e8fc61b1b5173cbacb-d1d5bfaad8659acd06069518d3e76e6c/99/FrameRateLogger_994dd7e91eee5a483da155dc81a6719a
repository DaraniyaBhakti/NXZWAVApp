2f5e2654a58d7f70e6256286961f5067
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativeFrameRateLogger = _interopRequireDefault(require("./NativeFrameRateLogger"));
var invariant = require('invariant');
var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(_NativeFrameRateLogger.default, 'Trying to debug FrameRateLogger without the native module!');
    }
    if (_NativeFrameRateLogger.default) {
      var optionsClone = {
        debug: !!options.debug,
        reportStackTraces: !!options.reportStackTraces
      };
      _NativeFrameRateLogger.default.setGlobalOptions(optionsClone);
    }
  },
  setContext: function setContext(context) {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.setContext(context);
  },
  beginScroll: function beginScroll() {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.beginScroll();
  },
  endScroll: function endScroll() {
    _NativeFrameRateLogger.default && _NativeFrameRateLogger.default.endScroll();
  }
};
module.exports = FrameRateLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9OYXRpdmVGcmFtZVJhdGVMb2dnZXIiLCJpbnZhcmlhbnQiLCJGcmFtZVJhdGVMb2dnZXIiLCJzZXRHbG9iYWxPcHRpb25zIiwib3B0aW9ucyIsImRlYnVnIiwidW5kZWZpbmVkIiwiTmF0aXZlRnJhbWVSYXRlTG9nZ2VyIiwib3B0aW9uc0Nsb25lIiwicmVwb3J0U3RhY2tUcmFjZXMiLCJzZXRDb250ZXh0IiwiY29udGV4dCIsImJlZ2luU2Nyb2xsIiwiZW5kU2Nyb2xsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkZyYW1lUmF0ZUxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlciBmcm9tICcuL05hdGl2ZUZyYW1lUmF0ZUxvZ2dlcic7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEZsb3cgQVBJIGZvciBuYXRpdmUgRnJhbWVSYXRlTG9nZ2VyIG1vZHVsZS4gSWYgdGhlIG5hdGl2ZSBtb2R1bGUgaXMgbm90IGluc3RhbGxlZCwgZnVuY3Rpb24gY2FsbHNcbiAqIGFyZSBqdXN0IG5vLW9wcy5cbiAqXG4gKiBUeXBpY2FsIGJlaGF2aW9yIGlzIHRoYXQgYHNldENvbnRleHRgIGlzIGNhbGxlZCB3aGVuIGEgbmV3IHNjcmVlbiBpcyBsb2FkZWQgKGUuZy4gdmlhIGFcbiAqIG5hdmlnYXRpb24gaW50ZWdyYXRpb24pLCBhbmQgdGhlbiBgYmVnaW5TY3JvbGxgIGlzIGNhbGxlZCBieSBgU2Nyb2xsUmVzcG9uZGVyYCBhdCB3aGljaCBwb2ludCB0aGVcbiAqIG5hdGl2ZSBtb2R1bGUgdGhlbiBiZWdpbnMgdHJhY2tpbmcgZnJhbWUgZHJvcHMuIFdoZW4gYFNjcm9sbFJlc3BvbmRlcmAgY2FsbHMgYGVuZFNjcm9sbGAsIHRoZVxuICogbmF0aXZlIG1vZHVsZSBnYXRoZXJzIHVwIGFsbCBpdCdzIGZyYW1lIGRyb3AgZGF0YSBhbmQgcmVwb3J0cyBpdCB2aWEgYW4gYW5hbHl0aWNzIHBpcGVsaW5lIGZvclxuICogYW5hbHlzaXMuXG4gKlxuICogTm90ZSB0aGF0IGBiZWdpblNjcm9sbGAgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBieSBgU2Nyb2xsUmVzcG9uZGVyYCAtIHVuY2xlYXIgaWYgdGhhdCdzIGFcbiAqIGJ1ZywgYnV0IHRoZSBuYXRpdmUgbW9kdWxlIHNob3VsZCBiZSByb2J1c3QgdG8gdGhhdC5cbiAqXG4gKiBJbiB0aGUgZnV0dXJlIHdlIG1heSBhZGQgc3VwcG9ydCBmb3IgdHJhY2tpbmcgZnJhbWUgZHJvcHMgaW4gb3RoZXIgdHlwZXMgb2YgaW50ZXJhY3Rpb25zIGJleW9uZFxuICogc2Nyb2xsaW5nLlxuICovXG5jb25zdCBGcmFtZVJhdGVMb2dnZXIgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgYGRlYnVnYCB0byBzZWUgbG9jYWwgbG9ncyBvZiB3aGF0J3MgZ29pbmcgb24uIGByZXBvcnRTdGFja1RyYWNlc2Agd2lsbCBncmFiIHN0YWNrIHRyYWNlc1xuICAgKiBkdXJpbmcgVUkgdGhyZWFkIHN0YWxscyBhbmQgdXBsb2FkIHRoZW0gaWYgdGhlIG5hdGl2ZSBtb2R1bGUgc3VwcG9ydHMgaXQuXG4gICAqL1xuICBzZXRHbG9iYWxPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zOiB7XG4gICAgZGVidWc/OiBib29sZWFuLFxuICAgIHJlcG9ydFN0YWNrVHJhY2VzPzogYm9vbGVhbixcbiAgfSkge1xuICAgIGlmIChvcHRpb25zLmRlYnVnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyLFxuICAgICAgICAnVHJ5aW5nIHRvIGRlYnVnIEZyYW1lUmF0ZUxvZ2dlciB3aXRob3V0IHRoZSBuYXRpdmUgbW9kdWxlIScsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoTmF0aXZlRnJhbWVSYXRlTG9nZ2VyKSB7XG4gICAgICAvLyBOZWVkcyB0byBjbG9uZSB0aGUgb2JqZWN0IGZpcnN0IHRvIGF2b2lkIG1vZGlmeWluZyB0aGUgYXJndW1lbnQuXG4gICAgICBjb25zdCBvcHRpb25zQ2xvbmUgPSB7XG4gICAgICAgIGRlYnVnOiAhIW9wdGlvbnMuZGVidWcsXG4gICAgICAgIHJlcG9ydFN0YWNrVHJhY2VzOiAhIW9wdGlvbnMucmVwb3J0U3RhY2tUcmFjZXMsXG4gICAgICB9O1xuICAgICAgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyLnNldEdsb2JhbE9wdGlvbnMob3B0aW9uc0Nsb25lKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE11c3QgY2FsbCBgc2V0Q29udGV4dGAgYmVmb3JlIGFueSBldmVudHMgY2FuIGJlIHByb3Blcmx5IHRyYWNrZWQsIHdoaWNoIGlzIGRvbmUgYXV0b21hdGljYWxseVxuICAgKiBpbiBgQXBwUmVnaXN0cnlgLCBidXQgbmF2aWdhdGlvbiBpcyBhbHNvIGEgY29tbW9uIHBsYWNlIHRvIGhvb2sgaW4uXG4gICAqL1xuICBzZXRDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0OiBzdHJpbmcpIHtcbiAgICBOYXRpdmVGcmFtZVJhdGVMb2dnZXIgJiYgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyLnNldENvbnRleHQoY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGxlZCBpbiBgU2Nyb2xsUmVzcG9uZGVyYCBzbyBhbnkgY29tcG9uZW50IHRoYXQgdXNlcyB0aGF0IG1vZHVsZSB3aWxsIGhhbmRsZSB0aGlzXG4gICAqIGF1dG9tYXRpY2FsbHkuXG4gICAqL1xuICBiZWdpblNjcm9sbCgpIHtcbiAgICBOYXRpdmVGcmFtZVJhdGVMb2dnZXIgJiYgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyLmJlZ2luU2Nyb2xsKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGxlZCBpbiBgU2Nyb2xsUmVzcG9uZGVyYCBzbyBhbnkgY29tcG9uZW50IHRoYXQgdXNlcyB0aGF0IG1vZHVsZSB3aWxsIGhhbmRsZSB0aGlzXG4gICAqIGF1dG9tYXRpY2FsbHkuXG4gICAqL1xuICBlbmRTY3JvbGwoKSB7XG4gICAgTmF0aXZlRnJhbWVSYXRlTG9nZ2VyICYmIE5hdGl2ZUZyYW1lUmF0ZUxvZ2dlci5lbmRTY3JvbGwoKTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnJhbWVSYXRlTG9nZ2VyO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFFYixJQUFBQyxzQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBTUUsU0FBUyxHQUFHRixPQUFPLENBQUMsV0FBVyxDQUFDO0FBa0J0QyxJQUFNRyxlQUFlLEdBQUc7RUFLdEJDLGdCQUFnQixFQUFFLFNBQUFBLGlCQUFTQyxPQUcxQixFQUFFO0lBQ0QsSUFBSUEsT0FBTyxDQUFDQyxLQUFLLEtBQUtDLFNBQVMsRUFBRTtNQUMvQkwsU0FBUyxDQUNQTSw4QkFBcUIsRUFDckIsNERBQ0YsQ0FBQztJQUNIO0lBQ0EsSUFBSUEsOEJBQXFCLEVBQUU7TUFFekIsSUFBTUMsWUFBWSxHQUFHO1FBQ25CSCxLQUFLLEVBQUUsQ0FBQyxDQUFDRCxPQUFPLENBQUNDLEtBQUs7UUFDdEJJLGlCQUFpQixFQUFFLENBQUMsQ0FBQ0wsT0FBTyxDQUFDSztNQUMvQixDQUFDO01BQ0RGLDhCQUFxQixDQUFDSixnQkFBZ0IsQ0FBQ0ssWUFBWSxDQUFDO0lBQ3REO0VBQ0YsQ0FBQztFQU1ERSxVQUFVLEVBQUUsU0FBQUEsV0FBU0MsT0FBZSxFQUFFO0lBQ3BDSiw4QkFBcUIsSUFBSUEsOEJBQXFCLENBQUNHLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDO0VBQ3BFLENBQUM7RUFNREMsV0FBVyxXQUFBQSxZQUFBLEVBQUc7SUFDWkwsOEJBQXFCLElBQUlBLDhCQUFxQixDQUFDSyxXQUFXLENBQUMsQ0FBQztFQUM5RCxDQUFDO0VBTURDLFNBQVMsV0FBQUEsVUFBQSxFQUFHO0lBQ1ZOLDhCQUFxQixJQUFJQSw4QkFBcUIsQ0FBQ00sU0FBUyxDQUFDLENBQUM7RUFDNUQ7QUFDRixDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHYixlQUFlIn0=