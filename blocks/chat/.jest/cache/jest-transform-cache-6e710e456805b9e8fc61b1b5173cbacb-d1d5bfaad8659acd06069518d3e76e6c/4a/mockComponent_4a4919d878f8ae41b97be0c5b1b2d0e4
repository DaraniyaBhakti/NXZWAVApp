f437c684caeca7e17d3f2c1bd8616766
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
module.exports = function (moduleName, instanceMethods) {
  var _class;
  var RealComponent = jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  var Component = (_class = function (_SuperClass) {
    (0, _inherits2.default)(Component, _SuperClass);
    var _super = _createSuper(Component);
    function Component() {
      (0, _classCallCheck2.default)(this, Component);
      return _super.apply(this, arguments);
    }
    (0, _createClass2.default)(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var name = RealComponent.displayName || RealComponent.name || (RealComponent.render ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
        var props = (0, _extends2.default)({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(name.replace(/^(RCT|RK)/, ''), props, this.props.children);
      }
    }]);
    return Component;
  }(SuperClass), _class.displayName = 'Component', _class);
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    (0, _extends2.default)(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9leHRlbmRzMiIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiZGVmYXVsdCIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVOYW1lIiwiaW5zdGFuY2VNZXRob2RzIiwiX2NsYXNzIiwiUmVhbENvbXBvbmVudCIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiUmVhY3QiLCJTdXBlckNsYXNzIiwiQ29tcG9uZW50IiwiX1N1cGVyQ2xhc3MiLCJfc3VwZXIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIl90aGlzIiwibmFtZSIsImRpc3BsYXlOYW1lIiwicHJvcHMiLCJkZWZhdWx0UHJvcHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJ1bmRlZmluZWQiLCJjcmVhdGVFbGVtZW50IiwicmVwbGFjZSIsImNoaWxkcmVuIiwiY2xhc3NTdGF0aWMiXSwic291cmNlcyI6WyJtb2NrQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAobW9kdWxlTmFtZSwgaW5zdGFuY2VNZXRob2RzKSA9PiB7XG4gIGNvbnN0IFJlYWxDb21wb25lbnQgPSBqZXN0LnJlcXVpcmVBY3R1YWwobW9kdWxlTmFtZSk7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICBjb25zdCBTdXBlckNsYXNzID1cbiAgICB0eXBlb2YgUmVhbENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyA/IFJlYWxDb21wb25lbnQgOiBSZWFjdC5Db21wb25lbnQ7XG5cbiAgY29uc3QgQ29tcG9uZW50ID0gY2xhc3MgZXh0ZW5kcyBTdXBlckNsYXNzIHtcbiAgICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnQ29tcG9uZW50JztcblxuICAgIHJlbmRlcigpIHtcbiAgICAgIGNvbnN0IG5hbWUgPVxuICAgICAgICBSZWFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgICAgIFJlYWxDb21wb25lbnQubmFtZSB8fFxuICAgICAgICAoUmVhbENvbXBvbmVudC5yZW5kZXIgLy8gaGFuZGxlIFJlYWN0LmZvcndhcmRSZWZcbiAgICAgICAgICA/IFJlYWxDb21wb25lbnQucmVuZGVyLmRpc3BsYXlOYW1lIHx8IFJlYWxDb21wb25lbnQucmVuZGVyLm5hbWVcbiAgICAgICAgICA6ICdVbmtub3duJyk7XG5cbiAgICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgUmVhbENvbXBvbmVudC5kZWZhdWx0UHJvcHMpO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcykge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIC8vIFdlIGNhbid0IGp1c3QgYXNzaWduIHByb3BzIG9uIHRvcCBvZiBkZWZhdWx0UHJvcHNcbiAgICAgICAgICAvLyBiZWNhdXNlIFJlYWN0IHRyZWF0cyB1bmRlZmluZWQgYXMgc3BlY2lhbCBhbmQgZGlmZmVyZW50IGZyb20gbnVsbC5cbiAgICAgICAgICAvLyBJZiBhIHByb3AgaXMgc3BlY2lmaWVkIGJ1dCBzZXQgdG8gdW5kZWZpbmVkIGl0IGlzIGlnbm9yZWQgYW5kIHRoZVxuICAgICAgICAgIC8vIGRlZmF1bHQgcHJvcCBpcyB1c2VkIGluc3RlYWQuIElmIGl0IGlzIHNldCB0byBudWxsLCB0aGVuIHRoZVxuICAgICAgICAgIC8vIG51bGwgdmFsdWUgb3ZlcndyaXRlcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wXSA9IHRoaXMucHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIG5hbWUucmVwbGFjZSgvXihSQ1R8UkspLywgJycpLFxuICAgICAgICBwcm9wcyxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbixcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIE9iamVjdC5rZXlzKFJlYWxDb21wb25lbnQpLmZvckVhY2goY2xhc3NTdGF0aWMgPT4ge1xuICAgIENvbXBvbmVudFtjbGFzc1N0YXRpY10gPSBSZWFsQ29tcG9uZW50W2NsYXNzU3RhdGljXTtcbiAgfSk7XG5cbiAgaWYgKGluc3RhbmNlTWV0aG9kcyAhPSBudWxsKSB7XG4gICAgT2JqZWN0LmFzc2lnbihDb21wb25lbnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FB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